// Generated by gencpp from file simulator/Laser_values.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_LASER_VALUES_H
#define SIMULATOR_MESSAGE_LASER_VALUES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct Laser_values_
{
  typedef Laser_values_<ContainerAllocator> Type;

  Laser_values_()
    : sensors()  {
      sensors.assign(0.0);
  }
  Laser_values_(const ContainerAllocator& _alloc)
    : sensors()  {
  (void)_alloc;
      sensors.assign(0.0);
  }



   typedef boost::array<float, 100>  _sensors_type;
  _sensors_type sensors;





  typedef boost::shared_ptr< ::simulator::Laser_values_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::Laser_values_<ContainerAllocator> const> ConstPtr;

}; // struct Laser_values_

typedef ::simulator::Laser_values_<std::allocator<void> > Laser_values;

typedef boost::shared_ptr< ::simulator::Laser_values > Laser_valuesPtr;
typedef boost::shared_ptr< ::simulator::Laser_values const> Laser_valuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::Laser_values_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::Laser_values_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::Laser_values_<ContainerAllocator1> & lhs, const ::simulator::Laser_values_<ContainerAllocator2> & rhs)
{
  return lhs.sensors == rhs.sensors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::Laser_values_<ContainerAllocator1> & lhs, const ::simulator::Laser_values_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::Laser_values_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::Laser_values_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::Laser_values_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::Laser_values_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::Laser_values_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::Laser_values_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::Laser_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e419bb63c59113a3a33a33958511350f";
  }

  static const char* value(const ::simulator::Laser_values_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe419bb63c59113a3ULL;
  static const uint64_t static_value2 = 0xa33a33958511350fULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::Laser_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/Laser_values";
  }

  static const char* value(const ::simulator::Laser_values_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::Laser_values_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[100] sensors\n"
;
  }

  static const char* value(const ::simulator::Laser_values_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::Laser_values_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Laser_values_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::Laser_values_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::Laser_values_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "sensors: ";
    if (v.sensors.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.sensors.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.sensors[i]);
    }
    if (v.sensors.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_LASER_VALUES_H
