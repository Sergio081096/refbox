// Generated by gencpp from file simulator/CFRParams.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_CFRPARAMS_H
#define SIMULATOR_MESSAGE_CFRPARAMS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct CFRParams_
{
  typedef CFRParams_<ContainerAllocator> Type;

  CFRParams_()
    : frame_id()
    , frame_value()  {
    }
  CFRParams_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , frame_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_value_type;
  _frame_value_type frame_value;





  typedef boost::shared_ptr< ::simulator::CFRParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::CFRParams_<ContainerAllocator> const> ConstPtr;

}; // struct CFRParams_

typedef ::simulator::CFRParams_<std::allocator<void> > CFRParams;

typedef boost::shared_ptr< ::simulator::CFRParams > CFRParamsPtr;
typedef boost::shared_ptr< ::simulator::CFRParams const> CFRParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::CFRParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::CFRParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::CFRParams_<ContainerAllocator1> & lhs, const ::simulator::CFRParams_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.frame_value == rhs.frame_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::CFRParams_<ContainerAllocator1> & lhs, const ::simulator::CFRParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::CFRParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::CFRParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::CFRParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::CFRParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::CFRParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::CFRParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::CFRParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4244adddfc44a0d0799b10600c99b834";
  }

  static const char* value(const ::simulator::CFRParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4244adddfc44a0d0ULL;
  static const uint64_t static_value2 = 0x799b10600c99b834ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::CFRParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/CFRParams";
  }

  static const char* value(const ::simulator::CFRParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::CFRParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"string frame_value\n"
;
  }

  static const char* value(const ::simulator::CFRParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::CFRParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.frame_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CFRParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::CFRParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::CFRParams_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "frame_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_CFRPARAMS_H
