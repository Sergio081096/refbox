// Generated by gencpp from file simulator/simulator_find_objResponse.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_SIMULATOR_FIND_OBJRESPONSE_H
#define SIMULATOR_MESSAGE_SIMULATOR_FIND_OBJRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct simulator_find_objResponse_
{
  typedef simulator_find_objResponse_<ContainerAllocator> Type;

  simulator_find_objResponse_()
    : answer()  {
    }
  simulator_find_objResponse_(const ContainerAllocator& _alloc)
    : answer(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _answer_type;
  _answer_type answer;





  typedef boost::shared_ptr< ::simulator::simulator_find_objResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::simulator_find_objResponse_<ContainerAllocator> const> ConstPtr;

}; // struct simulator_find_objResponse_

typedef ::simulator::simulator_find_objResponse_<std::allocator<void> > simulator_find_objResponse;

typedef boost::shared_ptr< ::simulator::simulator_find_objResponse > simulator_find_objResponsePtr;
typedef boost::shared_ptr< ::simulator::simulator_find_objResponse const> simulator_find_objResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::simulator_find_objResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::simulator_find_objResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::simulator_find_objResponse_<ContainerAllocator1> & lhs, const ::simulator::simulator_find_objResponse_<ContainerAllocator2> & rhs)
{
  return lhs.answer == rhs.answer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::simulator_find_objResponse_<ContainerAllocator1> & lhs, const ::simulator::simulator_find_objResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::simulator_find_objResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::simulator_find_objResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::simulator_find_objResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7e708f879c94bb931716d8f4f130f30";
  }

  static const char* value(const ::simulator::simulator_find_objResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7e708f879c94bb9ULL;
  static const uint64_t static_value2 = 0x31716d8f4f130f30ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/simulator_find_objResponse";
  }

  static const char* value(const ::simulator::simulator_find_objResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string answer\n"
;
  }

  static const char* value(const ::simulator::simulator_find_objResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.answer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simulator_find_objResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::simulator_find_objResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::simulator_find_objResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "answer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.answer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_SIMULATOR_FIND_OBJRESPONSE_H
