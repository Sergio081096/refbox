// Generated by gencpp from file simulator/PlanningCmdClips.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_PLANNINGCMDCLIPS_H
#define SIMULATOR_MESSAGE_PLANNINGCMDCLIPS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct PlanningCmdClips_
{
  typedef PlanningCmdClips_<ContainerAllocator> Type;

  PlanningCmdClips_()
    : name()
    , params()
    , id(0)
    , successful(0)  {
    }
  PlanningCmdClips_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , params(_alloc)
    , id(0)
    , successful(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _params_type;
  _params_type params;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _successful_type;
  _successful_type successful;





  typedef boost::shared_ptr< ::simulator::PlanningCmdClips_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::PlanningCmdClips_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningCmdClips_

typedef ::simulator::PlanningCmdClips_<std::allocator<void> > PlanningCmdClips;

typedef boost::shared_ptr< ::simulator::PlanningCmdClips > PlanningCmdClipsPtr;
typedef boost::shared_ptr< ::simulator::PlanningCmdClips const> PlanningCmdClipsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::PlanningCmdClips_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::PlanningCmdClips_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::PlanningCmdClips_<ContainerAllocator1> & lhs, const ::simulator::PlanningCmdClips_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.params == rhs.params &&
    lhs.id == rhs.id &&
    lhs.successful == rhs.successful;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::PlanningCmdClips_<ContainerAllocator1> & lhs, const ::simulator::PlanningCmdClips_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::PlanningCmdClips_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::PlanningCmdClips_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::PlanningCmdClips_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::PlanningCmdClips_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::PlanningCmdClips_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::PlanningCmdClips_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::PlanningCmdClips_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74450e6e60135cf7d80c9acedebf851b";
  }

  static const char* value(const ::simulator::PlanningCmdClips_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74450e6e60135cf7ULL;
  static const uint64_t static_value2 = 0xd80c9acedebf851bULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::PlanningCmdClips_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/PlanningCmdClips";
  }

  static const char* value(const ::simulator::PlanningCmdClips_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::PlanningCmdClips_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string params\n"
"int32 id\n"
"int32 successful\n"
;
  }

  static const char* value(const ::simulator::PlanningCmdClips_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::PlanningCmdClips_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.params);
      stream.next(m.id);
      stream.next(m.successful);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningCmdClips_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::PlanningCmdClips_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::PlanningCmdClips_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "params: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.params);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "successful: ";
    Printer<int32_t>::stream(s, indent + "  ", v.successful);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_PLANNINGCMDCLIPS_H
