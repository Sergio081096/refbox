// Generated by gencpp from file simulator/Parameters.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_PARAMETERS_H
#define SIMULATOR_MESSAGE_PARAMETERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct Parameters_
{
  typedef Parameters_<ContainerAllocator> Type;

  Parameters_()
    : robot_x(0.0)
    , robot_y(0.0)
    , robot_theta(0.0)
    , robot_radio(0.0)
    , robot_max_advance(0.0)
    , robot_turn_angle(0.0)
    , laser_num_sensors(0)
    , laser_origin(0.0)
    , laser_range(0.0)
    , laser_value(0.0)
    , world_name()
    , noise(false)
    , run(false)
    , light_x(0.0)
    , light_y(0.0)
    , behavior(0)
    , steps(0)
    , useRealRobot(false)
    , useLidar(false)
    , useSArray(false)  {
    }
  Parameters_(const ContainerAllocator& _alloc)
    : robot_x(0.0)
    , robot_y(0.0)
    , robot_theta(0.0)
    , robot_radio(0.0)
    , robot_max_advance(0.0)
    , robot_turn_angle(0.0)
    , laser_num_sensors(0)
    , laser_origin(0.0)
    , laser_range(0.0)
    , laser_value(0.0)
    , world_name(_alloc)
    , noise(false)
    , run(false)
    , light_x(0.0)
    , light_y(0.0)
    , behavior(0)
    , steps(0)
    , useRealRobot(false)
    , useLidar(false)
    , useSArray(false)  {
  (void)_alloc;
    }



   typedef float _robot_x_type;
  _robot_x_type robot_x;

   typedef float _robot_y_type;
  _robot_y_type robot_y;

   typedef float _robot_theta_type;
  _robot_theta_type robot_theta;

   typedef float _robot_radio_type;
  _robot_radio_type robot_radio;

   typedef float _robot_max_advance_type;
  _robot_max_advance_type robot_max_advance;

   typedef float _robot_turn_angle_type;
  _robot_turn_angle_type robot_turn_angle;

   typedef int32_t _laser_num_sensors_type;
  _laser_num_sensors_type laser_num_sensors;

   typedef float _laser_origin_type;
  _laser_origin_type laser_origin;

   typedef float _laser_range_type;
  _laser_range_type laser_range;

   typedef float _laser_value_type;
  _laser_value_type laser_value;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _world_name_type;
  _world_name_type world_name;

   typedef uint8_t _noise_type;
  _noise_type noise;

   typedef uint8_t _run_type;
  _run_type run;

   typedef float _light_x_type;
  _light_x_type light_x;

   typedef float _light_y_type;
  _light_y_type light_y;

   typedef int32_t _behavior_type;
  _behavior_type behavior;

   typedef int32_t _steps_type;
  _steps_type steps;

   typedef uint8_t _useRealRobot_type;
  _useRealRobot_type useRealRobot;

   typedef uint8_t _useLidar_type;
  _useLidar_type useLidar;

   typedef uint8_t _useSArray_type;
  _useSArray_type useSArray;





  typedef boost::shared_ptr< ::simulator::Parameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::Parameters_<ContainerAllocator> const> ConstPtr;

}; // struct Parameters_

typedef ::simulator::Parameters_<std::allocator<void> > Parameters;

typedef boost::shared_ptr< ::simulator::Parameters > ParametersPtr;
typedef boost::shared_ptr< ::simulator::Parameters const> ParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::Parameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::Parameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::Parameters_<ContainerAllocator1> & lhs, const ::simulator::Parameters_<ContainerAllocator2> & rhs)
{
  return lhs.robot_x == rhs.robot_x &&
    lhs.robot_y == rhs.robot_y &&
    lhs.robot_theta == rhs.robot_theta &&
    lhs.robot_radio == rhs.robot_radio &&
    lhs.robot_max_advance == rhs.robot_max_advance &&
    lhs.robot_turn_angle == rhs.robot_turn_angle &&
    lhs.laser_num_sensors == rhs.laser_num_sensors &&
    lhs.laser_origin == rhs.laser_origin &&
    lhs.laser_range == rhs.laser_range &&
    lhs.laser_value == rhs.laser_value &&
    lhs.world_name == rhs.world_name &&
    lhs.noise == rhs.noise &&
    lhs.run == rhs.run &&
    lhs.light_x == rhs.light_x &&
    lhs.light_y == rhs.light_y &&
    lhs.behavior == rhs.behavior &&
    lhs.steps == rhs.steps &&
    lhs.useRealRobot == rhs.useRealRobot &&
    lhs.useLidar == rhs.useLidar &&
    lhs.useSArray == rhs.useSArray;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::Parameters_<ContainerAllocator1> & lhs, const ::simulator::Parameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::Parameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::Parameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::Parameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::Parameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::Parameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::Parameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::Parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8da773b9a3eb19514cafc70e9a72680";
  }

  static const char* value(const ::simulator::Parameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8da773b9a3eb195ULL;
  static const uint64_t static_value2 = 0x14cafc70e9a72680ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::Parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/Parameters";
  }

  static const char* value(const ::simulator::Parameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::Parameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 robot_x\n"
"float32 robot_y\n"
"float32 robot_theta\n"
"float32 robot_radio\n"
"float32 robot_max_advance\n"
"float32 robot_turn_angle\n"
"int32 laser_num_sensors\n"
"float32 laser_origin\n"
"float32 laser_range\n"
"float32 laser_value\n"
"string world_name\n"
"bool noise\n"
"bool run\n"
"float32 light_x\n"
"float32 light_y\n"
"int32 behavior\n"
"int32 steps\n"
"bool useRealRobot\n"
"bool useLidar\n"
"bool useSArray\n"
;
  }

  static const char* value(const ::simulator::Parameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::Parameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_x);
      stream.next(m.robot_y);
      stream.next(m.robot_theta);
      stream.next(m.robot_radio);
      stream.next(m.robot_max_advance);
      stream.next(m.robot_turn_angle);
      stream.next(m.laser_num_sensors);
      stream.next(m.laser_origin);
      stream.next(m.laser_range);
      stream.next(m.laser_value);
      stream.next(m.world_name);
      stream.next(m.noise);
      stream.next(m.run);
      stream.next(m.light_x);
      stream.next(m.light_y);
      stream.next(m.behavior);
      stream.next(m.steps);
      stream.next(m.useRealRobot);
      stream.next(m.useLidar);
      stream.next(m.useSArray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Parameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::Parameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::Parameters_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "robot_x: ";
    Printer<float>::stream(s, indent + "  ", v.robot_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "robot_y: ";
    Printer<float>::stream(s, indent + "  ", v.robot_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "robot_theta: ";
    Printer<float>::stream(s, indent + "  ", v.robot_theta);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "robot_radio: ";
    Printer<float>::stream(s, indent + "  ", v.robot_radio);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "robot_max_advance: ";
    Printer<float>::stream(s, indent + "  ", v.robot_max_advance);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "robot_turn_angle: ";
    Printer<float>::stream(s, indent + "  ", v.robot_turn_angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "laser_num_sensors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laser_num_sensors);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "laser_origin: ";
    Printer<float>::stream(s, indent + "  ", v.laser_origin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "laser_range: ";
    Printer<float>::stream(s, indent + "  ", v.laser_range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "laser_value: ";
    Printer<float>::stream(s, indent + "  ", v.laser_value);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "world_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.world_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "noise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.noise);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "run: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "light_x: ";
    Printer<float>::stream(s, indent + "  ", v.light_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "light_y: ";
    Printer<float>::stream(s, indent + "  ", v.light_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "behavior: ";
    Printer<int32_t>::stream(s, indent + "  ", v.behavior);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "steps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steps);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "useRealRobot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useRealRobot);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "useLidar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useLidar);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "useSArray: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.useSArray);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_PARAMETERS_H
