// Generated by gencpp from file simulator/PosesArray.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_POSESARRAY_H
#define SIMULATOR_MESSAGE_POSESARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <simulator/poseCustom.h>

namespace simulator
{
template <class ContainerAllocator>
struct PosesArray_
{
  typedef PosesArray_<ContainerAllocator> Type;

  PosesArray_()
    : posesArray()  {
    }
  PosesArray_(const ContainerAllocator& _alloc)
    : posesArray(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::simulator::poseCustom_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::simulator::poseCustom_<ContainerAllocator> >> _posesArray_type;
  _posesArray_type posesArray;





  typedef boost::shared_ptr< ::simulator::PosesArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::PosesArray_<ContainerAllocator> const> ConstPtr;

}; // struct PosesArray_

typedef ::simulator::PosesArray_<std::allocator<void> > PosesArray;

typedef boost::shared_ptr< ::simulator::PosesArray > PosesArrayPtr;
typedef boost::shared_ptr< ::simulator::PosesArray const> PosesArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::PosesArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::PosesArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::PosesArray_<ContainerAllocator1> & lhs, const ::simulator::PosesArray_<ContainerAllocator2> & rhs)
{
  return lhs.posesArray == rhs.posesArray;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::PosesArray_<ContainerAllocator1> & lhs, const ::simulator::PosesArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::PosesArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::PosesArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::PosesArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::PosesArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::PosesArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::PosesArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::PosesArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a0583a49d80d1c90ba8a84a5a9bd6d9";
  }

  static const char* value(const ::simulator::PosesArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a0583a49d80d1c9ULL;
  static const uint64_t static_value2 = 0x0ba8a84a5a9bd6d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::PosesArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/PosesArray";
  }

  static const char* value(const ::simulator::PosesArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::PosesArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poseCustom[] posesArray\n"
"================================================================================\n"
"MSG: simulator/poseCustom\n"
"string name\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::simulator::PosesArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::PosesArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posesArray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosesArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::PosesArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::PosesArray_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "posesArray: ";
    if (v.posesArray.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.posesArray.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::simulator::poseCustom_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.posesArray[i]);
    }
    if (v.posesArray.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_POSESARRAY_H
