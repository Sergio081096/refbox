// Generated by gencpp from file simulator/RecognizedSpeech.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_RECOGNIZEDSPEECH_H
#define SIMULATOR_MESSAGE_RECOGNIZEDSPEECH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct RecognizedSpeech_
{
  typedef RecognizedSpeech_<ContainerAllocator> Type;

  RecognizedSpeech_()
    : hypothesis()
    , confidences()  {
    }
  RecognizedSpeech_(const ContainerAllocator& _alloc)
    : hypothesis(_alloc)
    , confidences(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _hypothesis_type;
  _hypothesis_type hypothesis;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _confidences_type;
  _confidences_type confidences;





  typedef boost::shared_ptr< ::simulator::RecognizedSpeech_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::RecognizedSpeech_<ContainerAllocator> const> ConstPtr;

}; // struct RecognizedSpeech_

typedef ::simulator::RecognizedSpeech_<std::allocator<void> > RecognizedSpeech;

typedef boost::shared_ptr< ::simulator::RecognizedSpeech > RecognizedSpeechPtr;
typedef boost::shared_ptr< ::simulator::RecognizedSpeech const> RecognizedSpeechConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::RecognizedSpeech_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::RecognizedSpeech_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::RecognizedSpeech_<ContainerAllocator1> & lhs, const ::simulator::RecognizedSpeech_<ContainerAllocator2> & rhs)
{
  return lhs.hypothesis == rhs.hypothesis &&
    lhs.confidences == rhs.confidences;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::RecognizedSpeech_<ContainerAllocator1> & lhs, const ::simulator::RecognizedSpeech_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::RecognizedSpeech_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::RecognizedSpeech_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::RecognizedSpeech_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::RecognizedSpeech_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::RecognizedSpeech_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::RecognizedSpeech_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::RecognizedSpeech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2cc166e4fd867bfc13e04afeee883be";
  }

  static const char* value(const ::simulator::RecognizedSpeech_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2cc166e4fd867bfULL;
  static const uint64_t static_value2 = 0xc13e04afeee883beULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::RecognizedSpeech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/RecognizedSpeech";
  }

  static const char* value(const ::simulator::RecognizedSpeech_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::RecognizedSpeech_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] hypothesis\n"
"float32[] confidences\n"
;
  }

  static const char* value(const ::simulator::RecognizedSpeech_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::RecognizedSpeech_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hypothesis);
      stream.next(m.confidences);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecognizedSpeech_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::RecognizedSpeech_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::RecognizedSpeech_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "hypothesis: ";
    if (v.hypothesis.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.hypothesis.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.hypothesis[i]);
    }
    if (v.hypothesis.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "confidences: ";
    if (v.confidences.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.confidences.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.confidences[i]);
    }
    if (v.confidences.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_RECOGNIZEDSPEECH_H
