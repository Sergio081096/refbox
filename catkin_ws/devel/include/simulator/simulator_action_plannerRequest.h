// Generated by gencpp from file simulator/simulator_action_plannerRequest.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_SIMULATOR_ACTION_PLANNERREQUEST_H
#define SIMULATOR_MESSAGE_SIMULATOR_ACTION_PLANNERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct simulator_action_plannerRequest_
{
  typedef simulator_action_plannerRequest_<ContainerAllocator> Type;

  simulator_action_plannerRequest_()
    : ROS_System()
    , action()
    , object()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , arm()  {
    }
  simulator_action_plannerRequest_(const ContainerAllocator& _alloc)
    : ROS_System(_alloc)
    , action(_alloc)
    , object(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , arm(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ROS_System_type;
  _ROS_System_type ROS_System;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_type;
  _object_type object;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _arm_type;
  _arm_type arm;





  typedef boost::shared_ptr< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct simulator_action_plannerRequest_

typedef ::simulator::simulator_action_plannerRequest_<std::allocator<void> > simulator_action_plannerRequest;

typedef boost::shared_ptr< ::simulator::simulator_action_plannerRequest > simulator_action_plannerRequestPtr;
typedef boost::shared_ptr< ::simulator::simulator_action_plannerRequest const> simulator_action_plannerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::simulator_action_plannerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::simulator_action_plannerRequest_<ContainerAllocator1> & lhs, const ::simulator::simulator_action_plannerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ROS_System == rhs.ROS_System &&
    lhs.action == rhs.action &&
    lhs.object == rhs.object &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.arm == rhs.arm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::simulator_action_plannerRequest_<ContainerAllocator1> & lhs, const ::simulator::simulator_action_plannerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e420a2b65a244089da5f3e7ddb162c8e";
  }

  static const char* value(const ::simulator::simulator_action_plannerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe420a2b65a244089ULL;
  static const uint64_t static_value2 = 0xda5f3e7ddb162c8eULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/simulator_action_plannerRequest";
  }

  static const char* value(const ::simulator::simulator_action_plannerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ROS_System\n"
"string action\n"
"string object\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"string arm\n"
;
  }

  static const char* value(const ::simulator::simulator_action_plannerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ROS_System);
      stream.next(m.action);
      stream.next(m.object);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simulator_action_plannerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::simulator_action_plannerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::simulator_action_plannerRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "ROS_System: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ROS_System);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "arm: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_SIMULATOR_ACTION_PLANNERREQUEST_H
