// Generated by gencpp from file refbox_comm/RefboxMsg.msg
// DO NOT EDIT!


#ifndef REFBOX_COMM_MESSAGE_REFBOXMSG_H
#define REFBOX_COMM_MESSAGE_REFBOXMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <refbox_comm/RefboxData.h>

namespace refbox_comm
{
template <class ContainerAllocator>
struct RefboxMsg_
{
  typedef RefboxMsg_<ContainerAllocator> Type;

  RefboxMsg_()
    : type()
    , data()  {
    }
  RefboxMsg_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef  ::refbox_comm::RefboxData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::refbox_comm::RefboxMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::refbox_comm::RefboxMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RefboxMsg_

typedef ::refbox_comm::RefboxMsg_<std::allocator<void> > RefboxMsg;

typedef boost::shared_ptr< ::refbox_comm::RefboxMsg > RefboxMsgPtr;
typedef boost::shared_ptr< ::refbox_comm::RefboxMsg const> RefboxMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::refbox_comm::RefboxMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::refbox_comm::RefboxMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::refbox_comm::RefboxMsg_<ContainerAllocator1> & lhs, const ::refbox_comm::RefboxMsg_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::refbox_comm::RefboxMsg_<ContainerAllocator1> & lhs, const ::refbox_comm::RefboxMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace refbox_comm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::refbox_comm::RefboxMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::refbox_comm::RefboxMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::refbox_comm::RefboxMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e2f71e32076dc9993c4774056b8b2e6";
  }

  static const char* value(const ::refbox_comm::RefboxMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e2f71e32076dc99ULL;
  static const uint64_t static_value2 = 0x93c4774056b8b2e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "refbox_comm/RefboxMsg";
  }

  static const char* value(const ::refbox_comm::RefboxMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"refbox_comm/RefboxData data\n"
"================================================================================\n"
"MSG: refbox_comm/RefboxData\n"
"string[] data\n"
;
  }

  static const char* value(const ::refbox_comm::RefboxMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RefboxMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::refbox_comm::RefboxMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::refbox_comm::RefboxMsg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "data: ";
    Printer< ::refbox_comm::RefboxData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REFBOX_COMM_MESSAGE_REFBOXMSG_H
