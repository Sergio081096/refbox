// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimTimeSync.proto

#include "SimTimeSync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Time_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Time_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_Time_2eproto
namespace llsf_msgs {
class SimTimeSyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimTimeSync>
      _instance;
} _SimTimeSync_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_SimTimeSync_2eproto {
static void InitDefaultsSimTimeSync() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_SimTimeSync_default_instance_;
    new (ptr) ::llsf_msgs::SimTimeSync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::SimTimeSync::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SimTimeSync =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimTimeSync}, {
      &protobuf_Time_2eproto::scc_info_Time.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SimTimeSync.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SimTimeSync, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SimTimeSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SimTimeSync, sim_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SimTimeSync, real_time_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SimTimeSync, paused_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::llsf_msgs::SimTimeSync)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_SimTimeSync_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "SimTimeSync.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021SimTimeSync.proto\022\tllsf_msgs\032\nTime.pro"
      "to\"\203\001\n\013SimTimeSync\022!\n\010sim_time\030\001 \002(\0132\017.l"
      "lsf_msgs.Time\022\030\n\020real_time_factor\030\002 \002(\002\022"
      "\016\n\006paused\030\003 \002(\010\"\'\n\010CompType\022\014\n\007COMP_ID\020\320"
      "\017\022\r\n\010MSG_TYPE\020\307\002B4\n\037org.robocup_logistic"
      "s.llsf_msgsB\021SimTimeSyncProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimTimeSync.proto", &protobuf_RegisterTypes);
  ::protobuf_Time_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SimTimeSync_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* SimTimeSync_CompType_descriptor() {
  protobuf_SimTimeSync_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimTimeSync_2eproto::file_level_enum_descriptors[0];
}
bool SimTimeSync_CompType_IsValid(int value) {
  switch (value) {
    case 327:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SimTimeSync_CompType SimTimeSync::COMP_ID;
const SimTimeSync_CompType SimTimeSync::MSG_TYPE;
const SimTimeSync_CompType SimTimeSync::CompType_MIN;
const SimTimeSync_CompType SimTimeSync::CompType_MAX;
const int SimTimeSync::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SimTimeSync::InitAsDefaultInstance() {
  ::llsf_msgs::_SimTimeSync_default_instance_._instance.get_mutable()->sim_time_ = const_cast< ::llsf_msgs::Time*>(
      ::llsf_msgs::Time::internal_default_instance());
}
void SimTimeSync::clear_sim_time() {
  if (sim_time_ != NULL) sim_time_->Clear();
  clear_has_sim_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimTimeSync::kSimTimeFieldNumber;
const int SimTimeSync::kRealTimeFactorFieldNumber;
const int SimTimeSync::kPausedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimTimeSync::SimTimeSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_SimTimeSync_2eproto::scc_info_SimTimeSync.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.SimTimeSync)
}
SimTimeSync::SimTimeSync(const SimTimeSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sim_time()) {
    sim_time_ = new ::llsf_msgs::Time(*from.sim_time_);
  } else {
    sim_time_ = NULL;
  }
  ::memcpy(&real_time_factor_, &from.real_time_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&paused_) -
    reinterpret_cast<char*>(&real_time_factor_)) + sizeof(paused_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.SimTimeSync)
}

void SimTimeSync::SharedCtor() {
  ::memset(&sim_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paused_) -
      reinterpret_cast<char*>(&sim_time_)) + sizeof(paused_));
}

SimTimeSync::~SimTimeSync() {
  // @@protoc_insertion_point(destructor:llsf_msgs.SimTimeSync)
  SharedDtor();
}

void SimTimeSync::SharedDtor() {
  if (this != internal_default_instance()) delete sim_time_;
}

void SimTimeSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimTimeSync::descriptor() {
  ::protobuf_SimTimeSync_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SimTimeSync_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimTimeSync& SimTimeSync::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_SimTimeSync_2eproto::scc_info_SimTimeSync.base);
  return *internal_default_instance();
}


void SimTimeSync::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.SimTimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sim_time_ != NULL);
    sim_time_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&real_time_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paused_) -
        reinterpret_cast<char*>(&real_time_factor_)) + sizeof(paused_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimTimeSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.SimTimeSync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.Time sim_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sim_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float real_time_factor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_real_time_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real_time_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool paused = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_paused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.SimTimeSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.SimTimeSync)
  return false;
#undef DO_
}

void SimTimeSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.SimTimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Time sim_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sim_time(), output);
  }

  // required float real_time_factor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->real_time_factor(), output);
  }

  // required bool paused = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->paused(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.SimTimeSync)
}

::google::protobuf::uint8* SimTimeSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.SimTimeSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Time sim_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sim_time(), deterministic, target);
  }

  // required float real_time_factor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->real_time_factor(), target);
  }

  // required bool paused = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->paused(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.SimTimeSync)
  return target;
}

size_t SimTimeSync::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.SimTimeSync)
  size_t total_size = 0;

  if (has_sim_time()) {
    // required .llsf_msgs.Time sim_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sim_time_);
  }

  if (has_real_time_factor()) {
    // required float real_time_factor = 2;
    total_size += 1 + 4;
  }

  if (has_paused()) {
    // required bool paused = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SimTimeSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.SimTimeSync)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .llsf_msgs.Time sim_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sim_time_);

    // required float real_time_factor = 2;
    total_size += 1 + 4;

    // required bool paused = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimTimeSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.SimTimeSync)
  GOOGLE_DCHECK_NE(&from, this);
  const SimTimeSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimTimeSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.SimTimeSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.SimTimeSync)
    MergeFrom(*source);
  }
}

void SimTimeSync::MergeFrom(const SimTimeSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.SimTimeSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sim_time()->::llsf_msgs::Time::MergeFrom(from.sim_time());
    }
    if (cached_has_bits & 0x00000002u) {
      real_time_factor_ = from.real_time_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      paused_ = from.paused_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimTimeSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.SimTimeSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimTimeSync::CopyFrom(const SimTimeSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.SimTimeSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimTimeSync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_sim_time()) {
    if (!this->sim_time_->IsInitialized()) return false;
  }
  return true;
}

void SimTimeSync::Swap(SimTimeSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimTimeSync::InternalSwap(SimTimeSync* other) {
  using std::swap;
  swap(sim_time_, other->sim_time_);
  swap(real_time_factor_, other->real_time_factor_);
  swap(paused_, other->paused_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimTimeSync::GetMetadata() const {
  protobuf_SimTimeSync_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SimTimeSync_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::SimTimeSync* Arena::CreateMaybeMessage< ::llsf_msgs::SimTimeSync >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::SimTimeSync >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
