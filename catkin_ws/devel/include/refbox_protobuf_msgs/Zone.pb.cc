// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Zone.proto

#include "Zone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace llsf_msgs {
}  // namespace llsf_msgs
namespace protobuf_Zone_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Zone.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nZone.proto\022\tllsf_msgs*\311\t\n\004Zone\022\t\n\005C_Z1"
      "8\020\022\022\t\n\005C_Z28\020\034\022\t\n\005C_Z38\020&\022\t\n\005C_Z48\0200\022\t\n\005"
      "C_Z58\020:\022\t\n\005C_Z68\020D\022\t\n\005C_Z78\020N\022\t\n\005C_Z17\020\021"
      "\022\t\n\005C_Z27\020\033\022\t\n\005C_Z37\020%\022\t\n\005C_Z47\020/\022\t\n\005C_Z"
      "57\0209\022\t\n\005C_Z67\020C\022\t\n\005C_Z77\020M\022\t\n\005C_Z16\020\020\022\t\n"
      "\005C_Z26\020\032\022\t\n\005C_Z36\020$\022\t\n\005C_Z46\020.\022\t\n\005C_Z56\020"
      "8\022\t\n\005C_Z66\020B\022\t\n\005C_Z76\020L\022\t\n\005C_Z15\020\017\022\t\n\005C_"
      "Z25\020\031\022\t\n\005C_Z35\020#\022\t\n\005C_Z45\020-\022\t\n\005C_Z55\0207\022\t"
      "\n\005C_Z65\020A\022\t\n\005C_Z75\020K\022\t\n\005C_Z14\020\016\022\t\n\005C_Z24"
      "\020\030\022\t\n\005C_Z34\020\"\022\t\n\005C_Z44\020,\022\t\n\005C_Z54\0206\022\t\n\005C"
      "_Z64\020@\022\t\n\005C_Z74\020J\022\t\n\005C_Z13\020\r\022\t\n\005C_Z23\020\027\022"
      "\t\n\005C_Z33\020!\022\t\n\005C_Z43\020+\022\t\n\005C_Z53\0205\022\t\n\005C_Z6"
      "3\020\?\022\t\n\005C_Z73\020I\022\t\n\005C_Z12\020\014\022\t\n\005C_Z22\020\026\022\t\n\005"
      "C_Z32\020 \022\t\n\005C_Z42\020*\022\t\n\005C_Z52\0204\022\t\n\005C_Z62\020>"
      "\022\t\n\005C_Z72\020H\022\t\n\005C_Z11\020\013\022\t\n\005C_Z21\020\025\022\t\n\005C_Z"
      "31\020\037\022\t\n\005C_Z41\020)\022\n\n\005M_Z18\020\372\007\022\n\n\005M_Z28\020\204\010\022"
      "\n\n\005M_Z38\020\216\010\022\n\n\005M_Z48\020\230\010\022\n\n\005M_Z58\020\242\010\022\n\n\005M"
      "_Z68\020\254\010\022\n\n\005M_Z78\020\266\010\022\n\n\005M_Z17\020\371\007\022\n\n\005M_Z27"
      "\020\203\010\022\n\n\005M_Z37\020\215\010\022\n\n\005M_Z47\020\227\010\022\n\n\005M_Z57\020\241\010\022"
      "\n\n\005M_Z67\020\253\010\022\n\n\005M_Z77\020\265\010\022\n\n\005M_Z16\020\370\007\022\n\n\005M"
      "_Z26\020\202\010\022\n\n\005M_Z36\020\214\010\022\n\n\005M_Z46\020\226\010\022\n\n\005M_Z56"
      "\020\240\010\022\n\n\005M_Z66\020\252\010\022\n\n\005M_Z76\020\264\010\022\n\n\005M_Z15\020\367\007\022"
      "\n\n\005M_Z25\020\201\010\022\n\n\005M_Z35\020\213\010\022\n\n\005M_Z45\020\225\010\022\n\n\005M"
      "_Z55\020\237\010\022\n\n\005M_Z65\020\251\010\022\n\n\005M_Z75\020\263\010\022\n\n\005M_Z14"
      "\020\366\007\022\n\n\005M_Z24\020\200\010\022\n\n\005M_Z34\020\212\010\022\n\n\005M_Z44\020\224\010\022"
      "\n\n\005M_Z54\020\236\010\022\n\n\005M_Z64\020\250\010\022\n\n\005M_Z74\020\262\010\022\n\n\005M"
      "_Z13\020\365\007\022\n\n\005M_Z23\020\377\007\022\n\n\005M_Z33\020\211\010\022\n\n\005M_Z43"
      "\020\223\010\022\n\n\005M_Z53\020\235\010\022\n\n\005M_Z63\020\247\010\022\n\n\005M_Z73\020\261\010\022"
      "\n\n\005M_Z12\020\364\007\022\n\n\005M_Z22\020\376\007\022\n\n\005M_Z32\020\210\010\022\n\n\005M"
      "_Z42\020\222\010\022\n\n\005M_Z52\020\234\010\022\n\n\005M_Z62\020\246\010\022\n\n\005M_Z72"
      "\020\260\010\022\n\n\005M_Z11\020\363\007\022\n\n\005M_Z21\020\375\007\022\n\n\005M_Z31\020\207\010\022"
      "\n\n\005M_Z41\020\221\010B-\n\037org.robocup_logistics.lls"
      "f_msgsB\nZoneProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Zone.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Zone_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* Zone_descriptor() {
  protobuf_Zone_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Zone_2eproto::file_level_enum_descriptors[0];
}
bool Zone_IsValid(int value) {
  switch (value) {
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
