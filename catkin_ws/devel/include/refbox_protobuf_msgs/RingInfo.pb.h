// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RingInfo.proto

#ifndef PROTOBUF_INCLUDED_RingInfo_2eproto
#define PROTOBUF_INCLUDED_RingInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProductColor.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_RingInfo_2eproto 

namespace protobuf_RingInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_RingInfo_2eproto
namespace llsf_msgs {
class Ring;
class RingDefaultTypeInternal;
extern RingDefaultTypeInternal _Ring_default_instance_;
class RingInfo;
class RingInfoDefaultTypeInternal;
extern RingInfoDefaultTypeInternal _RingInfo_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::Ring* Arena::CreateMaybeMessage<::llsf_msgs::Ring>(Arena*);
template<> ::llsf_msgs::RingInfo* Arena::CreateMaybeMessage<::llsf_msgs::RingInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum RingInfo_CompType {
  RingInfo_CompType_COMP_ID = 2000,
  RingInfo_CompType_MSG_TYPE = 110
};
bool RingInfo_CompType_IsValid(int value);
const RingInfo_CompType RingInfo_CompType_CompType_MIN = RingInfo_CompType_MSG_TYPE;
const RingInfo_CompType RingInfo_CompType_CompType_MAX = RingInfo_CompType_COMP_ID;
const int RingInfo_CompType_CompType_ARRAYSIZE = RingInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RingInfo_CompType_descriptor();
inline const ::std::string& RingInfo_CompType_Name(RingInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RingInfo_CompType_descriptor(), value);
}
inline bool RingInfo_CompType_Parse(
    const ::std::string& name, RingInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RingInfo_CompType>(
    RingInfo_CompType_descriptor(), name, value);
}
// ===================================================================

class Ring : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.Ring) */ {
 public:
  Ring();
  virtual ~Ring();

  Ring(const Ring& from);

  inline Ring& operator=(const Ring& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ring(Ring&& from) noexcept
    : Ring() {
    *this = ::std::move(from);
  }

  inline Ring& operator=(Ring&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ring& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ring* internal_default_instance() {
    return reinterpret_cast<const Ring*>(
               &_Ring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ring* other);
  friend void swap(Ring& a, Ring& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ring* New() const final {
    return CreateMaybeMessage<Ring>(NULL);
  }

  Ring* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ring>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ring& from);
  void MergeFrom(const Ring& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ring* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 raw_material = 2;
  bool has_raw_material() const;
  void clear_raw_material();
  static const int kRawMaterialFieldNumber = 2;
  ::google::protobuf::uint32 raw_material() const;
  void set_raw_material(::google::protobuf::uint32 value);

  // required .llsf_msgs.RingColor ring_color = 1;
  bool has_ring_color() const;
  void clear_ring_color();
  static const int kRingColorFieldNumber = 1;
  ::llsf_msgs::RingColor ring_color() const;
  void set_ring_color(::llsf_msgs::RingColor value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.Ring)
 private:
  void set_has_ring_color();
  void clear_has_ring_color();
  void set_has_raw_material();
  void clear_has_raw_material();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 raw_material_;
  int ring_color_;
  friend struct ::protobuf_RingInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.RingInfo) */ {
 public:
  RingInfo();
  virtual ~RingInfo();

  RingInfo(const RingInfo& from);

  inline RingInfo& operator=(const RingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RingInfo(RingInfo&& from) noexcept
    : RingInfo() {
    *this = ::std::move(from);
  }

  inline RingInfo& operator=(RingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RingInfo* internal_default_instance() {
    return reinterpret_cast<const RingInfo*>(
               &_RingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RingInfo* other);
  friend void swap(RingInfo& a, RingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RingInfo* New() const final {
    return CreateMaybeMessage<RingInfo>(NULL);
  }

  RingInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RingInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RingInfo& from);
  void MergeFrom(const RingInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RingInfo_CompType CompType;
  static const CompType COMP_ID =
    RingInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    RingInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return RingInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    RingInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    RingInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    RingInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return RingInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return RingInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return RingInfo_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.Ring rings = 1;
  int rings_size() const;
  void clear_rings();
  static const int kRingsFieldNumber = 1;
  ::llsf_msgs::Ring* mutable_rings(int index);
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Ring >*
      mutable_rings();
  const ::llsf_msgs::Ring& rings(int index) const;
  ::llsf_msgs::Ring* add_rings();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Ring >&
      rings() const;

  // @@protoc_insertion_point(class_scope:llsf_msgs.RingInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Ring > rings_;
  friend struct ::protobuf_RingInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ring

// required .llsf_msgs.RingColor ring_color = 1;
inline bool Ring::has_ring_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ring::set_has_ring_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ring::clear_has_ring_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ring::clear_ring_color() {
  ring_color_ = 1;
  clear_has_ring_color();
}
inline ::llsf_msgs::RingColor Ring::ring_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Ring.ring_color)
  return static_cast< ::llsf_msgs::RingColor >(ring_color_);
}
inline void Ring::set_ring_color(::llsf_msgs::RingColor value) {
  assert(::llsf_msgs::RingColor_IsValid(value));
  set_has_ring_color();
  ring_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Ring.ring_color)
}

// required uint32 raw_material = 2;
inline bool Ring::has_raw_material() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ring::set_has_raw_material() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ring::clear_has_raw_material() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ring::clear_raw_material() {
  raw_material_ = 0u;
  clear_has_raw_material();
}
inline ::google::protobuf::uint32 Ring::raw_material() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Ring.raw_material)
  return raw_material_;
}
inline void Ring::set_raw_material(::google::protobuf::uint32 value) {
  set_has_raw_material();
  raw_material_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Ring.raw_material)
}

// -------------------------------------------------------------------

// RingInfo

// repeated .llsf_msgs.Ring rings = 1;
inline int RingInfo::rings_size() const {
  return rings_.size();
}
inline void RingInfo::clear_rings() {
  rings_.Clear();
}
inline ::llsf_msgs::Ring* RingInfo::mutable_rings(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.RingInfo.rings)
  return rings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Ring >*
RingInfo::mutable_rings() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.RingInfo.rings)
  return &rings_;
}
inline const ::llsf_msgs::Ring& RingInfo::rings(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.RingInfo.rings)
  return rings_.Get(index);
}
inline ::llsf_msgs::Ring* RingInfo::add_rings() {
  // @@protoc_insertion_point(field_add:llsf_msgs.RingInfo.rings)
  return rings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Ring >&
RingInfo::rings() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.RingInfo.rings)
  return rings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::RingInfo_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::RingInfo_CompType>() {
  return ::llsf_msgs::RingInfo_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_RingInfo_2eproto
