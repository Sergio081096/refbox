// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorkpieceInfo.proto

#include "WorkpieceInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_WorkpieceInfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_WorkpieceInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Workpiece;
}  // namespace protobuf_WorkpieceInfo_2eproto
namespace llsf_msgs {
class WorkpieceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Workpiece>
      _instance;
} _Workpiece_default_instance_;
class WorkpieceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkpieceInfo>
      _instance;
} _WorkpieceInfo_default_instance_;
class WorkpieceAddRingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkpieceAddRing>
      _instance;
} _WorkpieceAddRing_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_WorkpieceInfo_2eproto {
static void InitDefaultsWorkpiece() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_Workpiece_default_instance_;
    new (ptr) ::llsf_msgs::Workpiece();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::Workpiece::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Workpiece =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkpiece}, {}};

static void InitDefaultsWorkpieceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_WorkpieceInfo_default_instance_;
    new (ptr) ::llsf_msgs::WorkpieceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::WorkpieceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkpieceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkpieceInfo}, {
      &protobuf_WorkpieceInfo_2eproto::scc_info_Workpiece.base,}};

static void InitDefaultsWorkpieceAddRing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_WorkpieceAddRing_default_instance_;
    new (ptr) ::llsf_msgs::WorkpieceAddRing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::WorkpieceAddRing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkpieceAddRing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkpieceAddRing}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Workpiece.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkpieceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkpieceAddRing.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, at_machine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, team_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, base_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, ring_colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Workpiece, cap_color_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceInfo, workpieces_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceAddRing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceAddRing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceAddRing, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::WorkpieceAddRing, ring_color_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::llsf_msgs::Workpiece)},
  { 19, 25, sizeof(::llsf_msgs::WorkpieceInfo)},
  { 26, 33, sizeof(::llsf_msgs::WorkpieceAddRing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_Workpiece_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_WorkpieceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_WorkpieceAddRing_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "WorkpieceInfo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023WorkpieceInfo.proto\022\tllsf_msgs\032\nTeam.p"
      "roto\032\022ProductColor.proto\"\206\002\n\tWorkpiece\022\n"
      "\n\002id\030\001 \002(\r\022\022\n\nat_machine\030\002 \002(\t\022\017\n\007visibl"
      "e\030\003 \001(\002\022#\n\nteam_color\030\004 \001(\0162\017.llsf_msgs."
      "Team\022(\n\nbase_color\030\005 \001(\0162\024.llsf_msgs.Bas"
      "eColor\022)\n\013ring_colors\030\006 \003(\0162\024.llsf_msgs."
      "RingColor\022&\n\tcap_color\030\007 \001(\0162\023.llsf_msgs"
      ".CapColor\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010M"
      "SG_TYPE\0207\"a\n\rWorkpieceInfo\022(\n\nworkpieces"
      "\030\001 \003(\0132\024.llsf_msgs.Workpiece\"&\n\010CompType"
      "\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\0208\"p\n\020Workpiec"
      "eAddRing\022\n\n\002id\030\001 \002(\r\022(\n\nring_color\030\002 \002(\016"
      "2\024.llsf_msgs.RingColor\"&\n\010CompType\022\014\n\007CO"
      "MP_ID\020\320\017\022\014\n\010MSG_TYPE\0209B6\n\037org.robocup_lo"
      "gistics.llsf_msgsB\023WorkpieceInfoProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorkpieceInfo.proto", &protobuf_RegisterTypes);
  ::protobuf_Team_2eproto::AddDescriptors();
  ::protobuf_ProductColor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_WorkpieceInfo_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* Workpiece_CompType_descriptor() {
  protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_WorkpieceInfo_2eproto::file_level_enum_descriptors[0];
}
bool Workpiece_CompType_IsValid(int value) {
  switch (value) {
    case 55:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Workpiece_CompType Workpiece::COMP_ID;
const Workpiece_CompType Workpiece::MSG_TYPE;
const Workpiece_CompType Workpiece::CompType_MIN;
const Workpiece_CompType Workpiece::CompType_MAX;
const int Workpiece::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WorkpieceInfo_CompType_descriptor() {
  protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_WorkpieceInfo_2eproto::file_level_enum_descriptors[1];
}
bool WorkpieceInfo_CompType_IsValid(int value) {
  switch (value) {
    case 56:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WorkpieceInfo_CompType WorkpieceInfo::COMP_ID;
const WorkpieceInfo_CompType WorkpieceInfo::MSG_TYPE;
const WorkpieceInfo_CompType WorkpieceInfo::CompType_MIN;
const WorkpieceInfo_CompType WorkpieceInfo::CompType_MAX;
const int WorkpieceInfo::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WorkpieceAddRing_CompType_descriptor() {
  protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_WorkpieceInfo_2eproto::file_level_enum_descriptors[2];
}
bool WorkpieceAddRing_CompType_IsValid(int value) {
  switch (value) {
    case 57:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WorkpieceAddRing_CompType WorkpieceAddRing::COMP_ID;
const WorkpieceAddRing_CompType WorkpieceAddRing::MSG_TYPE;
const WorkpieceAddRing_CompType WorkpieceAddRing::CompType_MIN;
const WorkpieceAddRing_CompType WorkpieceAddRing::CompType_MAX;
const int WorkpieceAddRing::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Workpiece::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Workpiece::kIdFieldNumber;
const int Workpiece::kAtMachineFieldNumber;
const int Workpiece::kVisibleFieldNumber;
const int Workpiece::kTeamColorFieldNumber;
const int Workpiece::kBaseColorFieldNumber;
const int Workpiece::kRingColorsFieldNumber;
const int Workpiece::kCapColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Workpiece::Workpiece()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_WorkpieceInfo_2eproto::scc_info_Workpiece.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.Workpiece)
}
Workpiece::Workpiece(const Workpiece& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ring_colors_(from.ring_colors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  at_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_at_machine()) {
    at_machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.at_machine_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cap_color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cap_color_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.Workpiece)
}

void Workpiece::SharedCtor() {
  at_machine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(team_color_));
  base_color_ = 1;
  cap_color_ = 1;
}

Workpiece::~Workpiece() {
  // @@protoc_insertion_point(destructor:llsf_msgs.Workpiece)
  SharedDtor();
}

void Workpiece::SharedDtor() {
  at_machine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Workpiece::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Workpiece::descriptor() {
  ::protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WorkpieceInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Workpiece& Workpiece::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_WorkpieceInfo_2eproto::scc_info_Workpiece.base);
  return *internal_default_instance();
}


void Workpiece::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.Workpiece)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ring_colors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    at_machine_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_color_) -
        reinterpret_cast<char*>(&id_)) + sizeof(team_color_));
    base_color_ = 1;
    cap_color_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Workpiece::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.Workpiece)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string at_machine = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_at_machine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->at_machine().data(), static_cast<int>(this->at_machine().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.Workpiece.at_machine");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float visible = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Team team_color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.BaseColor base_color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::BaseColor_IsValid(value)) {
            set_base_color(static_cast< ::llsf_msgs::BaseColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llsf_msgs.RingColor ring_colors = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::RingColor_IsValid(value)) {
            add_ring_colors(static_cast< ::llsf_msgs::RingColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::llsf_msgs::RingColor_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ring_colors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.CapColor cap_color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::CapColor_IsValid(value)) {
            set_cap_color(static_cast< ::llsf_msgs::CapColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.Workpiece)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.Workpiece)
  return false;
#undef DO_
}

void Workpiece::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.Workpiece)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string at_machine = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->at_machine().data(), static_cast<int>(this->at_machine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Workpiece.at_machine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->at_machine(), output);
  }

  // optional float visible = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->visible(), output);
  }

  // optional .llsf_msgs.Team team_color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_color(), output);
  }

  // optional .llsf_msgs.BaseColor base_color = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->base_color(), output);
  }

  // repeated .llsf_msgs.RingColor ring_colors = 6;
  for (int i = 0, n = this->ring_colors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ring_colors(i), output);
  }

  // optional .llsf_msgs.CapColor cap_color = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->cap_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.Workpiece)
}

::google::protobuf::uint8* Workpiece::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.Workpiece)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string at_machine = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->at_machine().data(), static_cast<int>(this->at_machine().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Workpiece.at_machine");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->at_machine(), target);
  }

  // optional float visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->visible(), target);
  }

  // optional .llsf_msgs.Team team_color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_color(), target);
  }

  // optional .llsf_msgs.BaseColor base_color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->base_color(), target);
  }

  // repeated .llsf_msgs.RingColor ring_colors = 6;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    6, this->ring_colors_, target);

  // optional .llsf_msgs.CapColor cap_color = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->cap_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.Workpiece)
  return target;
}

size_t Workpiece::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.Workpiece)
  size_t total_size = 0;

  if (has_at_machine()) {
    // required string at_machine = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->at_machine());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t Workpiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.Workpiece)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string at_machine = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->at_machine());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .llsf_msgs.RingColor ring_colors = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ring_colors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ring_colors(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional float visible = 3;
    if (has_visible()) {
      total_size += 1 + 4;
    }

    // optional .llsf_msgs.Team team_color = 4;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }

    // optional .llsf_msgs.BaseColor base_color = 5;
    if (has_base_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->base_color());
    }

    // optional .llsf_msgs.CapColor cap_color = 7;
    if (has_cap_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cap_color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workpiece::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.Workpiece)
  GOOGLE_DCHECK_NE(&from, this);
  const Workpiece* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Workpiece>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.Workpiece)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.Workpiece)
    MergeFrom(*source);
  }
}

void Workpiece::MergeFrom(const Workpiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.Workpiece)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ring_colors_.MergeFrom(from.ring_colors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_at_machine();
      at_machine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.at_machine_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_color_ = from.team_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      base_color_ = from.base_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      cap_color_ = from.cap_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Workpiece::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.Workpiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workpiece::CopyFrom(const Workpiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.Workpiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workpiece::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Workpiece::Swap(Workpiece* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Workpiece::InternalSwap(Workpiece* other) {
  using std::swap;
  ring_colors_.InternalSwap(&other->ring_colors_);
  at_machine_.Swap(&other->at_machine_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(visible_, other->visible_);
  swap(team_color_, other->team_color_);
  swap(base_color_, other->base_color_);
  swap(cap_color_, other->cap_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Workpiece::GetMetadata() const {
  protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WorkpieceInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkpieceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkpieceInfo::kWorkpiecesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkpieceInfo::WorkpieceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_WorkpieceInfo_2eproto::scc_info_WorkpieceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.WorkpieceInfo)
}
WorkpieceInfo::WorkpieceInfo(const WorkpieceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      workpieces_(from.workpieces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.WorkpieceInfo)
}

void WorkpieceInfo::SharedCtor() {
}

WorkpieceInfo::~WorkpieceInfo() {
  // @@protoc_insertion_point(destructor:llsf_msgs.WorkpieceInfo)
  SharedDtor();
}

void WorkpieceInfo::SharedDtor() {
}

void WorkpieceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WorkpieceInfo::descriptor() {
  ::protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WorkpieceInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkpieceInfo& WorkpieceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_WorkpieceInfo_2eproto::scc_info_WorkpieceInfo.base);
  return *internal_default_instance();
}


void WorkpieceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.WorkpieceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workpieces_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WorkpieceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.WorkpieceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.Workpiece workpieces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_workpieces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.WorkpieceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.WorkpieceInfo)
  return false;
#undef DO_
}

void WorkpieceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.WorkpieceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.Workpiece workpieces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workpieces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->workpieces(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.WorkpieceInfo)
}

::google::protobuf::uint8* WorkpieceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.WorkpieceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.Workpiece workpieces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workpieces_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->workpieces(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.WorkpieceInfo)
  return target;
}

size_t WorkpieceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.WorkpieceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .llsf_msgs.Workpiece workpieces = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->workpieces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->workpieces(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkpieceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.WorkpieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkpieceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkpieceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.WorkpieceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.WorkpieceInfo)
    MergeFrom(*source);
  }
}

void WorkpieceInfo::MergeFrom(const WorkpieceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.WorkpieceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workpieces_.MergeFrom(from.workpieces_);
}

void WorkpieceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.WorkpieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkpieceInfo::CopyFrom(const WorkpieceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.WorkpieceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkpieceInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->workpieces())) return false;
  return true;
}

void WorkpieceInfo::Swap(WorkpieceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkpieceInfo::InternalSwap(WorkpieceInfo* other) {
  using std::swap;
  CastToBase(&workpieces_)->InternalSwap(CastToBase(&other->workpieces_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WorkpieceInfo::GetMetadata() const {
  protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WorkpieceInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorkpieceAddRing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkpieceAddRing::kIdFieldNumber;
const int WorkpieceAddRing::kRingColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkpieceAddRing::WorkpieceAddRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_WorkpieceInfo_2eproto::scc_info_WorkpieceAddRing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.WorkpieceAddRing)
}
WorkpieceAddRing::WorkpieceAddRing(const WorkpieceAddRing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ring_color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ring_color_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.WorkpieceAddRing)
}

void WorkpieceAddRing::SharedCtor() {
  id_ = 0u;
  ring_color_ = 1;
}

WorkpieceAddRing::~WorkpieceAddRing() {
  // @@protoc_insertion_point(destructor:llsf_msgs.WorkpieceAddRing)
  SharedDtor();
}

void WorkpieceAddRing::SharedDtor() {
}

void WorkpieceAddRing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WorkpieceAddRing::descriptor() {
  ::protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WorkpieceInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkpieceAddRing& WorkpieceAddRing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_WorkpieceInfo_2eproto::scc_info_WorkpieceAddRing.base);
  return *internal_default_instance();
}


void WorkpieceAddRing::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.WorkpieceAddRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    id_ = 0u;
    ring_color_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WorkpieceAddRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.WorkpieceAddRing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .llsf_msgs.RingColor ring_color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::RingColor_IsValid(value)) {
            set_ring_color(static_cast< ::llsf_msgs::RingColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.WorkpieceAddRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.WorkpieceAddRing)
  return false;
#undef DO_
}

void WorkpieceAddRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.WorkpieceAddRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .llsf_msgs.RingColor ring_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ring_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.WorkpieceAddRing)
}

::google::protobuf::uint8* WorkpieceAddRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.WorkpieceAddRing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .llsf_msgs.RingColor ring_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ring_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.WorkpieceAddRing)
  return target;
}

size_t WorkpieceAddRing::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.WorkpieceAddRing)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_ring_color()) {
    // required .llsf_msgs.RingColor ring_color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ring_color());
  }

  return total_size;
}
size_t WorkpieceAddRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.WorkpieceAddRing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .llsf_msgs.RingColor ring_color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ring_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkpieceAddRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.WorkpieceAddRing)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkpieceAddRing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkpieceAddRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.WorkpieceAddRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.WorkpieceAddRing)
    MergeFrom(*source);
  }
}

void WorkpieceAddRing::MergeFrom(const WorkpieceAddRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.WorkpieceAddRing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ring_color_ = from.ring_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkpieceAddRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.WorkpieceAddRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkpieceAddRing::CopyFrom(const WorkpieceAddRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.WorkpieceAddRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkpieceAddRing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WorkpieceAddRing::Swap(WorkpieceAddRing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkpieceAddRing::InternalSwap(WorkpieceAddRing* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(ring_color_, other->ring_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WorkpieceAddRing::GetMetadata() const {
  protobuf_WorkpieceInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_WorkpieceInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::Workpiece* Arena::CreateMaybeMessage< ::llsf_msgs::Workpiece >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::Workpiece >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::WorkpieceInfo* Arena::CreateMaybeMessage< ::llsf_msgs::WorkpieceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::WorkpieceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::WorkpieceAddRing* Arena::CreateMaybeMessage< ::llsf_msgs::WorkpieceAddRing >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::WorkpieceAddRing >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
