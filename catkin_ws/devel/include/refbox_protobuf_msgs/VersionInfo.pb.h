// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VersionInfo.proto

#ifndef PROTOBUF_INCLUDED_VersionInfo_2eproto
#define PROTOBUF_INCLUDED_VersionInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_VersionInfo_2eproto 

namespace protobuf_VersionInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_VersionInfo_2eproto
namespace llsf_msgs {
class VersionInfo;
class VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::VersionInfo* Arena::CreateMaybeMessage<::llsf_msgs::VersionInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum VersionInfo_CompType {
  VersionInfo_CompType_COMP_ID = 2000,
  VersionInfo_CompType_MSG_TYPE = 3
};
bool VersionInfo_CompType_IsValid(int value);
const VersionInfo_CompType VersionInfo_CompType_CompType_MIN = VersionInfo_CompType_MSG_TYPE;
const VersionInfo_CompType VersionInfo_CompType_CompType_MAX = VersionInfo_CompType_COMP_ID;
const int VersionInfo_CompType_CompType_ARRAYSIZE = VersionInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VersionInfo_CompType_descriptor();
inline const ::std::string& VersionInfo_CompType_Name(VersionInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VersionInfo_CompType_descriptor(), value);
}
inline bool VersionInfo_CompType_Parse(
    const ::std::string& name, VersionInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VersionInfo_CompType>(
    VersionInfo_CompType_descriptor(), name, value);
}
// ===================================================================

class VersionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.VersionInfo) */ {
 public:
  VersionInfo();
  virtual ~VersionInfo();

  VersionInfo(const VersionInfo& from);

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VersionInfo* other);
  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionInfo* New() const final {
    return CreateMaybeMessage<VersionInfo>(NULL);
  }

  VersionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VersionInfo_CompType CompType;
  static const CompType COMP_ID =
    VersionInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    VersionInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return VersionInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    VersionInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    VersionInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    VersionInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return VersionInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return VersionInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return VersionInfo_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string version_string = 4;
  bool has_version_string() const;
  void clear_version_string();
  static const int kVersionStringFieldNumber = 4;
  const ::std::string& version_string() const;
  void set_version_string(const ::std::string& value);
  #if LANG_CXX11
  void set_version_string(::std::string&& value);
  #endif
  void set_version_string(const char* value);
  void set_version_string(const char* value, size_t size);
  ::std::string* mutable_version_string();
  ::std::string* release_version_string();
  void set_allocated_version_string(::std::string* version_string);

  // required uint32 version_major = 1;
  bool has_version_major() const;
  void clear_version_major();
  static const int kVersionMajorFieldNumber = 1;
  ::google::protobuf::uint32 version_major() const;
  void set_version_major(::google::protobuf::uint32 value);

  // required uint32 version_minor = 2;
  bool has_version_minor() const;
  void clear_version_minor();
  static const int kVersionMinorFieldNumber = 2;
  ::google::protobuf::uint32 version_minor() const;
  void set_version_minor(::google::protobuf::uint32 value);

  // required uint32 version_micro = 3;
  bool has_version_micro() const;
  void clear_version_micro();
  static const int kVersionMicroFieldNumber = 3;
  ::google::protobuf::uint32 version_micro() const;
  void set_version_micro(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.VersionInfo)
 private:
  void set_has_version_major();
  void clear_has_version_major();
  void set_has_version_minor();
  void clear_has_version_minor();
  void set_has_version_micro();
  void clear_has_version_micro();
  void set_has_version_string();
  void clear_has_version_string();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_string_;
  ::google::protobuf::uint32 version_major_;
  ::google::protobuf::uint32 version_minor_;
  ::google::protobuf::uint32 version_micro_;
  friend struct ::protobuf_VersionInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionInfo

// required uint32 version_major = 1;
inline bool VersionInfo::has_version_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionInfo::set_has_version_major() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionInfo::clear_has_version_major() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionInfo::clear_version_major() {
  version_major_ = 0u;
  clear_has_version_major();
}
inline ::google::protobuf::uint32 VersionInfo::version_major() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.VersionInfo.version_major)
  return version_major_;
}
inline void VersionInfo::set_version_major(::google::protobuf::uint32 value) {
  set_has_version_major();
  version_major_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.VersionInfo.version_major)
}

// required uint32 version_minor = 2;
inline bool VersionInfo::has_version_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionInfo::set_has_version_minor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionInfo::clear_has_version_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionInfo::clear_version_minor() {
  version_minor_ = 0u;
  clear_has_version_minor();
}
inline ::google::protobuf::uint32 VersionInfo::version_minor() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.VersionInfo.version_minor)
  return version_minor_;
}
inline void VersionInfo::set_version_minor(::google::protobuf::uint32 value) {
  set_has_version_minor();
  version_minor_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.VersionInfo.version_minor)
}

// required uint32 version_micro = 3;
inline bool VersionInfo::has_version_micro() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VersionInfo::set_has_version_micro() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VersionInfo::clear_has_version_micro() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VersionInfo::clear_version_micro() {
  version_micro_ = 0u;
  clear_has_version_micro();
}
inline ::google::protobuf::uint32 VersionInfo::version_micro() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.VersionInfo.version_micro)
  return version_micro_;
}
inline void VersionInfo::set_version_micro(::google::protobuf::uint32 value) {
  set_has_version_micro();
  version_micro_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.VersionInfo.version_micro)
}

// required string version_string = 4;
inline bool VersionInfo::has_version_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfo::set_has_version_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionInfo::clear_has_version_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionInfo::clear_version_string() {
  version_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version_string();
}
inline const ::std::string& VersionInfo::version_string() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.VersionInfo.version_string)
  return version_string_.GetNoArena();
}
inline void VersionInfo::set_version_string(const ::std::string& value) {
  set_has_version_string();
  version_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.VersionInfo.version_string)
}
#if LANG_CXX11
inline void VersionInfo::set_version_string(::std::string&& value) {
  set_has_version_string();
  version_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.VersionInfo.version_string)
}
#endif
inline void VersionInfo::set_version_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version_string();
  version_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.VersionInfo.version_string)
}
inline void VersionInfo::set_version_string(const char* value, size_t size) {
  set_has_version_string();
  version_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.VersionInfo.version_string)
}
inline ::std::string* VersionInfo::mutable_version_string() {
  set_has_version_string();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.VersionInfo.version_string)
  return version_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_version_string() {
  // @@protoc_insertion_point(field_release:llsf_msgs.VersionInfo.version_string)
  if (!has_version_string()) {
    return NULL;
  }
  clear_has_version_string();
  return version_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_version_string(::std::string* version_string) {
  if (version_string != NULL) {
    set_has_version_string();
  } else {
    clear_has_version_string();
  }
  version_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_string);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.VersionInfo.version_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::VersionInfo_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::VersionInfo_CompType>() {
  return ::llsf_msgs::VersionInfo_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_VersionInfo_2eproto
