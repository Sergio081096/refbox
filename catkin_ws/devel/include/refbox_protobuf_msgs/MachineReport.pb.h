// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineReport.proto

#ifndef PROTOBUF_INCLUDED_MachineReport_2eproto
#define PROTOBUF_INCLUDED_MachineReport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Team.pb.h"
#include "Zone.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MachineReport_2eproto 

namespace protobuf_MachineReport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MachineReport_2eproto
namespace llsf_msgs {
class MachineReport;
class MachineReportDefaultTypeInternal;
extern MachineReportDefaultTypeInternal _MachineReport_default_instance_;
class MachineReportEntry;
class MachineReportEntryDefaultTypeInternal;
extern MachineReportEntryDefaultTypeInternal _MachineReportEntry_default_instance_;
class MachineReportInfo;
class MachineReportInfoDefaultTypeInternal;
extern MachineReportInfoDefaultTypeInternal _MachineReportInfo_default_instance_;
class MachineTypeFeedback;
class MachineTypeFeedbackDefaultTypeInternal;
extern MachineTypeFeedbackDefaultTypeInternal _MachineTypeFeedback_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::MachineReport* Arena::CreateMaybeMessage<::llsf_msgs::MachineReport>(Arena*);
template<> ::llsf_msgs::MachineReportEntry* Arena::CreateMaybeMessage<::llsf_msgs::MachineReportEntry>(Arena*);
template<> ::llsf_msgs::MachineReportInfo* Arena::CreateMaybeMessage<::llsf_msgs::MachineReportInfo>(Arena*);
template<> ::llsf_msgs::MachineTypeFeedback* Arena::CreateMaybeMessage<::llsf_msgs::MachineTypeFeedback>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum MachineReportEntry_CompType {
  MachineReportEntry_CompType_COMP_ID = 2000,
  MachineReportEntry_CompType_MSG_TYPE = 60
};
bool MachineReportEntry_CompType_IsValid(int value);
const MachineReportEntry_CompType MachineReportEntry_CompType_CompType_MIN = MachineReportEntry_CompType_MSG_TYPE;
const MachineReportEntry_CompType MachineReportEntry_CompType_CompType_MAX = MachineReportEntry_CompType_COMP_ID;
const int MachineReportEntry_CompType_CompType_ARRAYSIZE = MachineReportEntry_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineReportEntry_CompType_descriptor();
inline const ::std::string& MachineReportEntry_CompType_Name(MachineReportEntry_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineReportEntry_CompType_descriptor(), value);
}
inline bool MachineReportEntry_CompType_Parse(
    const ::std::string& name, MachineReportEntry_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineReportEntry_CompType>(
    MachineReportEntry_CompType_descriptor(), name, value);
}
enum MachineReport_CompType {
  MachineReport_CompType_COMP_ID = 2000,
  MachineReport_CompType_MSG_TYPE = 61
};
bool MachineReport_CompType_IsValid(int value);
const MachineReport_CompType MachineReport_CompType_CompType_MIN = MachineReport_CompType_MSG_TYPE;
const MachineReport_CompType MachineReport_CompType_CompType_MAX = MachineReport_CompType_COMP_ID;
const int MachineReport_CompType_CompType_ARRAYSIZE = MachineReport_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineReport_CompType_descriptor();
inline const ::std::string& MachineReport_CompType_Name(MachineReport_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineReport_CompType_descriptor(), value);
}
inline bool MachineReport_CompType_Parse(
    const ::std::string& name, MachineReport_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineReport_CompType>(
    MachineReport_CompType_descriptor(), name, value);
}
enum MachineReportInfo_CompType {
  MachineReportInfo_CompType_COMP_ID = 2000,
  MachineReportInfo_CompType_MSG_TYPE = 62
};
bool MachineReportInfo_CompType_IsValid(int value);
const MachineReportInfo_CompType MachineReportInfo_CompType_CompType_MIN = MachineReportInfo_CompType_MSG_TYPE;
const MachineReportInfo_CompType MachineReportInfo_CompType_CompType_MAX = MachineReportInfo_CompType_COMP_ID;
const int MachineReportInfo_CompType_CompType_ARRAYSIZE = MachineReportInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineReportInfo_CompType_descriptor();
inline const ::std::string& MachineReportInfo_CompType_Name(MachineReportInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineReportInfo_CompType_descriptor(), value);
}
inline bool MachineReportInfo_CompType_Parse(
    const ::std::string& name, MachineReportInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineReportInfo_CompType>(
    MachineReportInfo_CompType_descriptor(), name, value);
}
enum MachineTypeFeedback_CompType {
  MachineTypeFeedback_CompType_COMP_ID = 2000,
  MachineTypeFeedback_CompType_MSG_TYPE = 63
};
bool MachineTypeFeedback_CompType_IsValid(int value);
const MachineTypeFeedback_CompType MachineTypeFeedback_CompType_CompType_MIN = MachineTypeFeedback_CompType_MSG_TYPE;
const MachineTypeFeedback_CompType MachineTypeFeedback_CompType_CompType_MAX = MachineTypeFeedback_CompType_COMP_ID;
const int MachineTypeFeedback_CompType_CompType_ARRAYSIZE = MachineTypeFeedback_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineTypeFeedback_CompType_descriptor();
inline const ::std::string& MachineTypeFeedback_CompType_Name(MachineTypeFeedback_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineTypeFeedback_CompType_descriptor(), value);
}
inline bool MachineTypeFeedback_CompType_Parse(
    const ::std::string& name, MachineTypeFeedback_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineTypeFeedback_CompType>(
    MachineTypeFeedback_CompType_descriptor(), name, value);
}
// ===================================================================

class MachineReportEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.MachineReportEntry) */ {
 public:
  MachineReportEntry();
  virtual ~MachineReportEntry();

  MachineReportEntry(const MachineReportEntry& from);

  inline MachineReportEntry& operator=(const MachineReportEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineReportEntry(MachineReportEntry&& from) noexcept
    : MachineReportEntry() {
    *this = ::std::move(from);
  }

  inline MachineReportEntry& operator=(MachineReportEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineReportEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineReportEntry* internal_default_instance() {
    return reinterpret_cast<const MachineReportEntry*>(
               &_MachineReportEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MachineReportEntry* other);
  friend void swap(MachineReportEntry& a, MachineReportEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineReportEntry* New() const final {
    return CreateMaybeMessage<MachineReportEntry>(NULL);
  }

  MachineReportEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineReportEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineReportEntry& from);
  void MergeFrom(const MachineReportEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineReportEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MachineReportEntry_CompType CompType;
  static const CompType COMP_ID =
    MachineReportEntry_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    MachineReportEntry_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineReportEntry_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineReportEntry_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineReportEntry_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineReportEntry_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineReportEntry_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineReportEntry_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineReportEntry_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional uint32 rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  ::google::protobuf::uint32 rotation() const;
  void set_rotation(::google::protobuf::uint32 value);

  // optional .llsf_msgs.Zone zone = 3;
  bool has_zone() const;
  void clear_zone();
  static const int kZoneFieldNumber = 3;
  ::llsf_msgs::Zone zone() const;
  void set_zone(::llsf_msgs::Zone value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineReportEntry)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_zone();
  void clear_has_zone();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 rotation_;
  int zone_;
  friend struct ::protobuf_MachineReport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MachineReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.MachineReport) */ {
 public:
  MachineReport();
  virtual ~MachineReport();

  MachineReport(const MachineReport& from);

  inline MachineReport& operator=(const MachineReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineReport(MachineReport&& from) noexcept
    : MachineReport() {
    *this = ::std::move(from);
  }

  inline MachineReport& operator=(MachineReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineReport* internal_default_instance() {
    return reinterpret_cast<const MachineReport*>(
               &_MachineReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MachineReport* other);
  friend void swap(MachineReport& a, MachineReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineReport* New() const final {
    return CreateMaybeMessage<MachineReport>(NULL);
  }

  MachineReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineReport& from);
  void MergeFrom(const MachineReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MachineReport_CompType CompType;
  static const CompType COMP_ID =
    MachineReport_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    MachineReport_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineReport_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineReport_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineReport_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineReport_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineReport_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineReport_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineReport_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  int machines_size() const;
  void clear_machines();
  static const int kMachinesFieldNumber = 1;
  ::llsf_msgs::MachineReportEntry* mutable_machines(int index);
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineReportEntry >*
      mutable_machines();
  const ::llsf_msgs::MachineReportEntry& machines(int index) const;
  ::llsf_msgs::MachineReportEntry* add_machines();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineReportEntry >&
      machines() const;

  // required .llsf_msgs.Team team_color = 2;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineReport)
 private:
  void set_has_team_color();
  void clear_has_team_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineReportEntry > machines_;
  int team_color_;
  friend struct ::protobuf_MachineReport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MachineReportInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.MachineReportInfo) */ {
 public:
  MachineReportInfo();
  virtual ~MachineReportInfo();

  MachineReportInfo(const MachineReportInfo& from);

  inline MachineReportInfo& operator=(const MachineReportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineReportInfo(MachineReportInfo&& from) noexcept
    : MachineReportInfo() {
    *this = ::std::move(from);
  }

  inline MachineReportInfo& operator=(MachineReportInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineReportInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineReportInfo* internal_default_instance() {
    return reinterpret_cast<const MachineReportInfo*>(
               &_MachineReportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MachineReportInfo* other);
  friend void swap(MachineReportInfo& a, MachineReportInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineReportInfo* New() const final {
    return CreateMaybeMessage<MachineReportInfo>(NULL);
  }

  MachineReportInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineReportInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineReportInfo& from);
  void MergeFrom(const MachineReportInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineReportInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MachineReportInfo_CompType CompType;
  static const CompType COMP_ID =
    MachineReportInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    MachineReportInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineReportInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineReportInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineReportInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineReportInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineReportInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineReportInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineReportInfo_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string reported_machines = 1;
  int reported_machines_size() const;
  void clear_reported_machines();
  static const int kReportedMachinesFieldNumber = 1;
  const ::std::string& reported_machines(int index) const;
  ::std::string* mutable_reported_machines(int index);
  void set_reported_machines(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reported_machines(int index, ::std::string&& value);
  #endif
  void set_reported_machines(int index, const char* value);
  void set_reported_machines(int index, const char* value, size_t size);
  ::std::string* add_reported_machines();
  void add_reported_machines(const ::std::string& value);
  #if LANG_CXX11
  void add_reported_machines(::std::string&& value);
  #endif
  void add_reported_machines(const char* value);
  void add_reported_machines(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reported_machines() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reported_machines();

  // repeated .llsf_msgs.MachineTypeFeedback reported_types = 3;
  int reported_types_size() const;
  void clear_reported_types();
  static const int kReportedTypesFieldNumber = 3;
  ::llsf_msgs::MachineTypeFeedback* mutable_reported_types(int index);
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeFeedback >*
      mutable_reported_types();
  const ::llsf_msgs::MachineTypeFeedback& reported_types(int index) const;
  ::llsf_msgs::MachineTypeFeedback* add_reported_types();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeFeedback >&
      reported_types() const;

  // required .llsf_msgs.Team team_color = 2;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineReportInfo)
 private:
  void set_has_team_color();
  void clear_has_team_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reported_machines_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeFeedback > reported_types_;
  int team_color_;
  friend struct ::protobuf_MachineReport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MachineTypeFeedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.MachineTypeFeedback) */ {
 public:
  MachineTypeFeedback();
  virtual ~MachineTypeFeedback();

  MachineTypeFeedback(const MachineTypeFeedback& from);

  inline MachineTypeFeedback& operator=(const MachineTypeFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineTypeFeedback(MachineTypeFeedback&& from) noexcept
    : MachineTypeFeedback() {
    *this = ::std::move(from);
  }

  inline MachineTypeFeedback& operator=(MachineTypeFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineTypeFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineTypeFeedback* internal_default_instance() {
    return reinterpret_cast<const MachineTypeFeedback*>(
               &_MachineTypeFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MachineTypeFeedback* other);
  friend void swap(MachineTypeFeedback& a, MachineTypeFeedback& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineTypeFeedback* New() const final {
    return CreateMaybeMessage<MachineTypeFeedback>(NULL);
  }

  MachineTypeFeedback* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineTypeFeedback>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineTypeFeedback& from);
  void MergeFrom(const MachineTypeFeedback& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineTypeFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MachineTypeFeedback_CompType CompType;
  static const CompType COMP_ID =
    MachineTypeFeedback_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    MachineTypeFeedback_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineTypeFeedback_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineTypeFeedback_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineTypeFeedback_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineTypeFeedback_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineTypeFeedback_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineTypeFeedback_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineTypeFeedback_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .llsf_msgs.Team team_color = 4;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 4;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // required .llsf_msgs.Zone zone = 2;
  bool has_zone() const;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  ::llsf_msgs::Zone zone() const;
  void set_zone(::llsf_msgs::Zone value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineTypeFeedback)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_zone();
  void clear_has_zone();
  void set_has_name();
  void clear_has_name();
  void set_has_team_color();
  void clear_has_team_color();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int team_color_;
  int zone_;
  friend struct ::protobuf_MachineReport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MachineReportEntry

// optional string name = 1;
inline bool MachineReportEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineReportEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineReportEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineReportEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MachineReportEntry::name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportEntry.name)
  return name_.GetNoArena();
}
inline void MachineReportEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportEntry.name)
}
#if LANG_CXX11
inline void MachineReportEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.MachineReportEntry.name)
}
#endif
inline void MachineReportEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.MachineReportEntry.name)
}
inline void MachineReportEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.MachineReportEntry.name)
}
inline ::std::string* MachineReportEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineReportEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineReportEntry::release_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.MachineReportEntry.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineReportEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.MachineReportEntry.name)
}

// optional string type = 2;
inline bool MachineReportEntry::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineReportEntry::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineReportEntry::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineReportEntry::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MachineReportEntry::type() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportEntry.type)
  return type_.GetNoArena();
}
inline void MachineReportEntry::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportEntry.type)
}
#if LANG_CXX11
inline void MachineReportEntry::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.MachineReportEntry.type)
}
#endif
inline void MachineReportEntry::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.MachineReportEntry.type)
}
inline void MachineReportEntry::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.MachineReportEntry.type)
}
inline ::std::string* MachineReportEntry::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineReportEntry.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineReportEntry::release_type() {
  // @@protoc_insertion_point(field_release:llsf_msgs.MachineReportEntry.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineReportEntry::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.MachineReportEntry.type)
}

// optional .llsf_msgs.Zone zone = 3;
inline bool MachineReportEntry::has_zone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MachineReportEntry::set_has_zone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MachineReportEntry::clear_has_zone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MachineReportEntry::clear_zone() {
  zone_ = 18;
  clear_has_zone();
}
inline ::llsf_msgs::Zone MachineReportEntry::zone() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportEntry.zone)
  return static_cast< ::llsf_msgs::Zone >(zone_);
}
inline void MachineReportEntry::set_zone(::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  set_has_zone();
  zone_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportEntry.zone)
}

// optional uint32 rotation = 4;
inline bool MachineReportEntry::has_rotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineReportEntry::set_has_rotation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineReportEntry::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineReportEntry::clear_rotation() {
  rotation_ = 0u;
  clear_has_rotation();
}
inline ::google::protobuf::uint32 MachineReportEntry::rotation() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportEntry.rotation)
  return rotation_;
}
inline void MachineReportEntry::set_rotation(::google::protobuf::uint32 value) {
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportEntry.rotation)
}

// -------------------------------------------------------------------

// MachineReport

// required .llsf_msgs.Team team_color = 2;
inline bool MachineReport::has_team_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineReport::set_has_team_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineReport::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineReport::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team MachineReport::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReport.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void MachineReport::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReport.team_color)
}

// repeated .llsf_msgs.MachineReportEntry machines = 1;
inline int MachineReport::machines_size() const {
  return machines_.size();
}
inline void MachineReport::clear_machines() {
  machines_.Clear();
}
inline ::llsf_msgs::MachineReportEntry* MachineReport::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineReport.machines)
  return machines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineReportEntry >*
MachineReport::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.MachineReport.machines)
  return &machines_;
}
inline const ::llsf_msgs::MachineReportEntry& MachineReport::machines(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReport.machines)
  return machines_.Get(index);
}
inline ::llsf_msgs::MachineReportEntry* MachineReport::add_machines() {
  // @@protoc_insertion_point(field_add:llsf_msgs.MachineReport.machines)
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineReportEntry >&
MachineReport::machines() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.MachineReport.machines)
  return machines_;
}

// -------------------------------------------------------------------

// MachineReportInfo

// repeated string reported_machines = 1;
inline int MachineReportInfo::reported_machines_size() const {
  return reported_machines_.size();
}
inline void MachineReportInfo::clear_reported_machines() {
  reported_machines_.Clear();
}
inline const ::std::string& MachineReportInfo::reported_machines(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportInfo.reported_machines)
  return reported_machines_.Get(index);
}
inline ::std::string* MachineReportInfo::mutable_reported_machines(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineReportInfo.reported_machines)
  return reported_machines_.Mutable(index);
}
inline void MachineReportInfo::set_reported_machines(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportInfo.reported_machines)
  reported_machines_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MachineReportInfo::set_reported_machines(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportInfo.reported_machines)
  reported_machines_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MachineReportInfo::set_reported_machines(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reported_machines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:llsf_msgs.MachineReportInfo.reported_machines)
}
inline void MachineReportInfo::set_reported_machines(int index, const char* value, size_t size) {
  reported_machines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.MachineReportInfo.reported_machines)
}
inline ::std::string* MachineReportInfo::add_reported_machines() {
  // @@protoc_insertion_point(field_add_mutable:llsf_msgs.MachineReportInfo.reported_machines)
  return reported_machines_.Add();
}
inline void MachineReportInfo::add_reported_machines(const ::std::string& value) {
  reported_machines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:llsf_msgs.MachineReportInfo.reported_machines)
}
#if LANG_CXX11
inline void MachineReportInfo::add_reported_machines(::std::string&& value) {
  reported_machines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:llsf_msgs.MachineReportInfo.reported_machines)
}
#endif
inline void MachineReportInfo::add_reported_machines(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reported_machines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:llsf_msgs.MachineReportInfo.reported_machines)
}
inline void MachineReportInfo::add_reported_machines(const char* value, size_t size) {
  reported_machines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:llsf_msgs.MachineReportInfo.reported_machines)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MachineReportInfo::reported_machines() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.MachineReportInfo.reported_machines)
  return reported_machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MachineReportInfo::mutable_reported_machines() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.MachineReportInfo.reported_machines)
  return &reported_machines_;
}

// required .llsf_msgs.Team team_color = 2;
inline bool MachineReportInfo::has_team_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineReportInfo::set_has_team_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineReportInfo::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineReportInfo::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team MachineReportInfo::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportInfo.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void MachineReportInfo::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineReportInfo.team_color)
}

// repeated .llsf_msgs.MachineTypeFeedback reported_types = 3;
inline int MachineReportInfo::reported_types_size() const {
  return reported_types_.size();
}
inline void MachineReportInfo::clear_reported_types() {
  reported_types_.Clear();
}
inline ::llsf_msgs::MachineTypeFeedback* MachineReportInfo::mutable_reported_types(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineReportInfo.reported_types)
  return reported_types_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeFeedback >*
MachineReportInfo::mutable_reported_types() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.MachineReportInfo.reported_types)
  return &reported_types_;
}
inline const ::llsf_msgs::MachineTypeFeedback& MachineReportInfo::reported_types(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineReportInfo.reported_types)
  return reported_types_.Get(index);
}
inline ::llsf_msgs::MachineTypeFeedback* MachineReportInfo::add_reported_types() {
  // @@protoc_insertion_point(field_add:llsf_msgs.MachineReportInfo.reported_types)
  return reported_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeFeedback >&
MachineReportInfo::reported_types() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.MachineReportInfo.reported_types)
  return reported_types_;
}

// -------------------------------------------------------------------

// MachineTypeFeedback

// required string type = 1;
inline bool MachineTypeFeedback::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineTypeFeedback::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineTypeFeedback::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineTypeFeedback::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MachineTypeFeedback::type() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineTypeFeedback.type)
  return type_.GetNoArena();
}
inline void MachineTypeFeedback::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineTypeFeedback.type)
}
#if LANG_CXX11
inline void MachineTypeFeedback::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.MachineTypeFeedback.type)
}
#endif
inline void MachineTypeFeedback::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.MachineTypeFeedback.type)
}
inline void MachineTypeFeedback::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.MachineTypeFeedback.type)
}
inline ::std::string* MachineTypeFeedback::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineTypeFeedback.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineTypeFeedback::release_type() {
  // @@protoc_insertion_point(field_release:llsf_msgs.MachineTypeFeedback.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineTypeFeedback::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.MachineTypeFeedback.type)
}

// required .llsf_msgs.Zone zone = 2;
inline bool MachineTypeFeedback::has_zone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MachineTypeFeedback::set_has_zone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MachineTypeFeedback::clear_has_zone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MachineTypeFeedback::clear_zone() {
  zone_ = 18;
  clear_has_zone();
}
inline ::llsf_msgs::Zone MachineTypeFeedback::zone() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineTypeFeedback.zone)
  return static_cast< ::llsf_msgs::Zone >(zone_);
}
inline void MachineTypeFeedback::set_zone(::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  set_has_zone();
  zone_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineTypeFeedback.zone)
}

// optional string name = 3;
inline bool MachineTypeFeedback::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineTypeFeedback::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineTypeFeedback::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineTypeFeedback::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MachineTypeFeedback::name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineTypeFeedback.name)
  return name_.GetNoArena();
}
inline void MachineTypeFeedback::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineTypeFeedback.name)
}
#if LANG_CXX11
inline void MachineTypeFeedback::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.MachineTypeFeedback.name)
}
#endif
inline void MachineTypeFeedback::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.MachineTypeFeedback.name)
}
inline void MachineTypeFeedback::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.MachineTypeFeedback.name)
}
inline ::std::string* MachineTypeFeedback::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineTypeFeedback.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineTypeFeedback::release_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.MachineTypeFeedback.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineTypeFeedback::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.MachineTypeFeedback.name)
}

// optional .llsf_msgs.Team team_color = 4;
inline bool MachineTypeFeedback::has_team_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineTypeFeedback::set_has_team_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineTypeFeedback::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineTypeFeedback::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team MachineTypeFeedback::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineTypeFeedback.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void MachineTypeFeedback::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineTypeFeedback.team_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::MachineReportEntry_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineReportEntry_CompType>() {
  return ::llsf_msgs::MachineReportEntry_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::MachineReport_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineReport_CompType>() {
  return ::llsf_msgs::MachineReport_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::MachineReportInfo_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineReportInfo_CompType>() {
  return ::llsf_msgs::MachineReportInfo_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::MachineTypeFeedback_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineTypeFeedback_CompType>() {
  return ::llsf_msgs::MachineTypeFeedback_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MachineReport_2eproto
