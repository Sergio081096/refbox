// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineInfo.proto

#include "MachineInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_MachineInfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LightSpec;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShelfSlotInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInfo_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_Machine;
}  // namespace protobuf_MachineInfo_2eproto
namespace protobuf_MachineInstructions_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInstructions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrepareInstructionBS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInstructions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrepareInstructionCS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInstructions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrepareInstructionDS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInstructions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrepareInstructionRS;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInstructions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrepareInstructionSS;
}  // namespace protobuf_MachineInstructions_2eproto
namespace protobuf_Pose2D_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pose2D_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pose2D;
}  // namespace protobuf_Pose2D_2eproto
namespace llsf_msgs {
class LightSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LightSpec>
      _instance;
} _LightSpec_default_instance_;
class ShelfSlotInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShelfSlotInfo>
      _instance;
} _ShelfSlotInfo_default_instance_;
class MachineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Machine>
      _instance;
} _Machine_default_instance_;
class MachineInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MachineInfo>
      _instance;
} _MachineInfo_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_MachineInfo_2eproto {
static void InitDefaultsLightSpec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_LightSpec_default_instance_;
    new (ptr) ::llsf_msgs::LightSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::LightSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LightSpec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLightSpec}, {}};

static void InitDefaultsShelfSlotInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_ShelfSlotInfo_default_instance_;
    new (ptr) ::llsf_msgs::ShelfSlotInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::ShelfSlotInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShelfSlotInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShelfSlotInfo}, {}};

static void InitDefaultsMachine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_Machine_default_instance_;
    new (ptr) ::llsf_msgs::Machine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::Machine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_Machine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsMachine}, {
      &protobuf_MachineInfo_2eproto::scc_info_LightSpec.base,
      &protobuf_Pose2D_2eproto::scc_info_Pose2D.base,
      &protobuf_MachineInstructions_2eproto::scc_info_PrepareInstructionBS.base,
      &protobuf_MachineInstructions_2eproto::scc_info_PrepareInstructionDS.base,
      &protobuf_MachineInstructions_2eproto::scc_info_PrepareInstructionSS.base,
      &protobuf_MachineInstructions_2eproto::scc_info_PrepareInstructionRS.base,
      &protobuf_MachineInstructions_2eproto::scc_info_PrepareInstructionCS.base,
      &protobuf_MachineInfo_2eproto::scc_info_ShelfSlotInfo.base,}};

static void InitDefaultsMachineInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_MachineInfo_default_instance_;
    new (ptr) ::llsf_msgs::MachineInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::MachineInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MachineInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMachineInfo}, {
      &protobuf_MachineInfo_2eproto::scc_info_Machine.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LightSpec.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShelfSlotInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Machine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MachineInfo.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::LightSpec, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::LightSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::LightSpec, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::LightSpec, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::ShelfSlotInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::ShelfSlotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::ShelfSlotInfo, shelf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::ShelfSlotInfo, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::ShelfSlotInfo, is_filled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::ShelfSlotInfo, description_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, team_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, correctly_reported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, loaded_with_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, ring_colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, instruction_bs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, instruction_ds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, instruction_ss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, instruction_rs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, instruction_cs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, exploration_rotation_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, exploration_zone_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Machine, status_ss_),
  0,
  1,
  2,
  10,
  ~0u,
  3,
  15,
  11,
  9,
  12,
  ~0u,
  4,
  5,
  8,
  6,
  7,
  13,
  14,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineInfo, machines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineInfo, team_color_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::llsf_msgs::LightSpec)},
  { 9, 18, sizeof(::llsf_msgs::ShelfSlotInfo)},
  { 22, 46, sizeof(::llsf_msgs::Machine)},
  { 65, 72, sizeof(::llsf_msgs::MachineInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_LightSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_ShelfSlotInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_Machine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_MachineInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MachineInfo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021MachineInfo.proto\022\tllsf_msgs\032\014Pose2D.p"
      "roto\032\022ProductColor.proto\032\nTeam.proto\032\nZo"
      "ne.proto\032\031MachineInstructions.proto\032\030Mac"
      "hineDescription.proto\"\177\n\tLightSpec\022$\n\005co"
      "lor\030\001 \002(\0162\025.llsf_msgs.LightColor\022$\n\005stat"
      "e\030\002 \002(\0162\025.llsf_msgs.LightState\"&\n\010CompTy"
      "pe\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\n\"|\n\rShelfS"
      "lotInfo\022\r\n\005shelf\030\001 \002(\r\022\014\n\004slot\030\002 \002(\r\022\021\n\t"
      "is_filled\030\003 \002(\010\022\023\n\013description\030\005 \001(\t\"&\n\010"
      "CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020y\"\240\006\n"
      "\007Machine\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \001(\t\022\r\n\005"
      "state\030\003 \001(\t\022#\n\nteam_color\030\n \001(\0162\017.llsf_m"
      "sgs.Team\022$\n\006lights\030\007 \003(\0132\024.llsf_msgs.Lig"
      "htSpec\022\037\n\004pose\030\010 \001(\0132\021.llsf_msgs.Pose2D\022"
      "\035\n\004zone\030\013 \001(\0162\017.llsf_msgs.Zone\022\020\n\010rotati"
      "on\030\014 \001(\r\022\032\n\022correctly_reported\030\t \001(\010\022\026\n\013"
      "loaded_with\030\r \001(\r:\0010\022)\n\013ring_colors\030\016 \003("
      "\0162\024.llsf_msgs.RingColor\0227\n\016instruction_b"
      "s\030\020 \001(\0132\037.llsf_msgs.PrepareInstructionBS"
      "\0227\n\016instruction_ds\030\021 \001(\0132\037.llsf_msgs.Pre"
      "pareInstructionDS\0227\n\016instruction_ss\030\024 \001("
      "\0132\037.llsf_msgs.PrepareInstructionSS\0227\n\016in"
      "struction_rs\030\022 \001(\0132\037.llsf_msgs.PrepareIn"
      "structionRS\0227\n\016instruction_cs\030\023 \001(\0132\037.ll"
      "sf_msgs.PrepareInstructionCS\022\?\n\032explorat"
      "ion_rotation_state\030\025 \001(\0162\033.llsf_msgs.Exp"
      "lorationState\022;\n\026exploration_zone_state\030"
      "\026 \001(\0162\033.llsf_msgs.ExplorationState\022+\n\tst"
      "atus_ss\030\031 \003(\0132\030.llsf_msgs.ShelfSlotInfo\""
      "&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\014\""
      "\200\001\n\013MachineInfo\022$\n\010machines\030\001 \003(\0132\022.llsf"
      "_msgs.Machine\022#\n\nteam_color\030\002 \001(\0162\017.llsf"
      "_msgs.Team\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010"
      "MSG_TYPE\020\r*G\n\020ExplorationState\022\r\n\tNO_REP"
      "ORT\020\000\022\022\n\016CORRECT_REPORT\020\001\022\020\n\014WRONG_REPOR"
      "T\020\002B4\n\037org.robocup_logistics.llsf_msgsB\021"
      "MachineInfoProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MachineInfo.proto", &protobuf_RegisterTypes);
  ::protobuf_Pose2D_2eproto::AddDescriptors();
  ::protobuf_ProductColor_2eproto::AddDescriptors();
  ::protobuf_Team_2eproto::AddDescriptors();
  ::protobuf_Zone_2eproto::AddDescriptors();
  ::protobuf_MachineInstructions_2eproto::AddDescriptors();
  ::protobuf_MachineDescription_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MachineInfo_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* LightSpec_CompType_descriptor() {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineInfo_2eproto::file_level_enum_descriptors[0];
}
bool LightSpec_CompType_IsValid(int value) {
  switch (value) {
    case 10:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LightSpec_CompType LightSpec::COMP_ID;
const LightSpec_CompType LightSpec::MSG_TYPE;
const LightSpec_CompType LightSpec::CompType_MIN;
const LightSpec_CompType LightSpec::CompType_MAX;
const int LightSpec::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ShelfSlotInfo_CompType_descriptor() {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineInfo_2eproto::file_level_enum_descriptors[1];
}
bool ShelfSlotInfo_CompType_IsValid(int value) {
  switch (value) {
    case 121:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ShelfSlotInfo_CompType ShelfSlotInfo::COMP_ID;
const ShelfSlotInfo_CompType ShelfSlotInfo::MSG_TYPE;
const ShelfSlotInfo_CompType ShelfSlotInfo::CompType_MIN;
const ShelfSlotInfo_CompType ShelfSlotInfo::CompType_MAX;
const int ShelfSlotInfo::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Machine_CompType_descriptor() {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineInfo_2eproto::file_level_enum_descriptors[2];
}
bool Machine_CompType_IsValid(int value) {
  switch (value) {
    case 12:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Machine_CompType Machine::COMP_ID;
const Machine_CompType Machine::MSG_TYPE;
const Machine_CompType Machine::CompType_MIN;
const Machine_CompType Machine::CompType_MAX;
const int Machine::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MachineInfo_CompType_descriptor() {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineInfo_2eproto::file_level_enum_descriptors[3];
}
bool MachineInfo_CompType_IsValid(int value) {
  switch (value) {
    case 13:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MachineInfo_CompType MachineInfo::COMP_ID;
const MachineInfo_CompType MachineInfo::MSG_TYPE;
const MachineInfo_CompType MachineInfo::CompType_MIN;
const MachineInfo_CompType MachineInfo::CompType_MAX;
const int MachineInfo::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExplorationState_descriptor() {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineInfo_2eproto::file_level_enum_descriptors[4];
}
bool ExplorationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LightSpec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightSpec::kColorFieldNumber;
const int LightSpec::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightSpec::LightSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineInfo_2eproto::scc_info_LightSpec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.LightSpec)
}
LightSpec::LightSpec(const LightSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&color_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.LightSpec)
}

void LightSpec::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&color_)) + sizeof(state_));
}

LightSpec::~LightSpec() {
  // @@protoc_insertion_point(destructor:llsf_msgs.LightSpec)
  SharedDtor();
}

void LightSpec::SharedDtor() {
}

void LightSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LightSpec::descriptor() {
  ::protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LightSpec& LightSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineInfo_2eproto::scc_info_LightSpec.base);
  return *internal_default_instance();
}


void LightSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.LightSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&color_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LightSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.LightSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.LightColor color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::LightColor_IsValid(value)) {
            set_color(static_cast< ::llsf_msgs::LightColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .llsf_msgs.LightState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::LightState_IsValid(value)) {
            set_state(static_cast< ::llsf_msgs::LightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.LightSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.LightSpec)
  return false;
#undef DO_
}

void LightSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.LightSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.LightColor color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // required .llsf_msgs.LightState state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.LightSpec)
}

::google::protobuf::uint8* LightSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.LightSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.LightColor color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // required .llsf_msgs.LightState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.LightSpec)
  return target;
}

size_t LightSpec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.LightSpec)
  size_t total_size = 0;

  if (has_color()) {
    // required .llsf_msgs.LightColor color = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  if (has_state()) {
    // required .llsf_msgs.LightState state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t LightSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.LightSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .llsf_msgs.LightColor color = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());

    // required .llsf_msgs.LightState state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.LightSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const LightSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LightSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.LightSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.LightSpec)
    MergeFrom(*source);
  }
}

void LightSpec::MergeFrom(const LightSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.LightSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LightSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.LightSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSpec::CopyFrom(const LightSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.LightSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LightSpec::Swap(LightSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightSpec::InternalSwap(LightSpec* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LightSpec::GetMetadata() const {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ShelfSlotInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShelfSlotInfo::kShelfFieldNumber;
const int ShelfSlotInfo::kSlotFieldNumber;
const int ShelfSlotInfo::kIsFilledFieldNumber;
const int ShelfSlotInfo::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShelfSlotInfo::ShelfSlotInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineInfo_2eproto::scc_info_ShelfSlotInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.ShelfSlotInfo)
}
ShelfSlotInfo::ShelfSlotInfo(const ShelfSlotInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&shelf_, &from.shelf_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_filled_) -
    reinterpret_cast<char*>(&shelf_)) + sizeof(is_filled_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.ShelfSlotInfo)
}

void ShelfSlotInfo::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&shelf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_filled_) -
      reinterpret_cast<char*>(&shelf_)) + sizeof(is_filled_));
}

ShelfSlotInfo::~ShelfSlotInfo() {
  // @@protoc_insertion_point(destructor:llsf_msgs.ShelfSlotInfo)
  SharedDtor();
}

void ShelfSlotInfo::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShelfSlotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShelfSlotInfo::descriptor() {
  ::protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShelfSlotInfo& ShelfSlotInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineInfo_2eproto::scc_info_ShelfSlotInfo.base);
  return *internal_default_instance();
}


void ShelfSlotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.ShelfSlotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&shelf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_filled_) -
        reinterpret_cast<char*>(&shelf_)) + sizeof(is_filled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShelfSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.ShelfSlotInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shelf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_shelf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shelf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_filled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_filled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_filled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.ShelfSlotInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.ShelfSlotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.ShelfSlotInfo)
  return false;
#undef DO_
}

void ShelfSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.ShelfSlotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 shelf = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shelf(), output);
  }

  // required uint32 slot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  // required bool is_filled = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_filled(), output);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.ShelfSlotInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.ShelfSlotInfo)
}

::google::protobuf::uint8* ShelfSlotInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.ShelfSlotInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 shelf = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shelf(), target);
  }

  // required uint32 slot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  // required bool is_filled = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_filled(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.ShelfSlotInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.ShelfSlotInfo)
  return target;
}

size_t ShelfSlotInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.ShelfSlotInfo)
  size_t total_size = 0;

  if (has_shelf()) {
    // required uint32 shelf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shelf());
  }

  if (has_slot()) {
    // required uint32 slot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  if (has_is_filled()) {
    // required bool is_filled = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ShelfSlotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.ShelfSlotInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 shelf = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shelf());

    // required uint32 slot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());

    // required bool is_filled = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string description = 5;
  if (has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShelfSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.ShelfSlotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShelfSlotInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShelfSlotInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.ShelfSlotInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.ShelfSlotInfo)
    MergeFrom(*source);
  }
}

void ShelfSlotInfo::MergeFrom(const ShelfSlotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.ShelfSlotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      shelf_ = from.shelf_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_filled_ = from.is_filled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShelfSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.ShelfSlotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShelfSlotInfo::CopyFrom(const ShelfSlotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.ShelfSlotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShelfSlotInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void ShelfSlotInfo::Swap(ShelfSlotInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShelfSlotInfo::InternalSwap(ShelfSlotInfo* other) {
  using std::swap;
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shelf_, other->shelf_);
  swap(slot_, other->slot_);
  swap(is_filled_, other->is_filled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShelfSlotInfo::GetMetadata() const {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Machine::InitAsDefaultInstance() {
  ::llsf_msgs::_Machine_default_instance_._instance.get_mutable()->pose_ = const_cast< ::llsf_msgs::Pose2D*>(
      ::llsf_msgs::Pose2D::internal_default_instance());
  ::llsf_msgs::_Machine_default_instance_._instance.get_mutable()->instruction_bs_ = const_cast< ::llsf_msgs::PrepareInstructionBS*>(
      ::llsf_msgs::PrepareInstructionBS::internal_default_instance());
  ::llsf_msgs::_Machine_default_instance_._instance.get_mutable()->instruction_ds_ = const_cast< ::llsf_msgs::PrepareInstructionDS*>(
      ::llsf_msgs::PrepareInstructionDS::internal_default_instance());
  ::llsf_msgs::_Machine_default_instance_._instance.get_mutable()->instruction_ss_ = const_cast< ::llsf_msgs::PrepareInstructionSS*>(
      ::llsf_msgs::PrepareInstructionSS::internal_default_instance());
  ::llsf_msgs::_Machine_default_instance_._instance.get_mutable()->instruction_rs_ = const_cast< ::llsf_msgs::PrepareInstructionRS*>(
      ::llsf_msgs::PrepareInstructionRS::internal_default_instance());
  ::llsf_msgs::_Machine_default_instance_._instance.get_mutable()->instruction_cs_ = const_cast< ::llsf_msgs::PrepareInstructionCS*>(
      ::llsf_msgs::PrepareInstructionCS::internal_default_instance());
}
void Machine::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
void Machine::clear_instruction_bs() {
  if (instruction_bs_ != NULL) instruction_bs_->Clear();
  clear_has_instruction_bs();
}
void Machine::clear_instruction_ds() {
  if (instruction_ds_ != NULL) instruction_ds_->Clear();
  clear_has_instruction_ds();
}
void Machine::clear_instruction_ss() {
  if (instruction_ss_ != NULL) instruction_ss_->Clear();
  clear_has_instruction_ss();
}
void Machine::clear_instruction_rs() {
  if (instruction_rs_ != NULL) instruction_rs_->Clear();
  clear_has_instruction_rs();
}
void Machine::clear_instruction_cs() {
  if (instruction_cs_ != NULL) instruction_cs_->Clear();
  clear_has_instruction_cs();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine::kNameFieldNumber;
const int Machine::kTypeFieldNumber;
const int Machine::kStateFieldNumber;
const int Machine::kTeamColorFieldNumber;
const int Machine::kLightsFieldNumber;
const int Machine::kPoseFieldNumber;
const int Machine::kZoneFieldNumber;
const int Machine::kRotationFieldNumber;
const int Machine::kCorrectlyReportedFieldNumber;
const int Machine::kLoadedWithFieldNumber;
const int Machine::kRingColorsFieldNumber;
const int Machine::kInstructionBsFieldNumber;
const int Machine::kInstructionDsFieldNumber;
const int Machine::kInstructionSsFieldNumber;
const int Machine::kInstructionRsFieldNumber;
const int Machine::kInstructionCsFieldNumber;
const int Machine::kExplorationRotationStateFieldNumber;
const int Machine::kExplorationZoneStateFieldNumber;
const int Machine::kStatusSsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine::Machine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineInfo_2eproto::scc_info_Machine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.Machine)
}
Machine::Machine(const Machine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lights_(from.lights_),
      ring_colors_(from.ring_colors_),
      status_ss_(from.status_ss_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state()) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.has_pose()) {
    pose_ = new ::llsf_msgs::Pose2D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_instruction_bs()) {
    instruction_bs_ = new ::llsf_msgs::PrepareInstructionBS(*from.instruction_bs_);
  } else {
    instruction_bs_ = NULL;
  }
  if (from.has_instruction_ds()) {
    instruction_ds_ = new ::llsf_msgs::PrepareInstructionDS(*from.instruction_ds_);
  } else {
    instruction_ds_ = NULL;
  }
  if (from.has_instruction_rs()) {
    instruction_rs_ = new ::llsf_msgs::PrepareInstructionRS(*from.instruction_rs_);
  } else {
    instruction_rs_ = NULL;
  }
  if (from.has_instruction_cs()) {
    instruction_cs_ = new ::llsf_msgs::PrepareInstructionCS(*from.instruction_cs_);
  } else {
    instruction_cs_ = NULL;
  }
  if (from.has_instruction_ss()) {
    instruction_ss_ = new ::llsf_msgs::PrepareInstructionSS(*from.instruction_ss_);
  } else {
    instruction_ss_ = NULL;
  }
  ::memcpy(&correctly_reported_, &from.correctly_reported_,
    static_cast<size_t>(reinterpret_cast<char*>(&zone_) -
    reinterpret_cast<char*>(&correctly_reported_)) + sizeof(zone_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.Machine)
}

void Machine::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exploration_zone_state_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(exploration_zone_state_));
  zone_ = 18;
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:llsf_msgs.Machine)
  SharedDtor();
}

void Machine::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete instruction_bs_;
  if (this != internal_default_instance()) delete instruction_ds_;
  if (this != internal_default_instance()) delete instruction_rs_;
  if (this != internal_default_instance()) delete instruction_cs_;
  if (this != internal_default_instance()) delete instruction_ss_;
}

void Machine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Machine::descriptor() {
  ::protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Machine& Machine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineInfo_2eproto::scc_info_Machine.base);
  return *internal_default_instance();
}


void Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.Machine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lights_.Clear();
  ring_colors_.Clear();
  status_ss_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      state_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(instruction_bs_ != NULL);
      instruction_bs_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(instruction_ds_ != NULL);
      instruction_ds_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(instruction_rs_ != NULL);
      instruction_rs_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(instruction_cs_ != NULL);
      instruction_cs_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(instruction_ss_ != NULL);
    instruction_ss_->Clear();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&correctly_reported_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exploration_zone_state_) -
        reinterpret_cast<char*>(&correctly_reported_)) + sizeof(exploration_zone_state_));
    zone_ = 18;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Machine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.Machine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.Machine.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.Machine.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.Machine.state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llsf_msgs.LightSpec lights = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Pose2D pose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool correctly_reported = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_correctly_reported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correctly_reported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Team team_color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Zone zone = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Zone_IsValid(value)) {
            set_zone(static_cast< ::llsf_msgs::Zone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rotation = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loaded_with = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_loaded_with();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loaded_with_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llsf_msgs.RingColor ring_colors = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::RingColor_IsValid(value)) {
            add_ring_colors(static_cast< ::llsf_msgs::RingColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 14,
                 ::llsf_msgs::RingColor_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ring_colors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.PrepareInstructionBS instruction_bs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instruction_bs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.PrepareInstructionDS instruction_ds = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instruction_ds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.PrepareInstructionRS instruction_rs = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instruction_rs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.PrepareInstructionCS instruction_cs = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instruction_cs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.PrepareInstructionSS instruction_ss = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instruction_ss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.ExplorationState exploration_rotation_state = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::ExplorationState_IsValid(value)) {
            set_exploration_rotation_state(static_cast< ::llsf_msgs::ExplorationState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.ExplorationState exploration_zone_state = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::ExplorationState_IsValid(value)) {
            set_exploration_zone_state(static_cast< ::llsf_msgs::ExplorationState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llsf_msgs.ShelfSlotInfo status_ss = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_status_ss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.Machine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.Machine)
  return false;
#undef DO_
}

void Machine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.Machine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Machine.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Machine.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Machine.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->state(), output);
  }

  // repeated .llsf_msgs.LightSpec lights = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->lights(static_cast<int>(i)),
      output);
  }

  // optional .llsf_msgs.Pose2D pose = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_pose(), output);
  }

  // optional bool correctly_reported = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->correctly_reported(), output);
  }

  // optional .llsf_msgs.Team team_color = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->team_color(), output);
  }

  // optional .llsf_msgs.Zone zone = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->zone(), output);
  }

  // optional uint32 rotation = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rotation(), output);
  }

  // optional uint32 loaded_with = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->loaded_with(), output);
  }

  // repeated .llsf_msgs.RingColor ring_colors = 14;
  for (int i = 0, n = this->ring_colors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ring_colors(i), output);
  }

  // optional .llsf_msgs.PrepareInstructionBS instruction_bs = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_instruction_bs(), output);
  }

  // optional .llsf_msgs.PrepareInstructionDS instruction_ds = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_instruction_ds(), output);
  }

  // optional .llsf_msgs.PrepareInstructionRS instruction_rs = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_instruction_rs(), output);
  }

  // optional .llsf_msgs.PrepareInstructionCS instruction_cs = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_instruction_cs(), output);
  }

  // optional .llsf_msgs.PrepareInstructionSS instruction_ss = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_instruction_ss(), output);
  }

  // optional .llsf_msgs.ExplorationState exploration_rotation_state = 21;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->exploration_rotation_state(), output);
  }

  // optional .llsf_msgs.ExplorationState exploration_zone_state = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->exploration_zone_state(), output);
  }

  // repeated .llsf_msgs.ShelfSlotInfo status_ss = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->status_ss_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->status_ss(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.Machine)
}

::google::protobuf::uint8* Machine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.Machine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Machine.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Machine.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.Machine.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }

  // repeated .llsf_msgs.LightSpec lights = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->lights(static_cast<int>(i)), deterministic, target);
  }

  // optional .llsf_msgs.Pose2D pose = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_pose(), deterministic, target);
  }

  // optional bool correctly_reported = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->correctly_reported(), target);
  }

  // optional .llsf_msgs.Team team_color = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->team_color(), target);
  }

  // optional .llsf_msgs.Zone zone = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->zone(), target);
  }

  // optional uint32 rotation = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rotation(), target);
  }

  // optional uint32 loaded_with = 13 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->loaded_with(), target);
  }

  // repeated .llsf_msgs.RingColor ring_colors = 14;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    14, this->ring_colors_, target);

  // optional .llsf_msgs.PrepareInstructionBS instruction_bs = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_instruction_bs(), deterministic, target);
  }

  // optional .llsf_msgs.PrepareInstructionDS instruction_ds = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_instruction_ds(), deterministic, target);
  }

  // optional .llsf_msgs.PrepareInstructionRS instruction_rs = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_instruction_rs(), deterministic, target);
  }

  // optional .llsf_msgs.PrepareInstructionCS instruction_cs = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_instruction_cs(), deterministic, target);
  }

  // optional .llsf_msgs.PrepareInstructionSS instruction_ss = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_instruction_ss(), deterministic, target);
  }

  // optional .llsf_msgs.ExplorationState exploration_rotation_state = 21;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->exploration_rotation_state(), target);
  }

  // optional .llsf_msgs.ExplorationState exploration_zone_state = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->exploration_zone_state(), target);
  }

  // repeated .llsf_msgs.ShelfSlotInfo status_ss = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->status_ss_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->status_ss(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.Machine)
  return target;
}

size_t Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.Machine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated .llsf_msgs.LightSpec lights = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->lights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lights(static_cast<int>(i)));
    }
  }

  // repeated .llsf_msgs.RingColor ring_colors = 14;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ring_colors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ring_colors(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .llsf_msgs.ShelfSlotInfo status_ss = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->status_ss_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->status_ss(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional .llsf_msgs.Pose2D pose = 8;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .llsf_msgs.PrepareInstructionBS instruction_bs = 16;
    if (has_instruction_bs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *instruction_bs_);
    }

    // optional .llsf_msgs.PrepareInstructionDS instruction_ds = 17;
    if (has_instruction_ds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *instruction_ds_);
    }

    // optional .llsf_msgs.PrepareInstructionRS instruction_rs = 18;
    if (has_instruction_rs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *instruction_rs_);
    }

    // optional .llsf_msgs.PrepareInstructionCS instruction_cs = 19;
    if (has_instruction_cs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *instruction_cs_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .llsf_msgs.PrepareInstructionSS instruction_ss = 20;
    if (has_instruction_ss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *instruction_ss_);
    }

    // optional bool correctly_reported = 9;
    if (has_correctly_reported()) {
      total_size += 1 + 1;
    }

    // optional .llsf_msgs.Team team_color = 10;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }

    // optional uint32 rotation = 12;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rotation());
    }

    // optional uint32 loaded_with = 13 [default = 0];
    if (has_loaded_with()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loaded_with());
    }

    // optional .llsf_msgs.ExplorationState exploration_rotation_state = 21;
    if (has_exploration_rotation_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exploration_rotation_state());
    }

    // optional .llsf_msgs.ExplorationState exploration_zone_state = 22;
    if (has_exploration_zone_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exploration_zone_state());
    }

    // optional .llsf_msgs.Zone zone = 11;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Machine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.Machine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.Machine)
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lights_.MergeFrom(from.lights_);
  ring_colors_.MergeFrom(from.ring_colors_);
  status_ss_.MergeFrom(from.status_ss_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_instruction_bs()->::llsf_msgs::PrepareInstructionBS::MergeFrom(from.instruction_bs());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_instruction_ds()->::llsf_msgs::PrepareInstructionDS::MergeFrom(from.instruction_ds());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_instruction_rs()->::llsf_msgs::PrepareInstructionRS::MergeFrom(from.instruction_rs());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_instruction_cs()->::llsf_msgs::PrepareInstructionCS::MergeFrom(from.instruction_cs());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_instruction_ss()->::llsf_msgs::PrepareInstructionSS::MergeFrom(from.instruction_ss());
    }
    if (cached_has_bits & 0x00000200u) {
      correctly_reported_ = from.correctly_reported_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_color_ = from.team_color_;
    }
    if (cached_has_bits & 0x00000800u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00001000u) {
      loaded_with_ = from.loaded_with_;
    }
    if (cached_has_bits & 0x00002000u) {
      exploration_rotation_state_ = from.exploration_rotation_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      exploration_zone_state_ = from.exploration_zone_state_;
    }
    if (cached_has_bits & 0x00008000u) {
      zone_ = from.zone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Machine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lights())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->status_ss())) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_instruction_bs()) {
    if (!this->instruction_bs_->IsInitialized()) return false;
  }
  if (has_instruction_ds()) {
    if (!this->instruction_ds_->IsInitialized()) return false;
  }
  if (has_instruction_rs()) {
    if (!this->instruction_rs_->IsInitialized()) return false;
  }
  if (has_instruction_cs()) {
    if (!this->instruction_cs_->IsInitialized()) return false;
  }
  if (has_instruction_ss()) {
    if (!this->instruction_ss_->IsInitialized()) return false;
  }
  return true;
}

void Machine::Swap(Machine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine::InternalSwap(Machine* other) {
  using std::swap;
  CastToBase(&lights_)->InternalSwap(CastToBase(&other->lights_));
  ring_colors_.InternalSwap(&other->ring_colors_);
  CastToBase(&status_ss_)->InternalSwap(CastToBase(&other->status_ss_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(instruction_bs_, other->instruction_bs_);
  swap(instruction_ds_, other->instruction_ds_);
  swap(instruction_rs_, other->instruction_rs_);
  swap(instruction_cs_, other->instruction_cs_);
  swap(instruction_ss_, other->instruction_ss_);
  swap(correctly_reported_, other->correctly_reported_);
  swap(team_color_, other->team_color_);
  swap(rotation_, other->rotation_);
  swap(loaded_with_, other->loaded_with_);
  swap(exploration_rotation_state_, other->exploration_rotation_state_);
  swap(exploration_zone_state_, other->exploration_zone_state_);
  swap(zone_, other->zone_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Machine::GetMetadata() const {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MachineInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineInfo::kMachinesFieldNumber;
const int MachineInfo::kTeamColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineInfo::MachineInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineInfo_2eproto::scc_info_MachineInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.MachineInfo)
}
MachineInfo::MachineInfo(const MachineInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      machines_(from.machines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_color_ = from.team_color_;
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.MachineInfo)
}

void MachineInfo::SharedCtor() {
  team_color_ = 0;
}

MachineInfo::~MachineInfo() {
  // @@protoc_insertion_point(destructor:llsf_msgs.MachineInfo)
  SharedDtor();
}

void MachineInfo::SharedDtor() {
}

void MachineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MachineInfo::descriptor() {
  ::protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineInfo& MachineInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineInfo_2eproto::scc_info_MachineInfo.base);
  return *internal_default_instance();
}


void MachineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.MachineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machines_.Clear();
  team_color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.MachineInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.Machine machines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_machines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Team team_color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.MachineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.MachineInfo)
  return false;
#undef DO_
}

void MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.MachineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.Machine machines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->machines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->machines(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.MachineInfo)
}

::google::protobuf::uint8* MachineInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.MachineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.Machine machines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->machines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->machines(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.MachineInfo)
  return target;
}

size_t MachineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.MachineInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .llsf_msgs.Machine machines = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->machines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->machines(static_cast<int>(i)));
    }
  }

  // optional .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.MachineInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.MachineInfo)
    MergeFrom(*source);
  }
}

void MachineInfo::MergeFrom(const MachineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  machines_.MergeFrom(from.machines_);
  if (from.has_team_color()) {
    set_team_color(from.team_color());
  }
}

void MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfo::CopyFrom(const MachineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->machines())) return false;
  return true;
}

void MachineInfo::Swap(MachineInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineInfo::InternalSwap(MachineInfo* other) {
  using std::swap;
  CastToBase(&machines_)->InternalSwap(CastToBase(&other->machines_));
  swap(team_color_, other->team_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MachineInfo::GetMetadata() const {
  protobuf_MachineInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::LightSpec* Arena::CreateMaybeMessage< ::llsf_msgs::LightSpec >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::LightSpec >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::ShelfSlotInfo* Arena::CreateMaybeMessage< ::llsf_msgs::ShelfSlotInfo >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::ShelfSlotInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::Machine* Arena::CreateMaybeMessage< ::llsf_msgs::Machine >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::Machine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::MachineInfo* Arena::CreateMaybeMessage< ::llsf_msgs::MachineInfo >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::MachineInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
