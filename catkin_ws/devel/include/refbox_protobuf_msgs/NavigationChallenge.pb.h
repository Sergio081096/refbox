// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavigationChallenge.proto

#ifndef PROTOBUF_INCLUDED_NavigationChallenge_2eproto
#define PROTOBUF_INCLUDED_NavigationChallenge_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Team.pb.h"
#include "Zone.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NavigationChallenge_2eproto 

namespace protobuf_NavigationChallenge_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_NavigationChallenge_2eproto
namespace llsf_msgs {
class NavigationRoutes;
class NavigationRoutesDefaultTypeInternal;
extern NavigationRoutesDefaultTypeInternal _NavigationRoutes_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::NavigationRoutes* Arena::CreateMaybeMessage<::llsf_msgs::NavigationRoutes>(Arena*);
template<> ::llsf_msgs::Route* Arena::CreateMaybeMessage<::llsf_msgs::Route>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum NavigationRoutes_CompType {
  NavigationRoutes_CompType_COMP_ID = 2000,
  NavigationRoutes_CompType_MSG_TYPE = 250
};
bool NavigationRoutes_CompType_IsValid(int value);
const NavigationRoutes_CompType NavigationRoutes_CompType_CompType_MIN = NavigationRoutes_CompType_MSG_TYPE;
const NavigationRoutes_CompType NavigationRoutes_CompType_CompType_MAX = NavigationRoutes_CompType_COMP_ID;
const int NavigationRoutes_CompType_CompType_ARRAYSIZE = NavigationRoutes_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigationRoutes_CompType_descriptor();
inline const ::std::string& NavigationRoutes_CompType_Name(NavigationRoutes_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigationRoutes_CompType_descriptor(), value);
}
inline bool NavigationRoutes_CompType_Parse(
    const ::std::string& name, NavigationRoutes_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigationRoutes_CompType>(
    NavigationRoutes_CompType_descriptor(), name, value);
}
// ===================================================================

class Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.Route) */ {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Route* other);
  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(NULL);
  }

  Route* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.Zone route = 2;
  int route_size() const;
  void clear_route();
  static const int kRouteFieldNumber = 2;
  ::llsf_msgs::Zone route(int index) const;
  void set_route(int index, ::llsf_msgs::Zone value);
  void add_route(::llsf_msgs::Zone value);
  const ::google::protobuf::RepeatedField<int>& route() const;
  ::google::protobuf::RepeatedField<int>* mutable_route();

  // repeated .llsf_msgs.Zone reached = 3;
  int reached_size() const;
  void clear_reached();
  static const int kReachedFieldNumber = 3;
  ::llsf_msgs::Zone reached(int index) const;
  void set_reached(int index, ::llsf_msgs::Zone value);
  void add_reached(::llsf_msgs::Zone value);
  const ::google::protobuf::RepeatedField<int>& reached() const;
  ::google::protobuf::RepeatedField<int>* mutable_reached();

  // repeated .llsf_msgs.Zone remaining = 4;
  int remaining_size() const;
  void clear_remaining();
  static const int kRemainingFieldNumber = 4;
  ::llsf_msgs::Zone remaining(int index) const;
  void set_remaining(int index, ::llsf_msgs::Zone value);
  void add_remaining(::llsf_msgs::Zone value);
  const ::google::protobuf::RepeatedField<int>& remaining() const;
  ::google::protobuf::RepeatedField<int>* mutable_remaining();

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.Route)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> route_;
  ::google::protobuf::RepeatedField<int> reached_;
  ::google::protobuf::RepeatedField<int> remaining_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_NavigationChallenge_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NavigationRoutes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.NavigationRoutes) */ {
 public:
  NavigationRoutes();
  virtual ~NavigationRoutes();

  NavigationRoutes(const NavigationRoutes& from);

  inline NavigationRoutes& operator=(const NavigationRoutes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationRoutes(NavigationRoutes&& from) noexcept
    : NavigationRoutes() {
    *this = ::std::move(from);
  }

  inline NavigationRoutes& operator=(NavigationRoutes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationRoutes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationRoutes* internal_default_instance() {
    return reinterpret_cast<const NavigationRoutes*>(
               &_NavigationRoutes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NavigationRoutes* other);
  friend void swap(NavigationRoutes& a, NavigationRoutes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationRoutes* New() const final {
    return CreateMaybeMessage<NavigationRoutes>(NULL);
  }

  NavigationRoutes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationRoutes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationRoutes& from);
  void MergeFrom(const NavigationRoutes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationRoutes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NavigationRoutes_CompType CompType;
  static const CompType COMP_ID =
    NavigationRoutes_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    NavigationRoutes_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return NavigationRoutes_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    NavigationRoutes_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    NavigationRoutes_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    NavigationRoutes_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return NavigationRoutes_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return NavigationRoutes_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return NavigationRoutes_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.Route routes = 5;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 5;
  ::llsf_msgs::Route* mutable_routes(int index);
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Route >*
      mutable_routes();
  const ::llsf_msgs::Route& routes(int index) const;
  ::llsf_msgs::Route* add_routes();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Route >&
      routes() const;

  // required .llsf_msgs.Team team_color = 1;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 1;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.NavigationRoutes)
 private:
  void set_has_team_color();
  void clear_has_team_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Route > routes_;
  int team_color_;
  friend struct ::protobuf_NavigationChallenge_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Route

// required uint32 id = 1;
inline bool Route::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Route::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Route::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Route::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Route::id() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Route.id)
  return id_;
}
inline void Route::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Route.id)
}

// repeated .llsf_msgs.Zone route = 2;
inline int Route::route_size() const {
  return route_.size();
}
inline void Route::clear_route() {
  route_.Clear();
}
inline ::llsf_msgs::Zone Route::route(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Route.route)
  return static_cast< ::llsf_msgs::Zone >(route_.Get(index));
}
inline void Route::set_route(int index, ::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  route_.Set(index, value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Route.route)
}
inline void Route::add_route(::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  route_.Add(value);
  // @@protoc_insertion_point(field_add:llsf_msgs.Route.route)
}
inline const ::google::protobuf::RepeatedField<int>&
Route::route() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.Route.route)
  return route_;
}
inline ::google::protobuf::RepeatedField<int>*
Route::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.Route.route)
  return &route_;
}

// repeated .llsf_msgs.Zone reached = 3;
inline int Route::reached_size() const {
  return reached_.size();
}
inline void Route::clear_reached() {
  reached_.Clear();
}
inline ::llsf_msgs::Zone Route::reached(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Route.reached)
  return static_cast< ::llsf_msgs::Zone >(reached_.Get(index));
}
inline void Route::set_reached(int index, ::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  reached_.Set(index, value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Route.reached)
}
inline void Route::add_reached(::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  reached_.Add(value);
  // @@protoc_insertion_point(field_add:llsf_msgs.Route.reached)
}
inline const ::google::protobuf::RepeatedField<int>&
Route::reached() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.Route.reached)
  return reached_;
}
inline ::google::protobuf::RepeatedField<int>*
Route::mutable_reached() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.Route.reached)
  return &reached_;
}

// repeated .llsf_msgs.Zone remaining = 4;
inline int Route::remaining_size() const {
  return remaining_.size();
}
inline void Route::clear_remaining() {
  remaining_.Clear();
}
inline ::llsf_msgs::Zone Route::remaining(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Route.remaining)
  return static_cast< ::llsf_msgs::Zone >(remaining_.Get(index));
}
inline void Route::set_remaining(int index, ::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  remaining_.Set(index, value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Route.remaining)
}
inline void Route::add_remaining(::llsf_msgs::Zone value) {
  assert(::llsf_msgs::Zone_IsValid(value));
  remaining_.Add(value);
  // @@protoc_insertion_point(field_add:llsf_msgs.Route.remaining)
}
inline const ::google::protobuf::RepeatedField<int>&
Route::remaining() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.Route.remaining)
  return remaining_;
}
inline ::google::protobuf::RepeatedField<int>*
Route::mutable_remaining() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.Route.remaining)
  return &remaining_;
}

// -------------------------------------------------------------------

// NavigationRoutes

// required .llsf_msgs.Team team_color = 1;
inline bool NavigationRoutes::has_team_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationRoutes::set_has_team_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationRoutes::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationRoutes::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team NavigationRoutes::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.NavigationRoutes.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void NavigationRoutes::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.NavigationRoutes.team_color)
}

// repeated .llsf_msgs.Route routes = 5;
inline int NavigationRoutes::routes_size() const {
  return routes_.size();
}
inline void NavigationRoutes::clear_routes() {
  routes_.Clear();
}
inline ::llsf_msgs::Route* NavigationRoutes::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.NavigationRoutes.routes)
  return routes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Route >*
NavigationRoutes::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.NavigationRoutes.routes)
  return &routes_;
}
inline const ::llsf_msgs::Route& NavigationRoutes::routes(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.NavigationRoutes.routes)
  return routes_.Get(index);
}
inline ::llsf_msgs::Route* NavigationRoutes::add_routes() {
  // @@protoc_insertion_point(field_add:llsf_msgs.NavigationRoutes.routes)
  return routes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Route >&
NavigationRoutes::routes() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.NavigationRoutes.routes)
  return routes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::NavigationRoutes_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::NavigationRoutes_CompType>() {
  return ::llsf_msgs::NavigationRoutes_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NavigationChallenge_2eproto
