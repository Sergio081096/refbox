// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineInstructions.proto

#ifndef PROTOBUF_INCLUDED_MachineInstructions_2eproto
#define PROTOBUF_INCLUDED_MachineInstructions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MachineDescription.pb.h"
#include "ProductColor.pb.h"
#include "Team.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MachineInstructions_2eproto 

namespace protobuf_MachineInstructions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MachineInstructions_2eproto
namespace llsf_msgs {
class PrepareInstructionBS;
class PrepareInstructionBSDefaultTypeInternal;
extern PrepareInstructionBSDefaultTypeInternal _PrepareInstructionBS_default_instance_;
class PrepareInstructionCS;
class PrepareInstructionCSDefaultTypeInternal;
extern PrepareInstructionCSDefaultTypeInternal _PrepareInstructionCS_default_instance_;
class PrepareInstructionDS;
class PrepareInstructionDSDefaultTypeInternal;
extern PrepareInstructionDSDefaultTypeInternal _PrepareInstructionDS_default_instance_;
class PrepareInstructionRS;
class PrepareInstructionRSDefaultTypeInternal;
extern PrepareInstructionRSDefaultTypeInternal _PrepareInstructionRS_default_instance_;
class PrepareInstructionSS;
class PrepareInstructionSSDefaultTypeInternal;
extern PrepareInstructionSSDefaultTypeInternal _PrepareInstructionSS_default_instance_;
class PrepareMachine;
class PrepareMachineDefaultTypeInternal;
extern PrepareMachineDefaultTypeInternal _PrepareMachine_default_instance_;
class ResetMachine;
class ResetMachineDefaultTypeInternal;
extern ResetMachineDefaultTypeInternal _ResetMachine_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::PrepareInstructionBS* Arena::CreateMaybeMessage<::llsf_msgs::PrepareInstructionBS>(Arena*);
template<> ::llsf_msgs::PrepareInstructionCS* Arena::CreateMaybeMessage<::llsf_msgs::PrepareInstructionCS>(Arena*);
template<> ::llsf_msgs::PrepareInstructionDS* Arena::CreateMaybeMessage<::llsf_msgs::PrepareInstructionDS>(Arena*);
template<> ::llsf_msgs::PrepareInstructionRS* Arena::CreateMaybeMessage<::llsf_msgs::PrepareInstructionRS>(Arena*);
template<> ::llsf_msgs::PrepareInstructionSS* Arena::CreateMaybeMessage<::llsf_msgs::PrepareInstructionSS>(Arena*);
template<> ::llsf_msgs::PrepareMachine* Arena::CreateMaybeMessage<::llsf_msgs::PrepareMachine>(Arena*);
template<> ::llsf_msgs::ResetMachine* Arena::CreateMaybeMessage<::llsf_msgs::ResetMachine>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum PrepareMachine_CompType {
  PrepareMachine_CompType_COMP_ID = 2000,
  PrepareMachine_CompType_MSG_TYPE = 101
};
bool PrepareMachine_CompType_IsValid(int value);
const PrepareMachine_CompType PrepareMachine_CompType_CompType_MIN = PrepareMachine_CompType_MSG_TYPE;
const PrepareMachine_CompType PrepareMachine_CompType_CompType_MAX = PrepareMachine_CompType_COMP_ID;
const int PrepareMachine_CompType_CompType_ARRAYSIZE = PrepareMachine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrepareMachine_CompType_descriptor();
inline const ::std::string& PrepareMachine_CompType_Name(PrepareMachine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrepareMachine_CompType_descriptor(), value);
}
inline bool PrepareMachine_CompType_Parse(
    const ::std::string& name, PrepareMachine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrepareMachine_CompType>(
    PrepareMachine_CompType_descriptor(), name, value);
}
enum ResetMachine_CompType {
  ResetMachine_CompType_COMP_ID = 2000,
  ResetMachine_CompType_MSG_TYPE = 104
};
bool ResetMachine_CompType_IsValid(int value);
const ResetMachine_CompType ResetMachine_CompType_CompType_MIN = ResetMachine_CompType_MSG_TYPE;
const ResetMachine_CompType ResetMachine_CompType_CompType_MAX = ResetMachine_CompType_COMP_ID;
const int ResetMachine_CompType_CompType_ARRAYSIZE = ResetMachine_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResetMachine_CompType_descriptor();
inline const ::std::string& ResetMachine_CompType_Name(ResetMachine_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResetMachine_CompType_descriptor(), value);
}
inline bool ResetMachine_CompType_Parse(
    const ::std::string& name, ResetMachine_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResetMachine_CompType>(
    ResetMachine_CompType_descriptor(), name, value);
}
enum MachineSide {
  INPUT = 1,
  OUTPUT = 2
};
bool MachineSide_IsValid(int value);
const MachineSide MachineSide_MIN = INPUT;
const MachineSide MachineSide_MAX = OUTPUT;
const int MachineSide_ARRAYSIZE = MachineSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineSide_descriptor();
inline const ::std::string& MachineSide_Name(MachineSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineSide_descriptor(), value);
}
inline bool MachineSide_Parse(
    const ::std::string& name, MachineSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineSide>(
    MachineSide_descriptor(), name, value);
}
// ===================================================================

class PrepareInstructionBS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.PrepareInstructionBS) */ {
 public:
  PrepareInstructionBS();
  virtual ~PrepareInstructionBS();

  PrepareInstructionBS(const PrepareInstructionBS& from);

  inline PrepareInstructionBS& operator=(const PrepareInstructionBS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareInstructionBS(PrepareInstructionBS&& from) noexcept
    : PrepareInstructionBS() {
    *this = ::std::move(from);
  }

  inline PrepareInstructionBS& operator=(PrepareInstructionBS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareInstructionBS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareInstructionBS* internal_default_instance() {
    return reinterpret_cast<const PrepareInstructionBS*>(
               &_PrepareInstructionBS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PrepareInstructionBS* other);
  friend void swap(PrepareInstructionBS& a, PrepareInstructionBS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareInstructionBS* New() const final {
    return CreateMaybeMessage<PrepareInstructionBS>(NULL);
  }

  PrepareInstructionBS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareInstructionBS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareInstructionBS& from);
  void MergeFrom(const PrepareInstructionBS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareInstructionBS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .llsf_msgs.MachineSide side = 1;
  bool has_side() const;
  void clear_side();
  static const int kSideFieldNumber = 1;
  ::llsf_msgs::MachineSide side() const;
  void set_side(::llsf_msgs::MachineSide value);

  // required .llsf_msgs.BaseColor color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::llsf_msgs::BaseColor color() const;
  void set_color(::llsf_msgs::BaseColor value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.PrepareInstructionBS)
 private:
  void set_has_side();
  void clear_has_side();
  void set_has_color();
  void clear_has_color();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int side_;
  int color_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareInstructionDS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.PrepareInstructionDS) */ {
 public:
  PrepareInstructionDS();
  virtual ~PrepareInstructionDS();

  PrepareInstructionDS(const PrepareInstructionDS& from);

  inline PrepareInstructionDS& operator=(const PrepareInstructionDS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareInstructionDS(PrepareInstructionDS&& from) noexcept
    : PrepareInstructionDS() {
    *this = ::std::move(from);
  }

  inline PrepareInstructionDS& operator=(PrepareInstructionDS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareInstructionDS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareInstructionDS* internal_default_instance() {
    return reinterpret_cast<const PrepareInstructionDS*>(
               &_PrepareInstructionDS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PrepareInstructionDS* other);
  friend void swap(PrepareInstructionDS& a, PrepareInstructionDS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareInstructionDS* New() const final {
    return CreateMaybeMessage<PrepareInstructionDS>(NULL);
  }

  PrepareInstructionDS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareInstructionDS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareInstructionDS& from);
  void MergeFrom(const PrepareInstructionDS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareInstructionDS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 order_id = 2;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  ::google::protobuf::uint32 order_id() const;
  void set_order_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.PrepareInstructionDS)
 private:
  void set_has_order_id();
  void clear_has_order_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 order_id_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareInstructionSS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.PrepareInstructionSS) */ {
 public:
  PrepareInstructionSS();
  virtual ~PrepareInstructionSS();

  PrepareInstructionSS(const PrepareInstructionSS& from);

  inline PrepareInstructionSS& operator=(const PrepareInstructionSS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareInstructionSS(PrepareInstructionSS&& from) noexcept
    : PrepareInstructionSS() {
    *this = ::std::move(from);
  }

  inline PrepareInstructionSS& operator=(PrepareInstructionSS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareInstructionSS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareInstructionSS* internal_default_instance() {
    return reinterpret_cast<const PrepareInstructionSS*>(
               &_PrepareInstructionSS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PrepareInstructionSS* other);
  friend void swap(PrepareInstructionSS& a, PrepareInstructionSS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareInstructionSS* New() const final {
    return CreateMaybeMessage<PrepareInstructionSS>(NULL);
  }

  PrepareInstructionSS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareInstructionSS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareInstructionSS& from);
  void MergeFrom(const PrepareInstructionSS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareInstructionSS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string wp_description = 10;
  bool has_wp_description() const;
  void clear_wp_description();
  static const int kWpDescriptionFieldNumber = 10;
  const ::std::string& wp_description() const;
  void set_wp_description(const ::std::string& value);
  #if LANG_CXX11
  void set_wp_description(::std::string&& value);
  #endif
  void set_wp_description(const char* value);
  void set_wp_description(const char* value, size_t size);
  ::std::string* mutable_wp_description();
  ::std::string* release_wp_description();
  void set_allocated_wp_description(::std::string* wp_description);

  // required uint32 shelf = 2;
  bool has_shelf() const;
  void clear_shelf();
  static const int kShelfFieldNumber = 2;
  ::google::protobuf::uint32 shelf() const;
  void set_shelf(::google::protobuf::uint32 value);

  // required uint32 slot = 3;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 3;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // required .llsf_msgs.SSOp operation = 1;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::llsf_msgs::SSOp operation() const;
  void set_operation(::llsf_msgs::SSOp value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.PrepareInstructionSS)
 private:
  void set_has_operation();
  void clear_has_operation();
  void set_has_shelf();
  void clear_has_shelf();
  void set_has_slot();
  void clear_has_slot();
  void set_has_wp_description();
  void clear_has_wp_description();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr wp_description_;
  ::google::protobuf::uint32 shelf_;
  ::google::protobuf::uint32 slot_;
  int operation_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareInstructionRS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.PrepareInstructionRS) */ {
 public:
  PrepareInstructionRS();
  virtual ~PrepareInstructionRS();

  PrepareInstructionRS(const PrepareInstructionRS& from);

  inline PrepareInstructionRS& operator=(const PrepareInstructionRS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareInstructionRS(PrepareInstructionRS&& from) noexcept
    : PrepareInstructionRS() {
    *this = ::std::move(from);
  }

  inline PrepareInstructionRS& operator=(PrepareInstructionRS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareInstructionRS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareInstructionRS* internal_default_instance() {
    return reinterpret_cast<const PrepareInstructionRS*>(
               &_PrepareInstructionRS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PrepareInstructionRS* other);
  friend void swap(PrepareInstructionRS& a, PrepareInstructionRS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareInstructionRS* New() const final {
    return CreateMaybeMessage<PrepareInstructionRS>(NULL);
  }

  PrepareInstructionRS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareInstructionRS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareInstructionRS& from);
  void MergeFrom(const PrepareInstructionRS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareInstructionRS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .llsf_msgs.RingColor ring_color = 1;
  bool has_ring_color() const;
  void clear_ring_color();
  static const int kRingColorFieldNumber = 1;
  ::llsf_msgs::RingColor ring_color() const;
  void set_ring_color(::llsf_msgs::RingColor value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.PrepareInstructionRS)
 private:
  void set_has_ring_color();
  void clear_has_ring_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int ring_color_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareInstructionCS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.PrepareInstructionCS) */ {
 public:
  PrepareInstructionCS();
  virtual ~PrepareInstructionCS();

  PrepareInstructionCS(const PrepareInstructionCS& from);

  inline PrepareInstructionCS& operator=(const PrepareInstructionCS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareInstructionCS(PrepareInstructionCS&& from) noexcept
    : PrepareInstructionCS() {
    *this = ::std::move(from);
  }

  inline PrepareInstructionCS& operator=(PrepareInstructionCS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareInstructionCS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareInstructionCS* internal_default_instance() {
    return reinterpret_cast<const PrepareInstructionCS*>(
               &_PrepareInstructionCS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PrepareInstructionCS* other);
  friend void swap(PrepareInstructionCS& a, PrepareInstructionCS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareInstructionCS* New() const final {
    return CreateMaybeMessage<PrepareInstructionCS>(NULL);
  }

  PrepareInstructionCS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareInstructionCS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareInstructionCS& from);
  void MergeFrom(const PrepareInstructionCS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareInstructionCS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .llsf_msgs.CSOp operation = 1;
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::llsf_msgs::CSOp operation() const;
  void set_operation(::llsf_msgs::CSOp value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.PrepareInstructionCS)
 private:
  void set_has_operation();
  void clear_has_operation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int operation_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareMachine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.PrepareMachine) */ {
 public:
  PrepareMachine();
  virtual ~PrepareMachine();

  PrepareMachine(const PrepareMachine& from);

  inline PrepareMachine& operator=(const PrepareMachine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareMachine(PrepareMachine&& from) noexcept
    : PrepareMachine() {
    *this = ::std::move(from);
  }

  inline PrepareMachine& operator=(PrepareMachine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareMachine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareMachine* internal_default_instance() {
    return reinterpret_cast<const PrepareMachine*>(
               &_PrepareMachine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PrepareMachine* other);
  friend void swap(PrepareMachine& a, PrepareMachine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareMachine* New() const final {
    return CreateMaybeMessage<PrepareMachine>(NULL);
  }

  PrepareMachine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareMachine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareMachine& from);
  void MergeFrom(const PrepareMachine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareMachine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PrepareMachine_CompType CompType;
  static const CompType COMP_ID =
    PrepareMachine_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    PrepareMachine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return PrepareMachine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    PrepareMachine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    PrepareMachine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    PrepareMachine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return PrepareMachine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return PrepareMachine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return PrepareMachine_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string machine = 2;
  bool has_machine() const;
  void clear_machine();
  static const int kMachineFieldNumber = 2;
  const ::std::string& machine() const;
  void set_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_machine(::std::string&& value);
  #endif
  void set_machine(const char* value);
  void set_machine(const char* value, size_t size);
  ::std::string* mutable_machine();
  ::std::string* release_machine();
  void set_allocated_machine(::std::string* machine);

  // optional .llsf_msgs.PrepareInstructionBS instruction_bs = 4;
  bool has_instruction_bs() const;
  void clear_instruction_bs();
  static const int kInstructionBsFieldNumber = 4;
  private:
  const ::llsf_msgs::PrepareInstructionBS& _internal_instruction_bs() const;
  public:
  const ::llsf_msgs::PrepareInstructionBS& instruction_bs() const;
  ::llsf_msgs::PrepareInstructionBS* release_instruction_bs();
  ::llsf_msgs::PrepareInstructionBS* mutable_instruction_bs();
  void set_allocated_instruction_bs(::llsf_msgs::PrepareInstructionBS* instruction_bs);

  // optional .llsf_msgs.PrepareInstructionDS instruction_ds = 5;
  bool has_instruction_ds() const;
  void clear_instruction_ds();
  static const int kInstructionDsFieldNumber = 5;
  private:
  const ::llsf_msgs::PrepareInstructionDS& _internal_instruction_ds() const;
  public:
  const ::llsf_msgs::PrepareInstructionDS& instruction_ds() const;
  ::llsf_msgs::PrepareInstructionDS* release_instruction_ds();
  ::llsf_msgs::PrepareInstructionDS* mutable_instruction_ds();
  void set_allocated_instruction_ds(::llsf_msgs::PrepareInstructionDS* instruction_ds);

  // optional .llsf_msgs.PrepareInstructionRS instruction_rs = 6;
  bool has_instruction_rs() const;
  void clear_instruction_rs();
  static const int kInstructionRsFieldNumber = 6;
  private:
  const ::llsf_msgs::PrepareInstructionRS& _internal_instruction_rs() const;
  public:
  const ::llsf_msgs::PrepareInstructionRS& instruction_rs() const;
  ::llsf_msgs::PrepareInstructionRS* release_instruction_rs();
  ::llsf_msgs::PrepareInstructionRS* mutable_instruction_rs();
  void set_allocated_instruction_rs(::llsf_msgs::PrepareInstructionRS* instruction_rs);

  // optional .llsf_msgs.PrepareInstructionCS instruction_cs = 7;
  bool has_instruction_cs() const;
  void clear_instruction_cs();
  static const int kInstructionCsFieldNumber = 7;
  private:
  const ::llsf_msgs::PrepareInstructionCS& _internal_instruction_cs() const;
  public:
  const ::llsf_msgs::PrepareInstructionCS& instruction_cs() const;
  ::llsf_msgs::PrepareInstructionCS* release_instruction_cs();
  ::llsf_msgs::PrepareInstructionCS* mutable_instruction_cs();
  void set_allocated_instruction_cs(::llsf_msgs::PrepareInstructionCS* instruction_cs);

  // optional .llsf_msgs.PrepareInstructionSS instruction_ss = 8;
  bool has_instruction_ss() const;
  void clear_instruction_ss();
  static const int kInstructionSsFieldNumber = 8;
  private:
  const ::llsf_msgs::PrepareInstructionSS& _internal_instruction_ss() const;
  public:
  const ::llsf_msgs::PrepareInstructionSS& instruction_ss() const;
  ::llsf_msgs::PrepareInstructionSS* release_instruction_ss();
  ::llsf_msgs::PrepareInstructionSS* mutable_instruction_ss();
  void set_allocated_instruction_ss(::llsf_msgs::PrepareInstructionSS* instruction_ss);

  // required .llsf_msgs.Team team_color = 1;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 1;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // optional uint64 sent_at = 15;
  bool has_sent_at() const;
  void clear_sent_at();
  static const int kSentAtFieldNumber = 15;
  ::google::protobuf::uint64 sent_at() const;
  void set_sent_at(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.PrepareMachine)
 private:
  void set_has_team_color();
  void clear_has_team_color();
  void set_has_machine();
  void clear_has_machine();
  void set_has_instruction_bs();
  void clear_has_instruction_bs();
  void set_has_instruction_ds();
  void clear_has_instruction_ds();
  void set_has_instruction_ss();
  void clear_has_instruction_ss();
  void set_has_instruction_rs();
  void clear_has_instruction_rs();
  void set_has_instruction_cs();
  void clear_has_instruction_cs();
  void set_has_sent_at();
  void clear_has_sent_at();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr machine_;
  ::llsf_msgs::PrepareInstructionBS* instruction_bs_;
  ::llsf_msgs::PrepareInstructionDS* instruction_ds_;
  ::llsf_msgs::PrepareInstructionRS* instruction_rs_;
  ::llsf_msgs::PrepareInstructionCS* instruction_cs_;
  ::llsf_msgs::PrepareInstructionSS* instruction_ss_;
  int team_color_;
  ::google::protobuf::uint64 sent_at_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetMachine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.ResetMachine) */ {
 public:
  ResetMachine();
  virtual ~ResetMachine();

  ResetMachine(const ResetMachine& from);

  inline ResetMachine& operator=(const ResetMachine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetMachine(ResetMachine&& from) noexcept
    : ResetMachine() {
    *this = ::std::move(from);
  }

  inline ResetMachine& operator=(ResetMachine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetMachine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetMachine* internal_default_instance() {
    return reinterpret_cast<const ResetMachine*>(
               &_ResetMachine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResetMachine* other);
  friend void swap(ResetMachine& a, ResetMachine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetMachine* New() const final {
    return CreateMaybeMessage<ResetMachine>(NULL);
  }

  ResetMachine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetMachine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetMachine& from);
  void MergeFrom(const ResetMachine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMachine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResetMachine_CompType CompType;
  static const CompType COMP_ID =
    ResetMachine_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    ResetMachine_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return ResetMachine_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    ResetMachine_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    ResetMachine_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    ResetMachine_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return ResetMachine_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return ResetMachine_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return ResetMachine_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string machine = 2;
  bool has_machine() const;
  void clear_machine();
  static const int kMachineFieldNumber = 2;
  const ::std::string& machine() const;
  void set_machine(const ::std::string& value);
  #if LANG_CXX11
  void set_machine(::std::string&& value);
  #endif
  void set_machine(const char* value);
  void set_machine(const char* value, size_t size);
  ::std::string* mutable_machine();
  ::std::string* release_machine();
  void set_allocated_machine(::std::string* machine);

  // required .llsf_msgs.Team team_color = 1;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 1;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.ResetMachine)
 private:
  void set_has_team_color();
  void clear_has_team_color();
  void set_has_machine();
  void clear_has_machine();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr machine_;
  int team_color_;
  friend struct ::protobuf_MachineInstructions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrepareInstructionBS

// required .llsf_msgs.MachineSide side = 1;
inline bool PrepareInstructionBS::has_side() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareInstructionBS::set_has_side() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareInstructionBS::clear_has_side() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareInstructionBS::clear_side() {
  side_ = 1;
  clear_has_side();
}
inline ::llsf_msgs::MachineSide PrepareInstructionBS::side() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionBS.side)
  return static_cast< ::llsf_msgs::MachineSide >(side_);
}
inline void PrepareInstructionBS::set_side(::llsf_msgs::MachineSide value) {
  assert(::llsf_msgs::MachineSide_IsValid(value));
  set_has_side();
  side_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionBS.side)
}

// required .llsf_msgs.BaseColor color = 2;
inline bool PrepareInstructionBS::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrepareInstructionBS::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrepareInstructionBS::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrepareInstructionBS::clear_color() {
  color_ = 1;
  clear_has_color();
}
inline ::llsf_msgs::BaseColor PrepareInstructionBS::color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionBS.color)
  return static_cast< ::llsf_msgs::BaseColor >(color_);
}
inline void PrepareInstructionBS::set_color(::llsf_msgs::BaseColor value) {
  assert(::llsf_msgs::BaseColor_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionBS.color)
}

// -------------------------------------------------------------------

// PrepareInstructionDS

// required uint32 order_id = 2;
inline bool PrepareInstructionDS::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareInstructionDS::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareInstructionDS::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareInstructionDS::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 PrepareInstructionDS::order_id() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionDS.order_id)
  return order_id_;
}
inline void PrepareInstructionDS::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionDS.order_id)
}

// -------------------------------------------------------------------

// PrepareInstructionSS

// required .llsf_msgs.SSOp operation = 1;
inline bool PrepareInstructionSS::has_operation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrepareInstructionSS::set_has_operation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrepareInstructionSS::clear_has_operation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrepareInstructionSS::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::llsf_msgs::SSOp PrepareInstructionSS::operation() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionSS.operation)
  return static_cast< ::llsf_msgs::SSOp >(operation_);
}
inline void PrepareInstructionSS::set_operation(::llsf_msgs::SSOp value) {
  assert(::llsf_msgs::SSOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionSS.operation)
}

// required uint32 shelf = 2;
inline bool PrepareInstructionSS::has_shelf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrepareInstructionSS::set_has_shelf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrepareInstructionSS::clear_has_shelf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrepareInstructionSS::clear_shelf() {
  shelf_ = 0u;
  clear_has_shelf();
}
inline ::google::protobuf::uint32 PrepareInstructionSS::shelf() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionSS.shelf)
  return shelf_;
}
inline void PrepareInstructionSS::set_shelf(::google::protobuf::uint32 value) {
  set_has_shelf();
  shelf_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionSS.shelf)
}

// required uint32 slot = 3;
inline bool PrepareInstructionSS::has_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrepareInstructionSS::set_has_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrepareInstructionSS::clear_has_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrepareInstructionSS::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 PrepareInstructionSS::slot() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionSS.slot)
  return slot_;
}
inline void PrepareInstructionSS::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionSS.slot)
}

// optional string wp_description = 10;
inline bool PrepareInstructionSS::has_wp_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareInstructionSS::set_has_wp_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareInstructionSS::clear_has_wp_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareInstructionSS::clear_wp_description() {
  wp_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wp_description();
}
inline const ::std::string& PrepareInstructionSS::wp_description() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionSS.wp_description)
  return wp_description_.GetNoArena();
}
inline void PrepareInstructionSS::set_wp_description(const ::std::string& value) {
  set_has_wp_description();
  wp_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionSS.wp_description)
}
#if LANG_CXX11
inline void PrepareInstructionSS::set_wp_description(::std::string&& value) {
  set_has_wp_description();
  wp_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.PrepareInstructionSS.wp_description)
}
#endif
inline void PrepareInstructionSS::set_wp_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wp_description();
  wp_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.PrepareInstructionSS.wp_description)
}
inline void PrepareInstructionSS::set_wp_description(const char* value, size_t size) {
  set_has_wp_description();
  wp_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.PrepareInstructionSS.wp_description)
}
inline ::std::string* PrepareInstructionSS::mutable_wp_description() {
  set_has_wp_description();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareInstructionSS.wp_description)
  return wp_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareInstructionSS::release_wp_description() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareInstructionSS.wp_description)
  if (!has_wp_description()) {
    return NULL;
  }
  clear_has_wp_description();
  return wp_description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareInstructionSS::set_allocated_wp_description(::std::string* wp_description) {
  if (wp_description != NULL) {
    set_has_wp_description();
  } else {
    clear_has_wp_description();
  }
  wp_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wp_description);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareInstructionSS.wp_description)
}

// -------------------------------------------------------------------

// PrepareInstructionRS

// required .llsf_msgs.RingColor ring_color = 1;
inline bool PrepareInstructionRS::has_ring_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareInstructionRS::set_has_ring_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareInstructionRS::clear_has_ring_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareInstructionRS::clear_ring_color() {
  ring_color_ = 1;
  clear_has_ring_color();
}
inline ::llsf_msgs::RingColor PrepareInstructionRS::ring_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionRS.ring_color)
  return static_cast< ::llsf_msgs::RingColor >(ring_color_);
}
inline void PrepareInstructionRS::set_ring_color(::llsf_msgs::RingColor value) {
  assert(::llsf_msgs::RingColor_IsValid(value));
  set_has_ring_color();
  ring_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionRS.ring_color)
}

// -------------------------------------------------------------------

// PrepareInstructionCS

// required .llsf_msgs.CSOp operation = 1;
inline bool PrepareInstructionCS::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareInstructionCS::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareInstructionCS::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareInstructionCS::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::llsf_msgs::CSOp PrepareInstructionCS::operation() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareInstructionCS.operation)
  return static_cast< ::llsf_msgs::CSOp >(operation_);
}
inline void PrepareInstructionCS::set_operation(::llsf_msgs::CSOp value) {
  assert(::llsf_msgs::CSOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareInstructionCS.operation)
}

// -------------------------------------------------------------------

// PrepareMachine

// required .llsf_msgs.Team team_color = 1;
inline bool PrepareMachine::has_team_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrepareMachine::set_has_team_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrepareMachine::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrepareMachine::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team PrepareMachine::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void PrepareMachine::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareMachine.team_color)
}

// required string machine = 2;
inline bool PrepareMachine::has_machine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareMachine::set_has_machine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareMachine::clear_has_machine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareMachine::clear_machine() {
  machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine();
}
inline const ::std::string& PrepareMachine::machine() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.machine)
  return machine_.GetNoArena();
}
inline void PrepareMachine::set_machine(const ::std::string& value) {
  set_has_machine();
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareMachine.machine)
}
#if LANG_CXX11
inline void PrepareMachine::set_machine(::std::string&& value) {
  set_has_machine();
  machine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.PrepareMachine.machine)
}
#endif
inline void PrepareMachine::set_machine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine();
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.PrepareMachine.machine)
}
inline void PrepareMachine::set_machine(const char* value, size_t size) {
  set_has_machine();
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.PrepareMachine.machine)
}
inline ::std::string* PrepareMachine::mutable_machine() {
  set_has_machine();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareMachine.machine)
  return machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareMachine::release_machine() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareMachine.machine)
  if (!has_machine()) {
    return NULL;
  }
  clear_has_machine();
  return machine_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareMachine::set_allocated_machine(::std::string* machine) {
  if (machine != NULL) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareMachine.machine)
}

// optional .llsf_msgs.PrepareInstructionBS instruction_bs = 4;
inline bool PrepareMachine::has_instruction_bs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrepareMachine::set_has_instruction_bs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrepareMachine::clear_has_instruction_bs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrepareMachine::clear_instruction_bs() {
  if (instruction_bs_ != NULL) instruction_bs_->Clear();
  clear_has_instruction_bs();
}
inline const ::llsf_msgs::PrepareInstructionBS& PrepareMachine::_internal_instruction_bs() const {
  return *instruction_bs_;
}
inline const ::llsf_msgs::PrepareInstructionBS& PrepareMachine::instruction_bs() const {
  const ::llsf_msgs::PrepareInstructionBS* p = instruction_bs_;
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.instruction_bs)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::PrepareInstructionBS*>(
      &::llsf_msgs::_PrepareInstructionBS_default_instance_);
}
inline ::llsf_msgs::PrepareInstructionBS* PrepareMachine::release_instruction_bs() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareMachine.instruction_bs)
  clear_has_instruction_bs();
  ::llsf_msgs::PrepareInstructionBS* temp = instruction_bs_;
  instruction_bs_ = NULL;
  return temp;
}
inline ::llsf_msgs::PrepareInstructionBS* PrepareMachine::mutable_instruction_bs() {
  set_has_instruction_bs();
  if (instruction_bs_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::PrepareInstructionBS>(GetArenaNoVirtual());
    instruction_bs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareMachine.instruction_bs)
  return instruction_bs_;
}
inline void PrepareMachine::set_allocated_instruction_bs(::llsf_msgs::PrepareInstructionBS* instruction_bs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instruction_bs_;
  }
  if (instruction_bs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instruction_bs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instruction_bs, submessage_arena);
    }
    set_has_instruction_bs();
  } else {
    clear_has_instruction_bs();
  }
  instruction_bs_ = instruction_bs;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareMachine.instruction_bs)
}

// optional .llsf_msgs.PrepareInstructionDS instruction_ds = 5;
inline bool PrepareMachine::has_instruction_ds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrepareMachine::set_has_instruction_ds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrepareMachine::clear_has_instruction_ds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrepareMachine::clear_instruction_ds() {
  if (instruction_ds_ != NULL) instruction_ds_->Clear();
  clear_has_instruction_ds();
}
inline const ::llsf_msgs::PrepareInstructionDS& PrepareMachine::_internal_instruction_ds() const {
  return *instruction_ds_;
}
inline const ::llsf_msgs::PrepareInstructionDS& PrepareMachine::instruction_ds() const {
  const ::llsf_msgs::PrepareInstructionDS* p = instruction_ds_;
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.instruction_ds)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::PrepareInstructionDS*>(
      &::llsf_msgs::_PrepareInstructionDS_default_instance_);
}
inline ::llsf_msgs::PrepareInstructionDS* PrepareMachine::release_instruction_ds() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareMachine.instruction_ds)
  clear_has_instruction_ds();
  ::llsf_msgs::PrepareInstructionDS* temp = instruction_ds_;
  instruction_ds_ = NULL;
  return temp;
}
inline ::llsf_msgs::PrepareInstructionDS* PrepareMachine::mutable_instruction_ds() {
  set_has_instruction_ds();
  if (instruction_ds_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::PrepareInstructionDS>(GetArenaNoVirtual());
    instruction_ds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareMachine.instruction_ds)
  return instruction_ds_;
}
inline void PrepareMachine::set_allocated_instruction_ds(::llsf_msgs::PrepareInstructionDS* instruction_ds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instruction_ds_;
  }
  if (instruction_ds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instruction_ds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instruction_ds, submessage_arena);
    }
    set_has_instruction_ds();
  } else {
    clear_has_instruction_ds();
  }
  instruction_ds_ = instruction_ds;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareMachine.instruction_ds)
}

// optional .llsf_msgs.PrepareInstructionSS instruction_ss = 8;
inline bool PrepareMachine::has_instruction_ss() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrepareMachine::set_has_instruction_ss() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrepareMachine::clear_has_instruction_ss() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrepareMachine::clear_instruction_ss() {
  if (instruction_ss_ != NULL) instruction_ss_->Clear();
  clear_has_instruction_ss();
}
inline const ::llsf_msgs::PrepareInstructionSS& PrepareMachine::_internal_instruction_ss() const {
  return *instruction_ss_;
}
inline const ::llsf_msgs::PrepareInstructionSS& PrepareMachine::instruction_ss() const {
  const ::llsf_msgs::PrepareInstructionSS* p = instruction_ss_;
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.instruction_ss)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::PrepareInstructionSS*>(
      &::llsf_msgs::_PrepareInstructionSS_default_instance_);
}
inline ::llsf_msgs::PrepareInstructionSS* PrepareMachine::release_instruction_ss() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareMachine.instruction_ss)
  clear_has_instruction_ss();
  ::llsf_msgs::PrepareInstructionSS* temp = instruction_ss_;
  instruction_ss_ = NULL;
  return temp;
}
inline ::llsf_msgs::PrepareInstructionSS* PrepareMachine::mutable_instruction_ss() {
  set_has_instruction_ss();
  if (instruction_ss_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::PrepareInstructionSS>(GetArenaNoVirtual());
    instruction_ss_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareMachine.instruction_ss)
  return instruction_ss_;
}
inline void PrepareMachine::set_allocated_instruction_ss(::llsf_msgs::PrepareInstructionSS* instruction_ss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instruction_ss_;
  }
  if (instruction_ss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instruction_ss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instruction_ss, submessage_arena);
    }
    set_has_instruction_ss();
  } else {
    clear_has_instruction_ss();
  }
  instruction_ss_ = instruction_ss;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareMachine.instruction_ss)
}

// optional .llsf_msgs.PrepareInstructionRS instruction_rs = 6;
inline bool PrepareMachine::has_instruction_rs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrepareMachine::set_has_instruction_rs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrepareMachine::clear_has_instruction_rs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrepareMachine::clear_instruction_rs() {
  if (instruction_rs_ != NULL) instruction_rs_->Clear();
  clear_has_instruction_rs();
}
inline const ::llsf_msgs::PrepareInstructionRS& PrepareMachine::_internal_instruction_rs() const {
  return *instruction_rs_;
}
inline const ::llsf_msgs::PrepareInstructionRS& PrepareMachine::instruction_rs() const {
  const ::llsf_msgs::PrepareInstructionRS* p = instruction_rs_;
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.instruction_rs)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::PrepareInstructionRS*>(
      &::llsf_msgs::_PrepareInstructionRS_default_instance_);
}
inline ::llsf_msgs::PrepareInstructionRS* PrepareMachine::release_instruction_rs() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareMachine.instruction_rs)
  clear_has_instruction_rs();
  ::llsf_msgs::PrepareInstructionRS* temp = instruction_rs_;
  instruction_rs_ = NULL;
  return temp;
}
inline ::llsf_msgs::PrepareInstructionRS* PrepareMachine::mutable_instruction_rs() {
  set_has_instruction_rs();
  if (instruction_rs_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::PrepareInstructionRS>(GetArenaNoVirtual());
    instruction_rs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareMachine.instruction_rs)
  return instruction_rs_;
}
inline void PrepareMachine::set_allocated_instruction_rs(::llsf_msgs::PrepareInstructionRS* instruction_rs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instruction_rs_;
  }
  if (instruction_rs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instruction_rs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instruction_rs, submessage_arena);
    }
    set_has_instruction_rs();
  } else {
    clear_has_instruction_rs();
  }
  instruction_rs_ = instruction_rs;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareMachine.instruction_rs)
}

// optional .llsf_msgs.PrepareInstructionCS instruction_cs = 7;
inline bool PrepareMachine::has_instruction_cs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrepareMachine::set_has_instruction_cs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrepareMachine::clear_has_instruction_cs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrepareMachine::clear_instruction_cs() {
  if (instruction_cs_ != NULL) instruction_cs_->Clear();
  clear_has_instruction_cs();
}
inline const ::llsf_msgs::PrepareInstructionCS& PrepareMachine::_internal_instruction_cs() const {
  return *instruction_cs_;
}
inline const ::llsf_msgs::PrepareInstructionCS& PrepareMachine::instruction_cs() const {
  const ::llsf_msgs::PrepareInstructionCS* p = instruction_cs_;
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.instruction_cs)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::PrepareInstructionCS*>(
      &::llsf_msgs::_PrepareInstructionCS_default_instance_);
}
inline ::llsf_msgs::PrepareInstructionCS* PrepareMachine::release_instruction_cs() {
  // @@protoc_insertion_point(field_release:llsf_msgs.PrepareMachine.instruction_cs)
  clear_has_instruction_cs();
  ::llsf_msgs::PrepareInstructionCS* temp = instruction_cs_;
  instruction_cs_ = NULL;
  return temp;
}
inline ::llsf_msgs::PrepareInstructionCS* PrepareMachine::mutable_instruction_cs() {
  set_has_instruction_cs();
  if (instruction_cs_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::PrepareInstructionCS>(GetArenaNoVirtual());
    instruction_cs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.PrepareMachine.instruction_cs)
  return instruction_cs_;
}
inline void PrepareMachine::set_allocated_instruction_cs(::llsf_msgs::PrepareInstructionCS* instruction_cs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete instruction_cs_;
  }
  if (instruction_cs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      instruction_cs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instruction_cs, submessage_arena);
    }
    set_has_instruction_cs();
  } else {
    clear_has_instruction_cs();
  }
  instruction_cs_ = instruction_cs;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.PrepareMachine.instruction_cs)
}

// optional uint64 sent_at = 15;
inline bool PrepareMachine::has_sent_at() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrepareMachine::set_has_sent_at() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrepareMachine::clear_has_sent_at() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrepareMachine::clear_sent_at() {
  sent_at_ = GOOGLE_ULONGLONG(0);
  clear_has_sent_at();
}
inline ::google::protobuf::uint64 PrepareMachine::sent_at() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.PrepareMachine.sent_at)
  return sent_at_;
}
inline void PrepareMachine::set_sent_at(::google::protobuf::uint64 value) {
  set_has_sent_at();
  sent_at_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.PrepareMachine.sent_at)
}

// -------------------------------------------------------------------

// ResetMachine

// required .llsf_msgs.Team team_color = 1;
inline bool ResetMachine::has_team_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResetMachine::set_has_team_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResetMachine::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResetMachine::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team ResetMachine::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.ResetMachine.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void ResetMachine::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.ResetMachine.team_color)
}

// required string machine = 2;
inline bool ResetMachine::has_machine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetMachine::set_has_machine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetMachine::clear_has_machine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetMachine::clear_machine() {
  machine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine();
}
inline const ::std::string& ResetMachine::machine() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.ResetMachine.machine)
  return machine_.GetNoArena();
}
inline void ResetMachine::set_machine(const ::std::string& value) {
  set_has_machine();
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.ResetMachine.machine)
}
#if LANG_CXX11
inline void ResetMachine::set_machine(::std::string&& value) {
  set_has_machine();
  machine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.ResetMachine.machine)
}
#endif
inline void ResetMachine::set_machine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine();
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.ResetMachine.machine)
}
inline void ResetMachine::set_machine(const char* value, size_t size) {
  set_has_machine();
  machine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.ResetMachine.machine)
}
inline ::std::string* ResetMachine::mutable_machine() {
  set_has_machine();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.ResetMachine.machine)
  return machine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetMachine::release_machine() {
  // @@protoc_insertion_point(field_release:llsf_msgs.ResetMachine.machine)
  if (!has_machine()) {
    return NULL;
  }
  clear_has_machine();
  return machine_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetMachine::set_allocated_machine(::std::string* machine) {
  if (machine != NULL) {
    set_has_machine();
  } else {
    clear_has_machine();
  }
  machine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.ResetMachine.machine)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::PrepareMachine_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::PrepareMachine_CompType>() {
  return ::llsf_msgs::PrepareMachine_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::ResetMachine_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::ResetMachine_CompType>() {
  return ::llsf_msgs::ResetMachine_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::MachineSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineSide>() {
  return ::llsf_msgs::MachineSide_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MachineInstructions_2eproto
