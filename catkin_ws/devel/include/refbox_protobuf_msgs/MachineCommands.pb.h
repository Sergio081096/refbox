// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineCommands.proto

#ifndef PROTOBUF_INCLUDED_MachineCommands_2eproto
#define PROTOBUF_INCLUDED_MachineCommands_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MachineInfo.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MachineCommands_2eproto 

namespace protobuf_MachineCommands_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MachineCommands_2eproto
namespace llsf_msgs {
class MachineAddBase;
class MachineAddBaseDefaultTypeInternal;
extern MachineAddBaseDefaultTypeInternal _MachineAddBase_default_instance_;
class SetMachineLights;
class SetMachineLightsDefaultTypeInternal;
extern SetMachineLightsDefaultTypeInternal _SetMachineLights_default_instance_;
class SetMachineState;
class SetMachineStateDefaultTypeInternal;
extern SetMachineStateDefaultTypeInternal _SetMachineState_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::MachineAddBase* Arena::CreateMaybeMessage<::llsf_msgs::MachineAddBase>(Arena*);
template<> ::llsf_msgs::SetMachineLights* Arena::CreateMaybeMessage<::llsf_msgs::SetMachineLights>(Arena*);
template<> ::llsf_msgs::SetMachineState* Arena::CreateMaybeMessage<::llsf_msgs::SetMachineState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum SetMachineState_CompType {
  SetMachineState_CompType_COMP_ID = 2000,
  SetMachineState_CompType_MSG_TYPE = 17
};
bool SetMachineState_CompType_IsValid(int value);
const SetMachineState_CompType SetMachineState_CompType_CompType_MIN = SetMachineState_CompType_MSG_TYPE;
const SetMachineState_CompType SetMachineState_CompType_CompType_MAX = SetMachineState_CompType_COMP_ID;
const int SetMachineState_CompType_CompType_ARRAYSIZE = SetMachineState_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetMachineState_CompType_descriptor();
inline const ::std::string& SetMachineState_CompType_Name(SetMachineState_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetMachineState_CompType_descriptor(), value);
}
inline bool SetMachineState_CompType_Parse(
    const ::std::string& name, SetMachineState_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetMachineState_CompType>(
    SetMachineState_CompType_descriptor(), name, value);
}
enum MachineAddBase_CompType {
  MachineAddBase_CompType_COMP_ID = 2000,
  MachineAddBase_CompType_MSG_TYPE = 18
};
bool MachineAddBase_CompType_IsValid(int value);
const MachineAddBase_CompType MachineAddBase_CompType_CompType_MIN = MachineAddBase_CompType_MSG_TYPE;
const MachineAddBase_CompType MachineAddBase_CompType_CompType_MAX = MachineAddBase_CompType_COMP_ID;
const int MachineAddBase_CompType_CompType_ARRAYSIZE = MachineAddBase_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineAddBase_CompType_descriptor();
inline const ::std::string& MachineAddBase_CompType_Name(MachineAddBase_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineAddBase_CompType_descriptor(), value);
}
inline bool MachineAddBase_CompType_Parse(
    const ::std::string& name, MachineAddBase_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineAddBase_CompType>(
    MachineAddBase_CompType_descriptor(), name, value);
}
enum SetMachineLights_CompType {
  SetMachineLights_CompType_COMP_ID = 2000,
  SetMachineLights_CompType_MSG_TYPE = 19
};
bool SetMachineLights_CompType_IsValid(int value);
const SetMachineLights_CompType SetMachineLights_CompType_CompType_MIN = SetMachineLights_CompType_MSG_TYPE;
const SetMachineLights_CompType SetMachineLights_CompType_CompType_MAX = SetMachineLights_CompType_COMP_ID;
const int SetMachineLights_CompType_CompType_ARRAYSIZE = SetMachineLights_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetMachineLights_CompType_descriptor();
inline const ::std::string& SetMachineLights_CompType_Name(SetMachineLights_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetMachineLights_CompType_descriptor(), value);
}
inline bool SetMachineLights_CompType_Parse(
    const ::std::string& name, SetMachineLights_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetMachineLights_CompType>(
    SetMachineLights_CompType_descriptor(), name, value);
}
enum MachineState {
  IDLE = 1,
  AVAILABLE = 2,
  PROCESSED = 3,
  DELIVERED = 4,
  RETRIEVED = 5,
  RESET = 15
};
bool MachineState_IsValid(int value);
const MachineState MachineState_MIN = IDLE;
const MachineState MachineState_MAX = RESET;
const int MachineState_ARRAYSIZE = MachineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineState_descriptor();
inline const ::std::string& MachineState_Name(MachineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineState_descriptor(), value);
}
inline bool MachineState_Parse(
    const ::std::string& name, MachineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineState>(
    MachineState_descriptor(), name, value);
}
// ===================================================================

class SetMachineState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.SetMachineState) */ {
 public:
  SetMachineState();
  virtual ~SetMachineState();

  SetMachineState(const SetMachineState& from);

  inline SetMachineState& operator=(const SetMachineState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMachineState(SetMachineState&& from) noexcept
    : SetMachineState() {
    *this = ::std::move(from);
  }

  inline SetMachineState& operator=(SetMachineState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMachineState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMachineState* internal_default_instance() {
    return reinterpret_cast<const SetMachineState*>(
               &_SetMachineState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SetMachineState* other);
  friend void swap(SetMachineState& a, SetMachineState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMachineState* New() const final {
    return CreateMaybeMessage<SetMachineState>(NULL);
  }

  SetMachineState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetMachineState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetMachineState& from);
  void MergeFrom(const SetMachineState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMachineState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetMachineState_CompType CompType;
  static const CompType COMP_ID =
    SetMachineState_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    SetMachineState_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetMachineState_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetMachineState_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetMachineState_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetMachineState_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetMachineState_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetMachineState_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetMachineState_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string machine_name = 1;
  bool has_machine_name() const;
  void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  const ::std::string& machine_name() const;
  void set_machine_name(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_name(::std::string&& value);
  #endif
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  ::std::string* mutable_machine_name();
  ::std::string* release_machine_name();
  void set_allocated_machine_name(::std::string* machine_name);

  // required .llsf_msgs.MachineState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::llsf_msgs::MachineState state() const;
  void set_state(::llsf_msgs::MachineState value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.SetMachineState)
 private:
  void set_has_machine_name();
  void clear_has_machine_name();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_;
  int state_;
  friend struct ::protobuf_MachineCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MachineAddBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.MachineAddBase) */ {
 public:
  MachineAddBase();
  virtual ~MachineAddBase();

  MachineAddBase(const MachineAddBase& from);

  inline MachineAddBase& operator=(const MachineAddBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MachineAddBase(MachineAddBase&& from) noexcept
    : MachineAddBase() {
    *this = ::std::move(from);
  }

  inline MachineAddBase& operator=(MachineAddBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineAddBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MachineAddBase* internal_default_instance() {
    return reinterpret_cast<const MachineAddBase*>(
               &_MachineAddBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MachineAddBase* other);
  friend void swap(MachineAddBase& a, MachineAddBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MachineAddBase* New() const final {
    return CreateMaybeMessage<MachineAddBase>(NULL);
  }

  MachineAddBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MachineAddBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MachineAddBase& from);
  void MergeFrom(const MachineAddBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineAddBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MachineAddBase_CompType CompType;
  static const CompType COMP_ID =
    MachineAddBase_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    MachineAddBase_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineAddBase_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineAddBase_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineAddBase_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineAddBase_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineAddBase_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineAddBase_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineAddBase_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string machine_name = 1;
  bool has_machine_name() const;
  void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  const ::std::string& machine_name() const;
  void set_machine_name(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_name(::std::string&& value);
  #endif
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  ::std::string* mutable_machine_name();
  ::std::string* release_machine_name();
  void set_allocated_machine_name(::std::string* machine_name);

  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineAddBase)
 private:
  void set_has_machine_name();
  void clear_has_machine_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_;
  friend struct ::protobuf_MachineCommands_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetMachineLights : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.SetMachineLights) */ {
 public:
  SetMachineLights();
  virtual ~SetMachineLights();

  SetMachineLights(const SetMachineLights& from);

  inline SetMachineLights& operator=(const SetMachineLights& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMachineLights(SetMachineLights&& from) noexcept
    : SetMachineLights() {
    *this = ::std::move(from);
  }

  inline SetMachineLights& operator=(SetMachineLights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMachineLights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMachineLights* internal_default_instance() {
    return reinterpret_cast<const SetMachineLights*>(
               &_SetMachineLights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetMachineLights* other);
  friend void swap(SetMachineLights& a, SetMachineLights& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMachineLights* New() const final {
    return CreateMaybeMessage<SetMachineLights>(NULL);
  }

  SetMachineLights* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetMachineLights>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetMachineLights& from);
  void MergeFrom(const SetMachineLights& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMachineLights* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetMachineLights_CompType CompType;
  static const CompType COMP_ID =
    SetMachineLights_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    SetMachineLights_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetMachineLights_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetMachineLights_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetMachineLights_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetMachineLights_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetMachineLights_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetMachineLights_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetMachineLights_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.LightSpec lights = 2;
  int lights_size() const;
  void clear_lights();
  static const int kLightsFieldNumber = 2;
  ::llsf_msgs::LightSpec* mutable_lights(int index);
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
      mutable_lights();
  const ::llsf_msgs::LightSpec& lights(int index) const;
  ::llsf_msgs::LightSpec* add_lights();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
      lights() const;

  // required string machine_name = 1;
  bool has_machine_name() const;
  void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  const ::std::string& machine_name() const;
  void set_machine_name(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_name(::std::string&& value);
  #endif
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  ::std::string* mutable_machine_name();
  ::std::string* release_machine_name();
  void set_allocated_machine_name(::std::string* machine_name);

  // @@protoc_insertion_point(class_scope:llsf_msgs.SetMachineLights)
 private:
  void set_has_machine_name();
  void clear_has_machine_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec > lights_;
  ::google::protobuf::internal::ArenaStringPtr machine_name_;
  friend struct ::protobuf_MachineCommands_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetMachineState

// required string machine_name = 1;
inline bool SetMachineState::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetMachineState::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetMachineState::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetMachineState::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
inline const ::std::string& SetMachineState::machine_name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetMachineState.machine_name)
  return machine_name_.GetNoArena();
}
inline void SetMachineState::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.SetMachineState.machine_name)
}
#if LANG_CXX11
inline void SetMachineState::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.SetMachineState.machine_name)
}
#endif
inline void SetMachineState::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.SetMachineState.machine_name)
}
inline void SetMachineState::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.SetMachineState.machine_name)
}
inline ::std::string* SetMachineState::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.SetMachineState.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMachineState::release_machine_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.SetMachineState.machine_name)
  if (!has_machine_name()) {
    return NULL;
  }
  clear_has_machine_name();
  return machine_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMachineState::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.SetMachineState.machine_name)
}

// required .llsf_msgs.MachineState state = 2;
inline bool SetMachineState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetMachineState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetMachineState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetMachineState::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::llsf_msgs::MachineState SetMachineState::state() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetMachineState.state)
  return static_cast< ::llsf_msgs::MachineState >(state_);
}
inline void SetMachineState::set_state(::llsf_msgs::MachineState value) {
  assert(::llsf_msgs::MachineState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.SetMachineState.state)
}

// -------------------------------------------------------------------

// MachineAddBase

// required string machine_name = 1;
inline bool MachineAddBase::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineAddBase::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineAddBase::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineAddBase::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
inline const ::std::string& MachineAddBase::machine_name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.MachineAddBase.machine_name)
  return machine_name_.GetNoArena();
}
inline void MachineAddBase::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.MachineAddBase.machine_name)
}
#if LANG_CXX11
inline void MachineAddBase::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.MachineAddBase.machine_name)
}
#endif
inline void MachineAddBase::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.MachineAddBase.machine_name)
}
inline void MachineAddBase::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.MachineAddBase.machine_name)
}
inline ::std::string* MachineAddBase::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.MachineAddBase.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MachineAddBase::release_machine_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.MachineAddBase.machine_name)
  if (!has_machine_name()) {
    return NULL;
  }
  clear_has_machine_name();
  return machine_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MachineAddBase::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.MachineAddBase.machine_name)
}

// -------------------------------------------------------------------

// SetMachineLights

// required string machine_name = 1;
inline bool SetMachineLights::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetMachineLights::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetMachineLights::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetMachineLights::clear_machine_name() {
  machine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_machine_name();
}
inline const ::std::string& SetMachineLights::machine_name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetMachineLights.machine_name)
  return machine_name_.GetNoArena();
}
inline void SetMachineLights::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.SetMachineLights.machine_name)
}
#if LANG_CXX11
inline void SetMachineLights::set_machine_name(::std::string&& value) {
  set_has_machine_name();
  machine_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.SetMachineLights.machine_name)
}
#endif
inline void SetMachineLights::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.SetMachineLights.machine_name)
}
inline void SetMachineLights::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  machine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.SetMachineLights.machine_name)
}
inline ::std::string* SetMachineLights::mutable_machine_name() {
  set_has_machine_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.SetMachineLights.machine_name)
  return machine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMachineLights::release_machine_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.SetMachineLights.machine_name)
  if (!has_machine_name()) {
    return NULL;
  }
  clear_has_machine_name();
  return machine_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMachineLights::set_allocated_machine_name(::std::string* machine_name) {
  if (machine_name != NULL) {
    set_has_machine_name();
  } else {
    clear_has_machine_name();
  }
  machine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.SetMachineLights.machine_name)
}

// repeated .llsf_msgs.LightSpec lights = 2;
inline int SetMachineLights::lights_size() const {
  return lights_.size();
}
inline ::llsf_msgs::LightSpec* SetMachineLights::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.SetMachineLights.lights)
  return lights_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
SetMachineLights::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.SetMachineLights.lights)
  return &lights_;
}
inline const ::llsf_msgs::LightSpec& SetMachineLights::lights(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetMachineLights.lights)
  return lights_.Get(index);
}
inline ::llsf_msgs::LightSpec* SetMachineLights::add_lights() {
  // @@protoc_insertion_point(field_add:llsf_msgs.SetMachineLights.lights)
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
SetMachineLights::lights() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.SetMachineLights.lights)
  return lights_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::SetMachineState_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetMachineState_CompType>() {
  return ::llsf_msgs::SetMachineState_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::MachineAddBase_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineAddBase_CompType>() {
  return ::llsf_msgs::MachineAddBase_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::SetMachineLights_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetMachineLights_CompType>() {
  return ::llsf_msgs::SetMachineLights_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::MachineState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineState>() {
  return ::llsf_msgs::MachineState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MachineCommands_2eproto
