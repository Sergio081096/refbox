// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#ifndef PROTOBUF_INCLUDED_GameInfo_2eproto
#define PROTOBUF_INCLUDED_GameInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Team.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameInfo_2eproto 

namespace protobuf_GameInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameInfo_2eproto
namespace llsf_msgs {
class GameInfo;
class GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class SetTeamName;
class SetTeamNameDefaultTypeInternal;
extern SetTeamNameDefaultTypeInternal _SetTeamName_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::GameInfo* Arena::CreateMaybeMessage<::llsf_msgs::GameInfo>(Arena*);
template<> ::llsf_msgs::SetTeamName* Arena::CreateMaybeMessage<::llsf_msgs::SetTeamName>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum GameInfo_CompType {
  GameInfo_CompType_COMP_ID = 2000,
  GameInfo_CompType_MSG_TYPE = 81
};
bool GameInfo_CompType_IsValid(int value);
const GameInfo_CompType GameInfo_CompType_CompType_MIN = GameInfo_CompType_MSG_TYPE;
const GameInfo_CompType GameInfo_CompType_CompType_MAX = GameInfo_CompType_COMP_ID;
const int GameInfo_CompType_CompType_ARRAYSIZE = GameInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameInfo_CompType_descriptor();
inline const ::std::string& GameInfo_CompType_Name(GameInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameInfo_CompType_descriptor(), value);
}
inline bool GameInfo_CompType_Parse(
    const ::std::string& name, GameInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameInfo_CompType>(
    GameInfo_CompType_descriptor(), name, value);
}
enum SetTeamName_CompType {
  SetTeamName_CompType_COMP_ID = 2000,
  SetTeamName_CompType_MSG_TYPE = 82
};
bool SetTeamName_CompType_IsValid(int value);
const SetTeamName_CompType SetTeamName_CompType_CompType_MIN = SetTeamName_CompType_MSG_TYPE;
const SetTeamName_CompType SetTeamName_CompType_CompType_MAX = SetTeamName_CompType_COMP_ID;
const int SetTeamName_CompType_CompType_ARRAYSIZE = SetTeamName_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetTeamName_CompType_descriptor();
inline const ::std::string& SetTeamName_CompType_Name(SetTeamName_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetTeamName_CompType_descriptor(), value);
}
inline bool SetTeamName_CompType_Parse(
    const ::std::string& name, SetTeamName_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetTeamName_CompType>(
    SetTeamName_CompType_descriptor(), name, value);
}
// ===================================================================

class GameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.GameInfo) */ {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInfo(GameInfo&& from) noexcept
    : GameInfo() {
    *this = ::std::move(from);
  }

  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
               &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameInfo* other);
  friend void swap(GameInfo& a, GameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInfo* New() const final {
    return CreateMaybeMessage<GameInfo>(NULL);
  }

  GameInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameInfo_CompType CompType;
  static const CompType COMP_ID =
    GameInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    GameInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return GameInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    GameInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    GameInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    GameInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return GameInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return GameInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return GameInfo_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string known_teams = 1;
  int known_teams_size() const;
  void clear_known_teams();
  static const int kKnownTeamsFieldNumber = 1;
  const ::std::string& known_teams(int index) const;
  ::std::string* mutable_known_teams(int index);
  void set_known_teams(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_known_teams(int index, ::std::string&& value);
  #endif
  void set_known_teams(int index, const char* value);
  void set_known_teams(int index, const char* value, size_t size);
  ::std::string* add_known_teams();
  void add_known_teams(const ::std::string& value);
  #if LANG_CXX11
  void add_known_teams(::std::string&& value);
  #endif
  void add_known_teams(const char* value);
  void add_known_teams(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& known_teams() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_known_teams();

  // @@protoc_insertion_point(class_scope:llsf_msgs.GameInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> known_teams_;
  friend struct ::protobuf_GameInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTeamName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.SetTeamName) */ {
 public:
  SetTeamName();
  virtual ~SetTeamName();

  SetTeamName(const SetTeamName& from);

  inline SetTeamName& operator=(const SetTeamName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTeamName(SetTeamName&& from) noexcept
    : SetTeamName() {
    *this = ::std::move(from);
  }

  inline SetTeamName& operator=(SetTeamName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTeamName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTeamName* internal_default_instance() {
    return reinterpret_cast<const SetTeamName*>(
               &_SetTeamName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetTeamName* other);
  friend void swap(SetTeamName& a, SetTeamName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTeamName* New() const final {
    return CreateMaybeMessage<SetTeamName>(NULL);
  }

  SetTeamName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTeamName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTeamName& from);
  void MergeFrom(const SetTeamName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTeamName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetTeamName_CompType CompType;
  static const CompType COMP_ID =
    SetTeamName_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    SetTeamName_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetTeamName_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetTeamName_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetTeamName_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetTeamName_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetTeamName_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetTeamName_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetTeamName_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string team_name = 1;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name(::std::string&& value);
  #endif
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // required .llsf_msgs.Team team_color = 2;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.SetTeamName)
 private:
  void set_has_team_name();
  void clear_has_team_name();
  void set_has_team_color();
  void clear_has_team_color();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  int team_color_;
  friend struct ::protobuf_GameInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameInfo

// repeated string known_teams = 1;
inline int GameInfo::known_teams_size() const {
  return known_teams_.size();
}
inline void GameInfo::clear_known_teams() {
  known_teams_.Clear();
}
inline const ::std::string& GameInfo::known_teams(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameInfo.known_teams)
  return known_teams_.Get(index);
}
inline ::std::string* GameInfo::mutable_known_teams(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.GameInfo.known_teams)
  return known_teams_.Mutable(index);
}
inline void GameInfo::set_known_teams(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:llsf_msgs.GameInfo.known_teams)
  known_teams_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GameInfo::set_known_teams(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:llsf_msgs.GameInfo.known_teams)
  known_teams_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GameInfo::set_known_teams(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  known_teams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:llsf_msgs.GameInfo.known_teams)
}
inline void GameInfo::set_known_teams(int index, const char* value, size_t size) {
  known_teams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.GameInfo.known_teams)
}
inline ::std::string* GameInfo::add_known_teams() {
  // @@protoc_insertion_point(field_add_mutable:llsf_msgs.GameInfo.known_teams)
  return known_teams_.Add();
}
inline void GameInfo::add_known_teams(const ::std::string& value) {
  known_teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:llsf_msgs.GameInfo.known_teams)
}
#if LANG_CXX11
inline void GameInfo::add_known_teams(::std::string&& value) {
  known_teams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:llsf_msgs.GameInfo.known_teams)
}
#endif
inline void GameInfo::add_known_teams(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  known_teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:llsf_msgs.GameInfo.known_teams)
}
inline void GameInfo::add_known_teams(const char* value, size_t size) {
  known_teams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:llsf_msgs.GameInfo.known_teams)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GameInfo::known_teams() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.GameInfo.known_teams)
  return known_teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GameInfo::mutable_known_teams() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.GameInfo.known_teams)
  return &known_teams_;
}

// -------------------------------------------------------------------

// SetTeamName

// required string team_name = 1;
inline bool SetTeamName::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetTeamName::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetTeamName::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetTeamName::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& SetTeamName::team_name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetTeamName.team_name)
  return team_name_.GetNoArena();
}
inline void SetTeamName::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.SetTeamName.team_name)
}
#if LANG_CXX11
inline void SetTeamName::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.SetTeamName.team_name)
}
#endif
inline void SetTeamName::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.SetTeamName.team_name)
}
inline void SetTeamName::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.SetTeamName.team_name)
}
inline ::std::string* SetTeamName::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.SetTeamName.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTeamName::release_team_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.SetTeamName.team_name)
  if (!has_team_name()) {
    return NULL;
  }
  clear_has_team_name();
  return team_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTeamName::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.SetTeamName.team_name)
}

// required .llsf_msgs.Team team_color = 2;
inline bool SetTeamName::has_team_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetTeamName::set_has_team_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetTeamName::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetTeamName::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team SetTeamName::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetTeamName.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void SetTeamName::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.SetTeamName.team_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::GameInfo_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameInfo_CompType>() {
  return ::llsf_msgs::GameInfo_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::SetTeamName_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetTeamName_CompType>() {
  return ::llsf_msgs::SetTeamName_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameInfo_2eproto
