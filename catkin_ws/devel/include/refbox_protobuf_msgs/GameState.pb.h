// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameState.proto

#ifndef PROTOBUF_INCLUDED_GameState_2eproto
#define PROTOBUF_INCLUDED_GameState_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GameState_2eproto 

namespace protobuf_GameState_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GameState_2eproto
namespace llsf_msgs {
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class RandomizeField;
class RandomizeFieldDefaultTypeInternal;
extern RandomizeFieldDefaultTypeInternal _RandomizeField_default_instance_;
class SetGamePhase;
class SetGamePhaseDefaultTypeInternal;
extern SetGamePhaseDefaultTypeInternal _SetGamePhase_default_instance_;
class SetGameState;
class SetGameStateDefaultTypeInternal;
extern SetGameStateDefaultTypeInternal _SetGameState_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::GameState* Arena::CreateMaybeMessage<::llsf_msgs::GameState>(Arena*);
template<> ::llsf_msgs::RandomizeField* Arena::CreateMaybeMessage<::llsf_msgs::RandomizeField>(Arena*);
template<> ::llsf_msgs::SetGamePhase* Arena::CreateMaybeMessage<::llsf_msgs::SetGamePhase>(Arena*);
template<> ::llsf_msgs::SetGameState* Arena::CreateMaybeMessage<::llsf_msgs::SetGameState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum GameState_CompType {
  GameState_CompType_COMP_ID = 2000,
  GameState_CompType_MSG_TYPE = 20
};
bool GameState_CompType_IsValid(int value);
const GameState_CompType GameState_CompType_CompType_MIN = GameState_CompType_MSG_TYPE;
const GameState_CompType GameState_CompType_CompType_MAX = GameState_CompType_COMP_ID;
const int GameState_CompType_CompType_ARRAYSIZE = GameState_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_CompType_descriptor();
inline const ::std::string& GameState_CompType_Name(GameState_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_CompType_descriptor(), value);
}
inline bool GameState_CompType_Parse(
    const ::std::string& name, GameState_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_CompType>(
    GameState_CompType_descriptor(), name, value);
}
enum GameState_State {
  GameState_State_INIT = 0,
  GameState_State_WAIT_START = 1,
  GameState_State_RUNNING = 2,
  GameState_State_PAUSED = 3
};
bool GameState_State_IsValid(int value);
const GameState_State GameState_State_State_MIN = GameState_State_INIT;
const GameState_State GameState_State_State_MAX = GameState_State_PAUSED;
const int GameState_State_State_ARRAYSIZE = GameState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_State_descriptor();
inline const ::std::string& GameState_State_Name(GameState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_State_descriptor(), value);
}
inline bool GameState_State_Parse(
    const ::std::string& name, GameState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_State>(
    GameState_State_descriptor(), name, value);
}
enum GameState_Phase {
  GameState_Phase_PRE_GAME = 0,
  GameState_Phase_SETUP = 10,
  GameState_Phase_EXPLORATION = 20,
  GameState_Phase_PRODUCTION = 30,
  GameState_Phase_POST_GAME = 40
};
bool GameState_Phase_IsValid(int value);
const GameState_Phase GameState_Phase_Phase_MIN = GameState_Phase_PRE_GAME;
const GameState_Phase GameState_Phase_Phase_MAX = GameState_Phase_POST_GAME;
const int GameState_Phase_Phase_ARRAYSIZE = GameState_Phase_Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_Phase_descriptor();
inline const ::std::string& GameState_Phase_Name(GameState_Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_Phase_descriptor(), value);
}
inline bool GameState_Phase_Parse(
    const ::std::string& name, GameState_Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_Phase>(
    GameState_Phase_descriptor(), name, value);
}
enum SetGameState_CompType {
  SetGameState_CompType_COMP_ID = 2000,
  SetGameState_CompType_MSG_TYPE = 21
};
bool SetGameState_CompType_IsValid(int value);
const SetGameState_CompType SetGameState_CompType_CompType_MIN = SetGameState_CompType_MSG_TYPE;
const SetGameState_CompType SetGameState_CompType_CompType_MAX = SetGameState_CompType_COMP_ID;
const int SetGameState_CompType_CompType_ARRAYSIZE = SetGameState_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetGameState_CompType_descriptor();
inline const ::std::string& SetGameState_CompType_Name(SetGameState_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetGameState_CompType_descriptor(), value);
}
inline bool SetGameState_CompType_Parse(
    const ::std::string& name, SetGameState_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetGameState_CompType>(
    SetGameState_CompType_descriptor(), name, value);
}
enum SetGamePhase_CompType {
  SetGamePhase_CompType_COMP_ID = 2000,
  SetGamePhase_CompType_MSG_TYPE = 22
};
bool SetGamePhase_CompType_IsValid(int value);
const SetGamePhase_CompType SetGamePhase_CompType_CompType_MIN = SetGamePhase_CompType_MSG_TYPE;
const SetGamePhase_CompType SetGamePhase_CompType_CompType_MAX = SetGamePhase_CompType_COMP_ID;
const int SetGamePhase_CompType_CompType_ARRAYSIZE = SetGamePhase_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetGamePhase_CompType_descriptor();
inline const ::std::string& SetGamePhase_CompType_Name(SetGamePhase_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetGamePhase_CompType_descriptor(), value);
}
inline bool SetGamePhase_CompType_Parse(
    const ::std::string& name, SetGamePhase_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetGamePhase_CompType>(
    SetGamePhase_CompType_descriptor(), name, value);
}
enum RandomizeField_CompType {
  RandomizeField_CompType_COMP_ID = 2000,
  RandomizeField_CompType_MSG_TYPE = 23
};
bool RandomizeField_CompType_IsValid(int value);
const RandomizeField_CompType RandomizeField_CompType_CompType_MIN = RandomizeField_CompType_MSG_TYPE;
const RandomizeField_CompType RandomizeField_CompType_CompType_MAX = RandomizeField_CompType_COMP_ID;
const int RandomizeField_CompType_CompType_ARRAYSIZE = RandomizeField_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RandomizeField_CompType_descriptor();
inline const ::std::string& RandomizeField_CompType_Name(RandomizeField_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RandomizeField_CompType_descriptor(), value);
}
inline bool RandomizeField_CompType_Parse(
    const ::std::string& name, RandomizeField_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RandomizeField_CompType>(
    RandomizeField_CompType_descriptor(), name, value);
}
// ===================================================================

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameState_CompType CompType;
  static const CompType COMP_ID =
    GameState_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    GameState_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return GameState_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    GameState_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    GameState_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    GameState_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return GameState_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return GameState_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return GameState_CompType_Parse(name, value);
  }

  typedef GameState_State State;
  static const State INIT =
    GameState_State_INIT;
  static const State WAIT_START =
    GameState_State_WAIT_START;
  static const State RUNNING =
    GameState_State_RUNNING;
  static const State PAUSED =
    GameState_State_PAUSED;
  static inline bool State_IsValid(int value) {
    return GameState_State_IsValid(value);
  }
  static const State State_MIN =
    GameState_State_State_MIN;
  static const State State_MAX =
    GameState_State_State_MAX;
  static const int State_ARRAYSIZE =
    GameState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return GameState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return GameState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return GameState_State_Parse(name, value);
  }

  typedef GameState_Phase Phase;
  static const Phase PRE_GAME =
    GameState_Phase_PRE_GAME;
  static const Phase SETUP =
    GameState_Phase_SETUP;
  static const Phase EXPLORATION =
    GameState_Phase_EXPLORATION;
  static const Phase PRODUCTION =
    GameState_Phase_PRODUCTION;
  static const Phase POST_GAME =
    GameState_Phase_POST_GAME;
  static inline bool Phase_IsValid(int value) {
    return GameState_Phase_IsValid(value);
  }
  static const Phase Phase_MIN =
    GameState_Phase_Phase_MIN;
  static const Phase Phase_MAX =
    GameState_Phase_Phase_MAX;
  static const int Phase_ARRAYSIZE =
    GameState_Phase_Phase_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Phase_descriptor() {
    return GameState_Phase_descriptor();
  }
  static inline const ::std::string& Phase_Name(Phase value) {
    return GameState_Phase_Name(value);
  }
  static inline bool Phase_Parse(const ::std::string& name,
      Phase* value) {
    return GameState_Phase_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string team_cyan = 6;
  bool has_team_cyan() const;
  void clear_team_cyan();
  static const int kTeamCyanFieldNumber = 6;
  const ::std::string& team_cyan() const;
  void set_team_cyan(const ::std::string& value);
  #if LANG_CXX11
  void set_team_cyan(::std::string&& value);
  #endif
  void set_team_cyan(const char* value);
  void set_team_cyan(const char* value, size_t size);
  ::std::string* mutable_team_cyan();
  ::std::string* release_team_cyan();
  void set_allocated_team_cyan(::std::string* team_cyan);

  // optional string team_magenta = 9;
  bool has_team_magenta() const;
  void clear_team_magenta();
  static const int kTeamMagentaFieldNumber = 9;
  const ::std::string& team_magenta() const;
  void set_team_magenta(const ::std::string& value);
  #if LANG_CXX11
  void set_team_magenta(::std::string&& value);
  #endif
  void set_team_magenta(const char* value);
  void set_team_magenta(const char* value, size_t size);
  ::std::string* mutable_team_magenta();
  ::std::string* release_team_magenta();
  void set_allocated_team_magenta(::std::string* team_magenta);

  // required .llsf_msgs.Time game_time = 1;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 1;
  private:
  const ::llsf_msgs::Time& _internal_game_time() const;
  public:
  const ::llsf_msgs::Time& game_time() const;
  ::llsf_msgs::Time* release_game_time();
  ::llsf_msgs::Time* mutable_game_time();
  void set_allocated_game_time(::llsf_msgs::Time* game_time);

  // required .llsf_msgs.GameState.State state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::llsf_msgs::GameState_State state() const;
  void set_state(::llsf_msgs::GameState_State value);

  // required .llsf_msgs.GameState.Phase phase = 4;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 4;
  ::llsf_msgs::GameState_Phase phase() const;
  void set_phase(::llsf_msgs::GameState_Phase value);

  // optional uint32 points_cyan = 5;
  bool has_points_cyan() const;
  void clear_points_cyan();
  static const int kPointsCyanFieldNumber = 5;
  ::google::protobuf::uint32 points_cyan() const;
  void set_points_cyan(::google::protobuf::uint32 value);

  // optional uint32 points_magenta = 8;
  bool has_points_magenta() const;
  void clear_points_magenta();
  static const int kPointsMagentaFieldNumber = 8;
  ::google::protobuf::uint32 points_magenta() const;
  void set_points_magenta(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.GameState)
 private:
  void set_has_game_time();
  void clear_has_game_time();
  void set_has_state();
  void clear_has_state();
  void set_has_phase();
  void clear_has_phase();
  void set_has_points_cyan();
  void clear_has_points_cyan();
  void set_has_team_cyan();
  void clear_has_team_cyan();
  void set_has_points_magenta();
  void clear_has_points_magenta();
  void set_has_team_magenta();
  void clear_has_team_magenta();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_cyan_;
  ::google::protobuf::internal::ArenaStringPtr team_magenta_;
  ::llsf_msgs::Time* game_time_;
  int state_;
  int phase_;
  ::google::protobuf::uint32 points_cyan_;
  ::google::protobuf::uint32 points_magenta_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetGameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.SetGameState) */ {
 public:
  SetGameState();
  virtual ~SetGameState();

  SetGameState(const SetGameState& from);

  inline SetGameState& operator=(const SetGameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetGameState(SetGameState&& from) noexcept
    : SetGameState() {
    *this = ::std::move(from);
  }

  inline SetGameState& operator=(SetGameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGameState* internal_default_instance() {
    return reinterpret_cast<const SetGameState*>(
               &_SetGameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetGameState* other);
  friend void swap(SetGameState& a, SetGameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetGameState* New() const final {
    return CreateMaybeMessage<SetGameState>(NULL);
  }

  SetGameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetGameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetGameState& from);
  void MergeFrom(const SetGameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGameState_CompType CompType;
  static const CompType COMP_ID =
    SetGameState_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    SetGameState_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetGameState_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetGameState_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetGameState_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetGameState_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetGameState_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetGameState_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetGameState_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .llsf_msgs.GameState.State state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::llsf_msgs::GameState_State state() const;
  void set_state(::llsf_msgs::GameState_State value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.SetGameState)
 private:
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int state_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetGamePhase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.SetGamePhase) */ {
 public:
  SetGamePhase();
  virtual ~SetGamePhase();

  SetGamePhase(const SetGamePhase& from);

  inline SetGamePhase& operator=(const SetGamePhase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetGamePhase(SetGamePhase&& from) noexcept
    : SetGamePhase() {
    *this = ::std::move(from);
  }

  inline SetGamePhase& operator=(SetGamePhase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGamePhase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetGamePhase* internal_default_instance() {
    return reinterpret_cast<const SetGamePhase*>(
               &_SetGamePhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetGamePhase* other);
  friend void swap(SetGamePhase& a, SetGamePhase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetGamePhase* New() const final {
    return CreateMaybeMessage<SetGamePhase>(NULL);
  }

  SetGamePhase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetGamePhase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetGamePhase& from);
  void MergeFrom(const SetGamePhase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGamePhase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetGamePhase_CompType CompType;
  static const CompType COMP_ID =
    SetGamePhase_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    SetGamePhase_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SetGamePhase_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SetGamePhase_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SetGamePhase_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SetGamePhase_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SetGamePhase_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SetGamePhase_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SetGamePhase_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .llsf_msgs.GameState.Phase phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::llsf_msgs::GameState_Phase phase() const;
  void set_phase(::llsf_msgs::GameState_Phase value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.SetGamePhase)
 private:
  void set_has_phase();
  void clear_has_phase();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int phase_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RandomizeField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.RandomizeField) */ {
 public:
  RandomizeField();
  virtual ~RandomizeField();

  RandomizeField(const RandomizeField& from);

  inline RandomizeField& operator=(const RandomizeField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RandomizeField(RandomizeField&& from) noexcept
    : RandomizeField() {
    *this = ::std::move(from);
  }

  inline RandomizeField& operator=(RandomizeField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomizeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomizeField* internal_default_instance() {
    return reinterpret_cast<const RandomizeField*>(
               &_RandomizeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RandomizeField* other);
  friend void swap(RandomizeField& a, RandomizeField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RandomizeField* New() const final {
    return CreateMaybeMessage<RandomizeField>(NULL);
  }

  RandomizeField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RandomizeField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RandomizeField& from);
  void MergeFrom(const RandomizeField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomizeField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RandomizeField_CompType CompType;
  static const CompType COMP_ID =
    RandomizeField_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    RandomizeField_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return RandomizeField_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    RandomizeField_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    RandomizeField_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    RandomizeField_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return RandomizeField_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return RandomizeField_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return RandomizeField_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:llsf_msgs.RandomizeField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_GameState_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameState

// required .llsf_msgs.Time game_time = 1;
inline bool GameState::has_game_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameState::set_has_game_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameState::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::llsf_msgs::Time& GameState::_internal_game_time() const {
  return *game_time_;
}
inline const ::llsf_msgs::Time& GameState::game_time() const {
  const ::llsf_msgs::Time* p = game_time_;
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.game_time)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::Time*>(
      &::llsf_msgs::_Time_default_instance_);
}
inline ::llsf_msgs::Time* GameState::release_game_time() {
  // @@protoc_insertion_point(field_release:llsf_msgs.GameState.game_time)
  clear_has_game_time();
  ::llsf_msgs::Time* temp = game_time_;
  game_time_ = NULL;
  return temp;
}
inline ::llsf_msgs::Time* GameState::mutable_game_time() {
  set_has_game_time();
  if (game_time_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Time>(GetArenaNoVirtual());
    game_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.GameState.game_time)
  return game_time_;
}
inline void GameState::set_allocated_game_time(::llsf_msgs::Time* game_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(game_time_);
  }
  if (game_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_time, submessage_arena);
    }
    set_has_game_time();
  } else {
    clear_has_game_time();
  }
  game_time_ = game_time;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.GameState.game_time)
}

// required .llsf_msgs.GameState.State state = 3;
inline bool GameState::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameState::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameState::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::llsf_msgs::GameState_State GameState::state() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.state)
  return static_cast< ::llsf_msgs::GameState_State >(state_);
}
inline void GameState::set_state(::llsf_msgs::GameState_State value) {
  assert(::llsf_msgs::GameState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.GameState.state)
}

// required .llsf_msgs.GameState.Phase phase = 4;
inline bool GameState::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameState::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameState::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::llsf_msgs::GameState_Phase GameState::phase() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.phase)
  return static_cast< ::llsf_msgs::GameState_Phase >(phase_);
}
inline void GameState::set_phase(::llsf_msgs::GameState_Phase value) {
  assert(::llsf_msgs::GameState_Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.GameState.phase)
}

// optional uint32 points_cyan = 5;
inline bool GameState::has_points_cyan() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameState::set_has_points_cyan() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameState::clear_has_points_cyan() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameState::clear_points_cyan() {
  points_cyan_ = 0u;
  clear_has_points_cyan();
}
inline ::google::protobuf::uint32 GameState::points_cyan() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.points_cyan)
  return points_cyan_;
}
inline void GameState::set_points_cyan(::google::protobuf::uint32 value) {
  set_has_points_cyan();
  points_cyan_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.GameState.points_cyan)
}

// optional string team_cyan = 6;
inline bool GameState::has_team_cyan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameState::set_has_team_cyan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameState::clear_has_team_cyan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameState::clear_team_cyan() {
  team_cyan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_cyan();
}
inline const ::std::string& GameState::team_cyan() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.team_cyan)
  return team_cyan_.GetNoArena();
}
inline void GameState::set_team_cyan(const ::std::string& value) {
  set_has_team_cyan();
  team_cyan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.GameState.team_cyan)
}
#if LANG_CXX11
inline void GameState::set_team_cyan(::std::string&& value) {
  set_has_team_cyan();
  team_cyan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.GameState.team_cyan)
}
#endif
inline void GameState::set_team_cyan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_cyan();
  team_cyan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.GameState.team_cyan)
}
inline void GameState::set_team_cyan(const char* value, size_t size) {
  set_has_team_cyan();
  team_cyan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.GameState.team_cyan)
}
inline ::std::string* GameState::mutable_team_cyan() {
  set_has_team_cyan();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.GameState.team_cyan)
  return team_cyan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameState::release_team_cyan() {
  // @@protoc_insertion_point(field_release:llsf_msgs.GameState.team_cyan)
  if (!has_team_cyan()) {
    return NULL;
  }
  clear_has_team_cyan();
  return team_cyan_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameState::set_allocated_team_cyan(::std::string* team_cyan) {
  if (team_cyan != NULL) {
    set_has_team_cyan();
  } else {
    clear_has_team_cyan();
  }
  team_cyan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_cyan);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.GameState.team_cyan)
}

// optional uint32 points_magenta = 8;
inline bool GameState::has_points_magenta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameState::set_has_points_magenta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameState::clear_has_points_magenta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameState::clear_points_magenta() {
  points_magenta_ = 0u;
  clear_has_points_magenta();
}
inline ::google::protobuf::uint32 GameState::points_magenta() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.points_magenta)
  return points_magenta_;
}
inline void GameState::set_points_magenta(::google::protobuf::uint32 value) {
  set_has_points_magenta();
  points_magenta_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.GameState.points_magenta)
}

// optional string team_magenta = 9;
inline bool GameState::has_team_magenta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameState::set_has_team_magenta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameState::clear_has_team_magenta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameState::clear_team_magenta() {
  team_magenta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_magenta();
}
inline const ::std::string& GameState::team_magenta() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.GameState.team_magenta)
  return team_magenta_.GetNoArena();
}
inline void GameState::set_team_magenta(const ::std::string& value) {
  set_has_team_magenta();
  team_magenta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.GameState.team_magenta)
}
#if LANG_CXX11
inline void GameState::set_team_magenta(::std::string&& value) {
  set_has_team_magenta();
  team_magenta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.GameState.team_magenta)
}
#endif
inline void GameState::set_team_magenta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_magenta();
  team_magenta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.GameState.team_magenta)
}
inline void GameState::set_team_magenta(const char* value, size_t size) {
  set_has_team_magenta();
  team_magenta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.GameState.team_magenta)
}
inline ::std::string* GameState::mutable_team_magenta() {
  set_has_team_magenta();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.GameState.team_magenta)
  return team_magenta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameState::release_team_magenta() {
  // @@protoc_insertion_point(field_release:llsf_msgs.GameState.team_magenta)
  if (!has_team_magenta()) {
    return NULL;
  }
  clear_has_team_magenta();
  return team_magenta_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameState::set_allocated_team_magenta(::std::string* team_magenta) {
  if (team_magenta != NULL) {
    set_has_team_magenta();
  } else {
    clear_has_team_magenta();
  }
  team_magenta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_magenta);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.GameState.team_magenta)
}

// -------------------------------------------------------------------

// SetGameState

// required .llsf_msgs.GameState.State state = 1;
inline bool SetGameState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGameState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGameState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGameState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::llsf_msgs::GameState_State SetGameState::state() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetGameState.state)
  return static_cast< ::llsf_msgs::GameState_State >(state_);
}
inline void SetGameState::set_state(::llsf_msgs::GameState_State value) {
  assert(::llsf_msgs::GameState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.SetGameState.state)
}

// -------------------------------------------------------------------

// SetGamePhase

// required .llsf_msgs.GameState.Phase phase = 1;
inline bool SetGamePhase::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGamePhase::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGamePhase::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGamePhase::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::llsf_msgs::GameState_Phase SetGamePhase::phase() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SetGamePhase.phase)
  return static_cast< ::llsf_msgs::GameState_Phase >(phase_);
}
inline void SetGamePhase::set_phase(::llsf_msgs::GameState_Phase value) {
  assert(::llsf_msgs::GameState_Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.SetGamePhase.phase)
}

// -------------------------------------------------------------------

// RandomizeField

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::GameState_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_CompType>() {
  return ::llsf_msgs::GameState_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::GameState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_State>() {
  return ::llsf_msgs::GameState_State_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::GameState_Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::GameState_Phase>() {
  return ::llsf_msgs::GameState_Phase_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::SetGameState_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetGameState_CompType>() {
  return ::llsf_msgs::SetGameState_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::SetGamePhase_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SetGamePhase_CompType>() {
  return ::llsf_msgs::SetGamePhase_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::RandomizeField_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::RandomizeField_CompType>() {
  return ::llsf_msgs::RandomizeField_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GameState_2eproto
