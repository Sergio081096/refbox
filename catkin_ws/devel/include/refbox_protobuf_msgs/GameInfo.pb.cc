// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameInfo.proto

#include "GameInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace llsf_msgs {
class GameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInfo>
      _instance;
} _GameInfo_default_instance_;
class SetTeamNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetTeamName>
      _instance;
} _SetTeamName_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_GameInfo_2eproto {
static void InitDefaultsGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_GameInfo_default_instance_;
    new (ptr) ::llsf_msgs::GameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::GameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameInfo}, {}};

static void InitDefaultsSetTeamName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_SetTeamName_default_instance_;
    new (ptr) ::llsf_msgs::SetTeamName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::SetTeamName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetTeamName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetTeamName}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetTeamName.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::GameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::GameInfo, known_teams_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SetTeamName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SetTeamName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SetTeamName, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::SetTeamName, team_color_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::llsf_msgs::GameInfo)},
  { 7, 14, sizeof(::llsf_msgs::SetTeamName)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_GameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_SetTeamName_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "GameInfo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016GameInfo.proto\022\tllsf_msgs\032\nTeam.proto\""
      "G\n\010GameInfo\022\023\n\013known_teams\030\001 \003(\t\"&\n\010Comp"
      "Type\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020Q\"m\n\013SetT"
      "eamName\022\021\n\tteam_name\030\001 \002(\t\022#\n\nteam_color"
      "\030\002 \002(\0162\017.llsf_msgs.Team\"&\n\010CompType\022\014\n\007C"
      "OMP_ID\020\320\017\022\014\n\010MSG_TYPE\020RB1\n\037org.robocup_l"
      "ogistics.llsf_msgsB\016GameInfoProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameInfo.proto", &protobuf_RegisterTypes);
  ::protobuf_Team_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_GameInfo_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* GameInfo_CompType_descriptor() {
  protobuf_GameInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GameInfo_2eproto::file_level_enum_descriptors[0];
}
bool GameInfo_CompType_IsValid(int value) {
  switch (value) {
    case 81:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameInfo_CompType GameInfo::COMP_ID;
const GameInfo_CompType GameInfo::MSG_TYPE;
const GameInfo_CompType GameInfo::CompType_MIN;
const GameInfo_CompType GameInfo::CompType_MAX;
const int GameInfo::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SetTeamName_CompType_descriptor() {
  protobuf_GameInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_GameInfo_2eproto::file_level_enum_descriptors[1];
}
bool SetTeamName_CompType_IsValid(int value) {
  switch (value) {
    case 82:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetTeamName_CompType SetTeamName::COMP_ID;
const SetTeamName_CompType SetTeamName::MSG_TYPE;
const SetTeamName_CompType SetTeamName::CompType_MIN;
const SetTeamName_CompType SetTeamName::CompType_MAX;
const int SetTeamName::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kKnownTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameInfo_2eproto::scc_info_GameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      known_teams_(from.known_teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.GameInfo)
}

void GameInfo::SharedCtor() {
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:llsf_msgs.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
}

void GameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  ::protobuf_GameInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInfo& GameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameInfo_2eproto::scc_info_GameInfo.base);
  return *internal_default_instance();
}


void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  known_teams_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.GameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string known_teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_known_teams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->known_teams(this->known_teams_size() - 1).data(),
            static_cast<int>(this->known_teams(this->known_teams_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.GameInfo.known_teams");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string known_teams = 1;
  for (int i = 0, n = this->known_teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->known_teams(i).data(), static_cast<int>(this->known_teams(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.GameInfo.known_teams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->known_teams(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string known_teams = 1;
  for (int i = 0, n = this->known_teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->known_teams(i).data(), static_cast<int>(this->known_teams(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.GameInfo.known_teams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->known_teams(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.GameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string known_teams = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->known_teams_size());
  for (int i = 0, n = this->known_teams_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->known_teams(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  known_teams_.MergeFrom(from.known_teams_);
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  known_teams_.InternalSwap(CastToBase(&other->known_teams_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_GameInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetTeamName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTeamName::kTeamNameFieldNumber;
const int SetTeamName::kTeamColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTeamName::SetTeamName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GameInfo_2eproto::scc_info_SetTeamName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.SetTeamName)
}
SetTeamName::SetTeamName(const SetTeamName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_color_ = from.team_color_;
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.SetTeamName)
}

void SetTeamName::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_color_ = 0;
}

SetTeamName::~SetTeamName() {
  // @@protoc_insertion_point(destructor:llsf_msgs.SetTeamName)
  SharedDtor();
}

void SetTeamName::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetTeamName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetTeamName::descriptor() {
  ::protobuf_GameInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetTeamName& SetTeamName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GameInfo_2eproto::scc_info_SetTeamName.base);
  return *internal_default_instance();
}


void SetTeamName::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.SetTeamName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  team_color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetTeamName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.SetTeamName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string team_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.SetTeamName.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .llsf_msgs.Team team_color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.SetTeamName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.SetTeamName)
  return false;
#undef DO_
}

void SetTeamName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.SetTeamName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.SetTeamName.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // required .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.SetTeamName)
}

::google::protobuf::uint8* SetTeamName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.SetTeamName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.SetTeamName.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // required .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.SetTeamName)
  return target;
}

size_t SetTeamName::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.SetTeamName)
  size_t total_size = 0;

  if (has_team_name()) {
    // required string team_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }

  if (has_team_color()) {
    // required .llsf_msgs.Team team_color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
  }

  return total_size;
}
size_t SetTeamName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.SetTeamName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string team_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());

    // required .llsf_msgs.Team team_color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTeamName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.SetTeamName)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTeamName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTeamName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.SetTeamName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.SetTeamName)
    MergeFrom(*source);
  }
}

void SetTeamName::MergeFrom(const SetTeamName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.SetTeamName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_color_ = from.team_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetTeamName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.SetTeamName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTeamName::CopyFrom(const SetTeamName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.SetTeamName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTeamName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SetTeamName::Swap(SetTeamName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTeamName::InternalSwap(SetTeamName* other) {
  using std::swap;
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_color_, other->team_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetTeamName::GetMetadata() const {
  protobuf_GameInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_GameInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::GameInfo* Arena::CreateMaybeMessage< ::llsf_msgs::GameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::GameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::SetTeamName* Arena::CreateMaybeMessage< ::llsf_msgs::SetTeamName >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::SetTeamName >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
