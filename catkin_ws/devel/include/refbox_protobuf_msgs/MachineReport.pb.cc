// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineReport.proto

#include "MachineReport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_MachineReport_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineReport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MachineReportEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MachineReport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MachineTypeFeedback;
}  // namespace protobuf_MachineReport_2eproto
namespace llsf_msgs {
class MachineReportEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MachineReportEntry>
      _instance;
} _MachineReportEntry_default_instance_;
class MachineReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MachineReport>
      _instance;
} _MachineReport_default_instance_;
class MachineReportInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MachineReportInfo>
      _instance;
} _MachineReportInfo_default_instance_;
class MachineTypeFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MachineTypeFeedback>
      _instance;
} _MachineTypeFeedback_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_MachineReport_2eproto {
static void InitDefaultsMachineReportEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_MachineReportEntry_default_instance_;
    new (ptr) ::llsf_msgs::MachineReportEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::MachineReportEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MachineReportEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMachineReportEntry}, {}};

static void InitDefaultsMachineReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_MachineReport_default_instance_;
    new (ptr) ::llsf_msgs::MachineReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::MachineReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MachineReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMachineReport}, {
      &protobuf_MachineReport_2eproto::scc_info_MachineReportEntry.base,}};

static void InitDefaultsMachineReportInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_MachineReportInfo_default_instance_;
    new (ptr) ::llsf_msgs::MachineReportInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::MachineReportInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MachineReportInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMachineReportInfo}, {
      &protobuf_MachineReport_2eproto::scc_info_MachineTypeFeedback.base,}};

static void InitDefaultsMachineTypeFeedback() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_MachineTypeFeedback_default_instance_;
    new (ptr) ::llsf_msgs::MachineTypeFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::MachineTypeFeedback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MachineTypeFeedback =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMachineTypeFeedback}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MachineReportEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MachineReport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MachineReportInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MachineTypeFeedback.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportEntry, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportEntry, rotation_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReport, team_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReport, machines_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportInfo, reported_machines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportInfo, team_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineReportInfo, reported_types_),
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineTypeFeedback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineTypeFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineTypeFeedback, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineTypeFeedback, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineTypeFeedback, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::MachineTypeFeedback, team_color_),
  0,
  3,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::llsf_msgs::MachineReportEntry)},
  { 13, 20, sizeof(::llsf_msgs::MachineReport)},
  { 22, 30, sizeof(::llsf_msgs::MachineReportInfo)},
  { 33, 42, sizeof(::llsf_msgs::MachineTypeFeedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_MachineReportEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_MachineReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_MachineReportInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_MachineTypeFeedback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MachineReport.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023MachineReport.proto\022\tllsf_msgs\032\nTeam.p"
      "roto\032\nZone.proto\"\211\001\n\022MachineReportEntry\022"
      "\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\035\n\004zone\030\003 \001("
      "\0162\017.llsf_msgs.Zone\022\020\n\010rotation\030\004 \001(\r\"&\n\010"
      "CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020<\"\215\001\n"
      "\rMachineReport\022#\n\nteam_color\030\002 \002(\0162\017.lls"
      "f_msgs.Team\022/\n\010machines\030\001 \003(\0132\035.llsf_msg"
      "s.MachineReportEntry\"&\n\010CompType\022\014\n\007COMP"
      "_ID\020\320\017\022\014\n\010MSG_TYPE\020=\"\263\001\n\021MachineReportIn"
      "fo\022\031\n\021reported_machines\030\001 \003(\t\022#\n\nteam_co"
      "lor\030\002 \002(\0162\017.llsf_msgs.Team\0226\n\016reported_t"
      "ypes\030\003 \003(\0132\036.llsf_msgs.MachineTypeFeedba"
      "ck\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE"
      "\020>\"\235\001\n\023MachineTypeFeedback\022\014\n\004type\030\001 \002(\t"
      "\022\035\n\004zone\030\002 \002(\0162\017.llsf_msgs.Zone\022\014\n\004name\030"
      "\003 \001(\t\022#\n\nteam_color\030\004 \001(\0162\017.llsf_msgs.Te"
      "am\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE"
      "\020\?B6\n\037org.robocup_logistics.llsf_msgsB\023M"
      "achineReportProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MachineReport.proto", &protobuf_RegisterTypes);
  ::protobuf_Team_2eproto::AddDescriptors();
  ::protobuf_Zone_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MachineReport_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* MachineReportEntry_CompType_descriptor() {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineReport_2eproto::file_level_enum_descriptors[0];
}
bool MachineReportEntry_CompType_IsValid(int value) {
  switch (value) {
    case 60:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MachineReportEntry_CompType MachineReportEntry::COMP_ID;
const MachineReportEntry_CompType MachineReportEntry::MSG_TYPE;
const MachineReportEntry_CompType MachineReportEntry::CompType_MIN;
const MachineReportEntry_CompType MachineReportEntry::CompType_MAX;
const int MachineReportEntry::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MachineReport_CompType_descriptor() {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineReport_2eproto::file_level_enum_descriptors[1];
}
bool MachineReport_CompType_IsValid(int value) {
  switch (value) {
    case 61:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MachineReport_CompType MachineReport::COMP_ID;
const MachineReport_CompType MachineReport::MSG_TYPE;
const MachineReport_CompType MachineReport::CompType_MIN;
const MachineReport_CompType MachineReport::CompType_MAX;
const int MachineReport::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MachineReportInfo_CompType_descriptor() {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineReport_2eproto::file_level_enum_descriptors[2];
}
bool MachineReportInfo_CompType_IsValid(int value) {
  switch (value) {
    case 62:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MachineReportInfo_CompType MachineReportInfo::COMP_ID;
const MachineReportInfo_CompType MachineReportInfo::MSG_TYPE;
const MachineReportInfo_CompType MachineReportInfo::CompType_MIN;
const MachineReportInfo_CompType MachineReportInfo::CompType_MAX;
const int MachineReportInfo::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MachineTypeFeedback_CompType_descriptor() {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MachineReport_2eproto::file_level_enum_descriptors[3];
}
bool MachineTypeFeedback_CompType_IsValid(int value) {
  switch (value) {
    case 63:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MachineTypeFeedback_CompType MachineTypeFeedback::COMP_ID;
const MachineTypeFeedback_CompType MachineTypeFeedback::MSG_TYPE;
const MachineTypeFeedback_CompType MachineTypeFeedback::CompType_MIN;
const MachineTypeFeedback_CompType MachineTypeFeedback::CompType_MAX;
const int MachineTypeFeedback::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MachineReportEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineReportEntry::kNameFieldNumber;
const int MachineReportEntry::kTypeFieldNumber;
const int MachineReportEntry::kZoneFieldNumber;
const int MachineReportEntry::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineReportEntry::MachineReportEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineReport_2eproto::scc_info_MachineReportEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.MachineReportEntry)
}
MachineReportEntry::MachineReportEntry(const MachineReportEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&rotation_, &from.rotation_,
    static_cast<size_t>(reinterpret_cast<char*>(&zone_) -
    reinterpret_cast<char*>(&rotation_)) + sizeof(zone_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.MachineReportEntry)
}

void MachineReportEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotation_ = 0u;
  zone_ = 18;
}

MachineReportEntry::~MachineReportEntry() {
  // @@protoc_insertion_point(destructor:llsf_msgs.MachineReportEntry)
  SharedDtor();
}

void MachineReportEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MachineReportEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MachineReportEntry::descriptor() {
  ::protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineReportEntry& MachineReportEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineReport_2eproto::scc_info_MachineReportEntry.base);
  return *internal_default_instance();
}


void MachineReportEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.MachineReportEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    rotation_ = 0u;
    zone_ = 18;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MachineReportEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.MachineReportEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.MachineReportEntry.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.MachineReportEntry.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Zone zone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Zone_IsValid(value)) {
            set_zone(static_cast< ::llsf_msgs::Zone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rotation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.MachineReportEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.MachineReportEntry)
  return false;
#undef DO_
}

void MachineReportEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.MachineReportEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineReportEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineReportEntry.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional .llsf_msgs.Zone zone = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->zone(), output);
  }

  // optional uint32 rotation = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rotation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.MachineReportEntry)
}

::google::protobuf::uint8* MachineReportEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.MachineReportEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineReportEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineReportEntry.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .llsf_msgs.Zone zone = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->zone(), target);
  }

  // optional uint32 rotation = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rotation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.MachineReportEntry)
  return target;
}

size_t MachineReportEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.MachineReportEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint32 rotation = 4;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rotation());
    }

    // optional .llsf_msgs.Zone zone = 3;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineReportEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.MachineReportEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineReportEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineReportEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.MachineReportEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.MachineReportEntry)
    MergeFrom(*source);
  }
}

void MachineReportEntry::MergeFrom(const MachineReportEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.MachineReportEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_ = from.rotation_;
    }
    if (cached_has_bits & 0x00000008u) {
      zone_ = from.zone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MachineReportEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.MachineReportEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineReportEntry::CopyFrom(const MachineReportEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.MachineReportEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReportEntry::IsInitialized() const {
  return true;
}

void MachineReportEntry::Swap(MachineReportEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineReportEntry::InternalSwap(MachineReportEntry* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rotation_, other->rotation_);
  swap(zone_, other->zone_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MachineReportEntry::GetMetadata() const {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MachineReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineReport::kTeamColorFieldNumber;
const int MachineReport::kMachinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineReport::MachineReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineReport_2eproto::scc_info_MachineReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.MachineReport)
}
MachineReport::MachineReport(const MachineReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      machines_(from.machines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_color_ = from.team_color_;
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.MachineReport)
}

void MachineReport::SharedCtor() {
  team_color_ = 0;
}

MachineReport::~MachineReport() {
  // @@protoc_insertion_point(destructor:llsf_msgs.MachineReport)
  SharedDtor();
}

void MachineReport::SharedDtor() {
}

void MachineReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MachineReport::descriptor() {
  ::protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineReport& MachineReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineReport_2eproto::scc_info_MachineReport.base);
  return *internal_default_instance();
}


void MachineReport::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.MachineReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machines_.Clear();
  team_color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MachineReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.MachineReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.MachineReportEntry machines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_machines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .llsf_msgs.Team team_color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.MachineReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.MachineReport)
  return false;
#undef DO_
}

void MachineReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.MachineReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->machines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->machines(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.MachineReport)
}

::google::protobuf::uint8* MachineReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.MachineReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->machines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->machines(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.MachineReport)
  return target;
}

size_t MachineReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.MachineReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
  }
  // repeated .llsf_msgs.MachineReportEntry machines = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->machines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->machines(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.MachineReport)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.MachineReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.MachineReport)
    MergeFrom(*source);
  }
}

void MachineReport::MergeFrom(const MachineReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.MachineReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  machines_.MergeFrom(from.machines_);
  if (from.has_team_color()) {
    set_team_color(from.team_color());
  }
}

void MachineReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.MachineReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineReport::CopyFrom(const MachineReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.MachineReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MachineReport::Swap(MachineReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineReport::InternalSwap(MachineReport* other) {
  using std::swap;
  CastToBase(&machines_)->InternalSwap(CastToBase(&other->machines_));
  swap(team_color_, other->team_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MachineReport::GetMetadata() const {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MachineReportInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineReportInfo::kReportedMachinesFieldNumber;
const int MachineReportInfo::kTeamColorFieldNumber;
const int MachineReportInfo::kReportedTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineReportInfo::MachineReportInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineReport_2eproto::scc_info_MachineReportInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.MachineReportInfo)
}
MachineReportInfo::MachineReportInfo(const MachineReportInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      reported_machines_(from.reported_machines_),
      reported_types_(from.reported_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_color_ = from.team_color_;
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.MachineReportInfo)
}

void MachineReportInfo::SharedCtor() {
  team_color_ = 0;
}

MachineReportInfo::~MachineReportInfo() {
  // @@protoc_insertion_point(destructor:llsf_msgs.MachineReportInfo)
  SharedDtor();
}

void MachineReportInfo::SharedDtor() {
}

void MachineReportInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MachineReportInfo::descriptor() {
  ::protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineReportInfo& MachineReportInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineReport_2eproto::scc_info_MachineReportInfo.base);
  return *internal_default_instance();
}


void MachineReportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.MachineReportInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reported_machines_.Clear();
  reported_types_.Clear();
  team_color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MachineReportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.MachineReportInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string reported_machines = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reported_machines()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reported_machines(this->reported_machines_size() - 1).data(),
            static_cast<int>(this->reported_machines(this->reported_machines_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.MachineReportInfo.reported_machines");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .llsf_msgs.Team team_color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llsf_msgs.MachineTypeFeedback reported_types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reported_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.MachineReportInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.MachineReportInfo)
  return false;
#undef DO_
}

void MachineReportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.MachineReportInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reported_machines = 1;
  for (int i = 0, n = this->reported_machines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reported_machines(i).data(), static_cast<int>(this->reported_machines(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineReportInfo.reported_machines");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reported_machines(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_color(), output);
  }

  // repeated .llsf_msgs.MachineTypeFeedback reported_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reported_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->reported_types(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.MachineReportInfo)
}

::google::protobuf::uint8* MachineReportInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.MachineReportInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reported_machines = 1;
  for (int i = 0, n = this->reported_machines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reported_machines(i).data(), static_cast<int>(this->reported_machines(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineReportInfo.reported_machines");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->reported_machines(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Team team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_color(), target);
  }

  // repeated .llsf_msgs.MachineTypeFeedback reported_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reported_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->reported_types(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.MachineReportInfo)
  return target;
}

size_t MachineReportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.MachineReportInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .llsf_msgs.Team team_color = 2;
  if (has_team_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
  }
  // repeated string reported_machines = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reported_machines_size());
  for (int i = 0, n = this->reported_machines_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reported_machines(i));
  }

  // repeated .llsf_msgs.MachineTypeFeedback reported_types = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->reported_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reported_types(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineReportInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.MachineReportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineReportInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineReportInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.MachineReportInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.MachineReportInfo)
    MergeFrom(*source);
  }
}

void MachineReportInfo::MergeFrom(const MachineReportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.MachineReportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reported_machines_.MergeFrom(from.reported_machines_);
  reported_types_.MergeFrom(from.reported_types_);
  if (from.has_team_color()) {
    set_team_color(from.team_color());
  }
}

void MachineReportInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.MachineReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineReportInfo::CopyFrom(const MachineReportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.MachineReportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineReportInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reported_types())) return false;
  return true;
}

void MachineReportInfo::Swap(MachineReportInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineReportInfo::InternalSwap(MachineReportInfo* other) {
  using std::swap;
  reported_machines_.InternalSwap(CastToBase(&other->reported_machines_));
  CastToBase(&reported_types_)->InternalSwap(CastToBase(&other->reported_types_));
  swap(team_color_, other->team_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MachineReportInfo::GetMetadata() const {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MachineTypeFeedback::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineTypeFeedback::kTypeFieldNumber;
const int MachineTypeFeedback::kZoneFieldNumber;
const int MachineTypeFeedback::kNameFieldNumber;
const int MachineTypeFeedback::kTeamColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineTypeFeedback::MachineTypeFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MachineReport_2eproto::scc_info_MachineTypeFeedback.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.MachineTypeFeedback)
}
MachineTypeFeedback::MachineTypeFeedback(const MachineTypeFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&team_color_, &from.team_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&zone_) -
    reinterpret_cast<char*>(&team_color_)) + sizeof(zone_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.MachineTypeFeedback)
}

void MachineTypeFeedback::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_color_ = 0;
  zone_ = 18;
}

MachineTypeFeedback::~MachineTypeFeedback() {
  // @@protoc_insertion_point(destructor:llsf_msgs.MachineTypeFeedback)
  SharedDtor();
}

void MachineTypeFeedback::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MachineTypeFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MachineTypeFeedback::descriptor() {
  ::protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineTypeFeedback& MachineTypeFeedback::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MachineReport_2eproto::scc_info_MachineTypeFeedback.base);
  return *internal_default_instance();
}


void MachineTypeFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.MachineTypeFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    team_color_ = 0;
    zone_ = 18;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MachineTypeFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.MachineTypeFeedback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.MachineTypeFeedback.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .llsf_msgs.Zone zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Zone_IsValid(value)) {
            set_zone(static_cast< ::llsf_msgs::Zone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.MachineTypeFeedback.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Team team_color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.MachineTypeFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.MachineTypeFeedback)
  return false;
#undef DO_
}

void MachineTypeFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.MachineTypeFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineTypeFeedback.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required .llsf_msgs.Zone zone = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->zone(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineTypeFeedback.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .llsf_msgs.Team team_color = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.MachineTypeFeedback)
}

::google::protobuf::uint8* MachineTypeFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.MachineTypeFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineTypeFeedback.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required .llsf_msgs.Zone zone = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->zone(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.MachineTypeFeedback.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .llsf_msgs.Team team_color = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.MachineTypeFeedback)
  return target;
}

size_t MachineTypeFeedback::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.MachineTypeFeedback)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_zone()) {
    // required .llsf_msgs.Zone zone = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
  }

  return total_size;
}
size_t MachineTypeFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.MachineTypeFeedback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required .llsf_msgs.Zone zone = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .llsf_msgs.Team team_color = 4;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineTypeFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.MachineTypeFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineTypeFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineTypeFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.MachineTypeFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.MachineTypeFeedback)
    MergeFrom(*source);
  }
}

void MachineTypeFeedback::MergeFrom(const MachineTypeFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.MachineTypeFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_color_ = from.team_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      zone_ = from.zone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MachineTypeFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.MachineTypeFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineTypeFeedback::CopyFrom(const MachineTypeFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.MachineTypeFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineTypeFeedback::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void MachineTypeFeedback::Swap(MachineTypeFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineTypeFeedback::InternalSwap(MachineTypeFeedback* other) {
  using std::swap;
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_color_, other->team_color_);
  swap(zone_, other->zone_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MachineTypeFeedback::GetMetadata() const {
  protobuf_MachineReport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MachineReport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::MachineReportEntry* Arena::CreateMaybeMessage< ::llsf_msgs::MachineReportEntry >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::MachineReportEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::MachineReport* Arena::CreateMaybeMessage< ::llsf_msgs::MachineReport >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::MachineReport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::MachineReportInfo* Arena::CreateMaybeMessage< ::llsf_msgs::MachineReportInfo >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::MachineReportInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::MachineTypeFeedback* Arena::CreateMaybeMessage< ::llsf_msgs::MachineTypeFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::MachineTypeFeedback >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
