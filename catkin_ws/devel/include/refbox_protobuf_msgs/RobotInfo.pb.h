// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotInfo.proto

#ifndef PROTOBUF_INCLUDED_RobotInfo_2eproto
#define PROTOBUF_INCLUDED_RobotInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
#include "Pose2D.pb.h"
#include "Team.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_RobotInfo_2eproto 

namespace protobuf_RobotInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_RobotInfo_2eproto
namespace llsf_msgs {
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class RobotInfo;
class RobotInfoDefaultTypeInternal;
extern RobotInfoDefaultTypeInternal _RobotInfo_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::Robot* Arena::CreateMaybeMessage<::llsf_msgs::Robot>(Arena*);
template<> ::llsf_msgs::RobotInfo* Arena::CreateMaybeMessage<::llsf_msgs::RobotInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum Robot_CompType {
  Robot_CompType_COMP_ID = 2000,
  Robot_CompType_MSG_TYPE = 31
};
bool Robot_CompType_IsValid(int value);
const Robot_CompType Robot_CompType_CompType_MIN = Robot_CompType_MSG_TYPE;
const Robot_CompType Robot_CompType_CompType_MAX = Robot_CompType_COMP_ID;
const int Robot_CompType_CompType_ARRAYSIZE = Robot_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Robot_CompType_descriptor();
inline const ::std::string& Robot_CompType_Name(Robot_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Robot_CompType_descriptor(), value);
}
inline bool Robot_CompType_Parse(
    const ::std::string& name, Robot_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Robot_CompType>(
    Robot_CompType_descriptor(), name, value);
}
enum RobotInfo_CompType {
  RobotInfo_CompType_COMP_ID = 2000,
  RobotInfo_CompType_MSG_TYPE = 30
};
bool RobotInfo_CompType_IsValid(int value);
const RobotInfo_CompType RobotInfo_CompType_CompType_MIN = RobotInfo_CompType_MSG_TYPE;
const RobotInfo_CompType RobotInfo_CompType_CompType_MAX = RobotInfo_CompType_COMP_ID;
const int RobotInfo_CompType_CompType_ARRAYSIZE = RobotInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotInfo_CompType_descriptor();
inline const ::std::string& RobotInfo_CompType_Name(RobotInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotInfo_CompType_descriptor(), value);
}
inline bool RobotInfo_CompType_Parse(
    const ::std::string& name, RobotInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotInfo_CompType>(
    RobotInfo_CompType_descriptor(), name, value);
}
enum RobotState {
  ACTIVE = 1,
  MAINTENANCE = 2,
  DISQUALIFIED = 3
};
bool RobotState_IsValid(int value);
const RobotState RobotState_MIN = ACTIVE;
const RobotState RobotState_MAX = DISQUALIFIED;
const int RobotState_ARRAYSIZE = RobotState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotState_descriptor();
inline const ::std::string& RobotState_Name(RobotState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotState_descriptor(), value);
}
inline bool RobotState_Parse(
    const ::std::string& name, RobotState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotState>(
    RobotState_descriptor(), name, value);
}
// ===================================================================

class Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Robot* other);
  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(NULL);
  }

  Robot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Robot_CompType CompType;
  static const CompType COMP_ID =
    Robot_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    Robot_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return Robot_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    Robot_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    Robot_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    Robot_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return Robot_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return Robot_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return Robot_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string team = 2;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 2;
  const ::std::string& team() const;
  void set_team(const ::std::string& value);
  #if LANG_CXX11
  void set_team(::std::string&& value);
  #endif
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  ::std::string* mutable_team();
  ::std::string* release_team();
  void set_allocated_team(::std::string* team);

  // required string host = 3;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 3;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required .llsf_msgs.Time last_seen = 4;
  bool has_last_seen() const;
  void clear_last_seen();
  static const int kLastSeenFieldNumber = 4;
  private:
  const ::llsf_msgs::Time& _internal_last_seen() const;
  public:
  const ::llsf_msgs::Time& last_seen() const;
  ::llsf_msgs::Time* release_last_seen();
  ::llsf_msgs::Time* mutable_last_seen();
  void set_allocated_last_seen(::llsf_msgs::Time* last_seen);

  // optional .llsf_msgs.Pose2D pose = 6;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 6;
  private:
  const ::llsf_msgs::Pose2D& _internal_pose() const;
  public:
  const ::llsf_msgs::Pose2D& pose() const;
  ::llsf_msgs::Pose2D* release_pose();
  ::llsf_msgs::Pose2D* mutable_pose();
  void set_allocated_pose(::llsf_msgs::Pose2D* pose);

  // optional .llsf_msgs.Pose2D vision_pose = 11;
  bool has_vision_pose() const;
  void clear_vision_pose();
  static const int kVisionPoseFieldNumber = 11;
  private:
  const ::llsf_msgs::Pose2D& _internal_vision_pose() const;
  public:
  const ::llsf_msgs::Pose2D& vision_pose() const;
  ::llsf_msgs::Pose2D* release_vision_pose();
  ::llsf_msgs::Pose2D* mutable_vision_pose();
  void set_allocated_vision_pose(::llsf_msgs::Pose2D* vision_pose);

  // required uint32 number = 7;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 7;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // optional float maintenance_time_remaining = 9 [default = 0];
  bool has_maintenance_time_remaining() const;
  void clear_maintenance_time_remaining();
  static const int kMaintenanceTimeRemainingFieldNumber = 9;
  float maintenance_time_remaining() const;
  void set_maintenance_time_remaining(float value);

  // optional uint32 maintenance_cycles = 10;
  bool has_maintenance_cycles() const;
  void clear_maintenance_cycles();
  static const int kMaintenanceCyclesFieldNumber = 10;
  ::google::protobuf::uint32 maintenance_cycles() const;
  void set_maintenance_cycles(::google::protobuf::uint32 value);

  // required .llsf_msgs.Team team_color = 12;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 12;
  ::llsf_msgs::Team team_color() const;
  void set_team_color(::llsf_msgs::Team value);

  // optional .llsf_msgs.RobotState state = 8;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::llsf_msgs::RobotState state() const;
  void set_state(::llsf_msgs::RobotState value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.Robot)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_team();
  void clear_has_team();
  void set_has_team_color();
  void clear_has_team_color();
  void set_has_number();
  void clear_has_number();
  void set_has_host();
  void clear_has_host();
  void set_has_last_seen();
  void clear_has_last_seen();
  void set_has_pose();
  void clear_has_pose();
  void set_has_vision_pose();
  void clear_has_vision_pose();
  void set_has_state();
  void clear_has_state();
  void set_has_maintenance_time_remaining();
  void clear_has_maintenance_time_remaining();
  void set_has_maintenance_cycles();
  void clear_has_maintenance_cycles();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr team_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::llsf_msgs::Time* last_seen_;
  ::llsf_msgs::Pose2D* pose_;
  ::llsf_msgs::Pose2D* vision_pose_;
  ::google::protobuf::uint32 number_;
  float maintenance_time_remaining_;
  ::google::protobuf::uint32 maintenance_cycles_;
  int team_color_;
  int state_;
  friend struct ::protobuf_RobotInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.RobotInfo) */ {
 public:
  RobotInfo();
  virtual ~RobotInfo();

  RobotInfo(const RobotInfo& from);

  inline RobotInfo& operator=(const RobotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotInfo(RobotInfo&& from) noexcept
    : RobotInfo() {
    *this = ::std::move(from);
  }

  inline RobotInfo& operator=(RobotInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotInfo* internal_default_instance() {
    return reinterpret_cast<const RobotInfo*>(
               &_RobotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RobotInfo* other);
  friend void swap(RobotInfo& a, RobotInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotInfo* New() const final {
    return CreateMaybeMessage<RobotInfo>(NULL);
  }

  RobotInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotInfo& from);
  void MergeFrom(const RobotInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RobotInfo_CompType CompType;
  static const CompType COMP_ID =
    RobotInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    RobotInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return RobotInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    RobotInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    RobotInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    RobotInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return RobotInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return RobotInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return RobotInfo_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .llsf_msgs.Robot robots = 1;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 1;
  ::llsf_msgs::Robot* mutable_robots(int index);
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Robot >*
      mutable_robots();
  const ::llsf_msgs::Robot& robots(int index) const;
  ::llsf_msgs::Robot* add_robots();
  const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Robot >&
      robots() const;

  // @@protoc_insertion_point(class_scope:llsf_msgs.RobotInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Robot > robots_;
  friend struct ::protobuf_RobotInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Robot

// required string name = 1;
inline bool Robot::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Robot::name() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.name)
  return name_.GetNoArena();
}
inline void Robot::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.name)
}
#if LANG_CXX11
inline void Robot::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.Robot.name)
}
#endif
inline void Robot::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.Robot.name)
}
inline void Robot::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.Robot.name)
}
inline ::std::string* Robot::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Robot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robot::release_name() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Robot.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Robot.name)
}

// required string team = 2;
inline bool Robot::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team();
}
inline const ::std::string& Robot::team() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.team)
  return team_.GetNoArena();
}
inline void Robot::set_team(const ::std::string& value) {
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.team)
}
#if LANG_CXX11
inline void Robot::set_team(::std::string&& value) {
  set_has_team();
  team_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.Robot.team)
}
#endif
inline void Robot::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.Robot.team)
}
inline void Robot::set_team(const char* value, size_t size) {
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.Robot.team)
}
inline ::std::string* Robot::mutable_team() {
  set_has_team();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Robot.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robot::release_team() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Robot.team)
  if (!has_team()) {
    return NULL;
  }
  clear_has_team();
  return team_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robot::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    set_has_team();
  } else {
    clear_has_team();
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Robot.team)
}

// required .llsf_msgs.Team team_color = 12;
inline bool Robot::has_team_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Robot::set_has_team_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Robot::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Robot::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::llsf_msgs::Team Robot::team_color() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.team_color)
  return static_cast< ::llsf_msgs::Team >(team_color_);
}
inline void Robot::set_team_color(::llsf_msgs::Team value) {
  assert(::llsf_msgs::Team_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.team_color)
}

// required uint32 number = 7;
inline bool Robot::has_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Robot::set_has_number() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Robot::clear_has_number() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Robot::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 Robot::number() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.number)
  return number_;
}
inline void Robot::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.number)
}

// required string host = 3;
inline bool Robot::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& Robot::host() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.host)
  return host_.GetNoArena();
}
inline void Robot::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.host)
}
#if LANG_CXX11
inline void Robot::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:llsf_msgs.Robot.host)
}
#endif
inline void Robot::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:llsf_msgs.Robot.host)
}
inline void Robot::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:llsf_msgs.Robot.host)
}
inline ::std::string* Robot::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Robot.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Robot::release_host() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Robot.host)
  if (!has_host()) {
    return NULL;
  }
  clear_has_host();
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Robot::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Robot.host)
}

// required .llsf_msgs.Time last_seen = 4;
inline bool Robot::has_last_seen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Robot::set_has_last_seen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Robot::clear_has_last_seen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::llsf_msgs::Time& Robot::_internal_last_seen() const {
  return *last_seen_;
}
inline const ::llsf_msgs::Time& Robot::last_seen() const {
  const ::llsf_msgs::Time* p = last_seen_;
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.last_seen)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::Time*>(
      &::llsf_msgs::_Time_default_instance_);
}
inline ::llsf_msgs::Time* Robot::release_last_seen() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Robot.last_seen)
  clear_has_last_seen();
  ::llsf_msgs::Time* temp = last_seen_;
  last_seen_ = NULL;
  return temp;
}
inline ::llsf_msgs::Time* Robot::mutable_last_seen() {
  set_has_last_seen();
  if (last_seen_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Time>(GetArenaNoVirtual());
    last_seen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Robot.last_seen)
  return last_seen_;
}
inline void Robot::set_allocated_last_seen(::llsf_msgs::Time* last_seen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_seen_);
  }
  if (last_seen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_seen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_seen, submessage_arena);
    }
    set_has_last_seen();
  } else {
    clear_has_last_seen();
  }
  last_seen_ = last_seen;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Robot.last_seen)
}

// optional .llsf_msgs.Pose2D pose = 6;
inline bool Robot::has_pose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Robot::set_has_pose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Robot::clear_has_pose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::llsf_msgs::Pose2D& Robot::_internal_pose() const {
  return *pose_;
}
inline const ::llsf_msgs::Pose2D& Robot::pose() const {
  const ::llsf_msgs::Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::Pose2D*>(
      &::llsf_msgs::_Pose2D_default_instance_);
}
inline ::llsf_msgs::Pose2D* Robot::release_pose() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Robot.pose)
  clear_has_pose();
  ::llsf_msgs::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::llsf_msgs::Pose2D* Robot::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Pose2D>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Robot.pose)
  return pose_;
}
inline void Robot::set_allocated_pose(::llsf_msgs::Pose2D* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Robot.pose)
}

// optional .llsf_msgs.Pose2D vision_pose = 11;
inline bool Robot::has_vision_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Robot::set_has_vision_pose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Robot::clear_has_vision_pose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::llsf_msgs::Pose2D& Robot::_internal_vision_pose() const {
  return *vision_pose_;
}
inline const ::llsf_msgs::Pose2D& Robot::vision_pose() const {
  const ::llsf_msgs::Pose2D* p = vision_pose_;
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.vision_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::Pose2D*>(
      &::llsf_msgs::_Pose2D_default_instance_);
}
inline ::llsf_msgs::Pose2D* Robot::release_vision_pose() {
  // @@protoc_insertion_point(field_release:llsf_msgs.Robot.vision_pose)
  clear_has_vision_pose();
  ::llsf_msgs::Pose2D* temp = vision_pose_;
  vision_pose_ = NULL;
  return temp;
}
inline ::llsf_msgs::Pose2D* Robot::mutable_vision_pose() {
  set_has_vision_pose();
  if (vision_pose_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Pose2D>(GetArenaNoVirtual());
    vision_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.Robot.vision_pose)
  return vision_pose_;
}
inline void Robot::set_allocated_vision_pose(::llsf_msgs::Pose2D* vision_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vision_pose_);
  }
  if (vision_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vision_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vision_pose, submessage_arena);
    }
    set_has_vision_pose();
  } else {
    clear_has_vision_pose();
  }
  vision_pose_ = vision_pose;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.Robot.vision_pose)
}

// optional .llsf_msgs.RobotState state = 8;
inline bool Robot::has_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Robot::set_has_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Robot::clear_has_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Robot::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::llsf_msgs::RobotState Robot::state() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.state)
  return static_cast< ::llsf_msgs::RobotState >(state_);
}
inline void Robot::set_state(::llsf_msgs::RobotState value) {
  assert(::llsf_msgs::RobotState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.state)
}

// optional float maintenance_time_remaining = 9 [default = 0];
inline bool Robot::has_maintenance_time_remaining() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Robot::set_has_maintenance_time_remaining() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Robot::clear_has_maintenance_time_remaining() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Robot::clear_maintenance_time_remaining() {
  maintenance_time_remaining_ = 0;
  clear_has_maintenance_time_remaining();
}
inline float Robot::maintenance_time_remaining() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.maintenance_time_remaining)
  return maintenance_time_remaining_;
}
inline void Robot::set_maintenance_time_remaining(float value) {
  set_has_maintenance_time_remaining();
  maintenance_time_remaining_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.maintenance_time_remaining)
}

// optional uint32 maintenance_cycles = 10;
inline bool Robot::has_maintenance_cycles() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Robot::set_has_maintenance_cycles() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Robot::clear_has_maintenance_cycles() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Robot::clear_maintenance_cycles() {
  maintenance_cycles_ = 0u;
  clear_has_maintenance_cycles();
}
inline ::google::protobuf::uint32 Robot::maintenance_cycles() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.Robot.maintenance_cycles)
  return maintenance_cycles_;
}
inline void Robot::set_maintenance_cycles(::google::protobuf::uint32 value) {
  set_has_maintenance_cycles();
  maintenance_cycles_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.Robot.maintenance_cycles)
}

// -------------------------------------------------------------------

// RobotInfo

// repeated .llsf_msgs.Robot robots = 1;
inline int RobotInfo::robots_size() const {
  return robots_.size();
}
inline void RobotInfo::clear_robots() {
  robots_.Clear();
}
inline ::llsf_msgs::Robot* RobotInfo::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:llsf_msgs.RobotInfo.robots)
  return robots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Robot >*
RobotInfo::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:llsf_msgs.RobotInfo.robots)
  return &robots_;
}
inline const ::llsf_msgs::Robot& RobotInfo::robots(int index) const {
  // @@protoc_insertion_point(field_get:llsf_msgs.RobotInfo.robots)
  return robots_.Get(index);
}
inline ::llsf_msgs::Robot* RobotInfo::add_robots() {
  // @@protoc_insertion_point(field_add:llsf_msgs.RobotInfo.robots)
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Robot >&
RobotInfo::robots() const {
  // @@protoc_insertion_point(field_list:llsf_msgs.RobotInfo.robots)
  return robots_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::Robot_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::Robot_CompType>() {
  return ::llsf_msgs::Robot_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::RobotInfo_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::RobotInfo_CompType>() {
  return ::llsf_msgs::RobotInfo_CompType_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::RobotState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::RobotState>() {
  return ::llsf_msgs::RobotState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_RobotInfo_2eproto
