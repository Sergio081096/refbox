// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MachineDescription.proto

#ifndef PROTOBUF_INCLUDED_MachineDescription_2eproto
#define PROTOBUF_INCLUDED_MachineDescription_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MachineDescription_2eproto 

namespace protobuf_MachineDescription_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MachineDescription_2eproto
namespace llsf_msgs {
}  // namespace llsf_msgs
namespace llsf_msgs {

enum LightColor {
  RED = 0,
  YELLOW = 1,
  GREEN = 2
};
bool LightColor_IsValid(int value);
const LightColor LightColor_MIN = RED;
const LightColor LightColor_MAX = GREEN;
const int LightColor_ARRAYSIZE = LightColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightColor_descriptor();
inline const ::std::string& LightColor_Name(LightColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightColor_descriptor(), value);
}
inline bool LightColor_Parse(
    const ::std::string& name, LightColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightColor>(
    LightColor_descriptor(), name, value);
}
enum LightState {
  OFF = 0,
  ON = 1,
  BLINK = 2
};
bool LightState_IsValid(int value);
const LightState LightState_MIN = OFF;
const LightState LightState_MAX = BLINK;
const int LightState_ARRAYSIZE = LightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LightState_descriptor();
inline const ::std::string& LightState_Name(LightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LightState_descriptor(), value);
}
inline bool LightState_Parse(
    const ::std::string& name, LightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightState>(
    LightState_descriptor(), name, value);
}
enum SSOp {
  STORE = 1,
  RETRIEVE = 2,
  CHANGE_INFO = 3
};
bool SSOp_IsValid(int value);
const SSOp SSOp_MIN = STORE;
const SSOp SSOp_MAX = CHANGE_INFO;
const int SSOp_ARRAYSIZE = SSOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSOp_descriptor();
inline const ::std::string& SSOp_Name(SSOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSOp_descriptor(), value);
}
inline bool SSOp_Parse(
    const ::std::string& name, SSOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSOp>(
    SSOp_descriptor(), name, value);
}
enum CSOp {
  RETRIEVE_CAP = 1,
  MOUNT_CAP = 2
};
bool CSOp_IsValid(int value);
const CSOp CSOp_MIN = RETRIEVE_CAP;
const CSOp CSOp_MAX = MOUNT_CAP;
const int CSOp_ARRAYSIZE = CSOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* CSOp_descriptor();
inline const ::std::string& CSOp_Name(CSOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    CSOp_descriptor(), value);
}
inline bool CSOp_Parse(
    const ::std::string& name, CSOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CSOp>(
    CSOp_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::LightColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::LightColor>() {
  return ::llsf_msgs::LightColor_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::LightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::LightState>() {
  return ::llsf_msgs::LightState_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::SSOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SSOp>() {
  return ::llsf_msgs::SSOp_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::CSOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::CSOp>() {
  return ::llsf_msgs::CSOp_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MachineDescription_2eproto
