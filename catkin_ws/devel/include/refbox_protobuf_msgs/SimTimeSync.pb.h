// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimTimeSync.proto

#ifndef PROTOBUF_INCLUDED_SimTimeSync_2eproto
#define PROTOBUF_INCLUDED_SimTimeSync_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SimTimeSync_2eproto 

namespace protobuf_SimTimeSync_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SimTimeSync_2eproto
namespace llsf_msgs {
class SimTimeSync;
class SimTimeSyncDefaultTypeInternal;
extern SimTimeSyncDefaultTypeInternal _SimTimeSync_default_instance_;
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> ::llsf_msgs::SimTimeSync* Arena::CreateMaybeMessage<::llsf_msgs::SimTimeSync>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace llsf_msgs {

enum SimTimeSync_CompType {
  SimTimeSync_CompType_COMP_ID = 2000,
  SimTimeSync_CompType_MSG_TYPE = 327
};
bool SimTimeSync_CompType_IsValid(int value);
const SimTimeSync_CompType SimTimeSync_CompType_CompType_MIN = SimTimeSync_CompType_MSG_TYPE;
const SimTimeSync_CompType SimTimeSync_CompType_CompType_MAX = SimTimeSync_CompType_COMP_ID;
const int SimTimeSync_CompType_CompType_ARRAYSIZE = SimTimeSync_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SimTimeSync_CompType_descriptor();
inline const ::std::string& SimTimeSync_CompType_Name(SimTimeSync_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SimTimeSync_CompType_descriptor(), value);
}
inline bool SimTimeSync_CompType_Parse(
    const ::std::string& name, SimTimeSync_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SimTimeSync_CompType>(
    SimTimeSync_CompType_descriptor(), name, value);
}
// ===================================================================

class SimTimeSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:llsf_msgs.SimTimeSync) */ {
 public:
  SimTimeSync();
  virtual ~SimTimeSync();

  SimTimeSync(const SimTimeSync& from);

  inline SimTimeSync& operator=(const SimTimeSync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimTimeSync(SimTimeSync&& from) noexcept
    : SimTimeSync() {
    *this = ::std::move(from);
  }

  inline SimTimeSync& operator=(SimTimeSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimTimeSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimTimeSync* internal_default_instance() {
    return reinterpret_cast<const SimTimeSync*>(
               &_SimTimeSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SimTimeSync* other);
  friend void swap(SimTimeSync& a, SimTimeSync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimTimeSync* New() const final {
    return CreateMaybeMessage<SimTimeSync>(NULL);
  }

  SimTimeSync* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimTimeSync>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimTimeSync& from);
  void MergeFrom(const SimTimeSync& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimTimeSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimTimeSync_CompType CompType;
  static const CompType COMP_ID =
    SimTimeSync_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    SimTimeSync_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SimTimeSync_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SimTimeSync_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SimTimeSync_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SimTimeSync_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SimTimeSync_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SimTimeSync_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SimTimeSync_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .llsf_msgs.Time sim_time = 1;
  bool has_sim_time() const;
  void clear_sim_time();
  static const int kSimTimeFieldNumber = 1;
  private:
  const ::llsf_msgs::Time& _internal_sim_time() const;
  public:
  const ::llsf_msgs::Time& sim_time() const;
  ::llsf_msgs::Time* release_sim_time();
  ::llsf_msgs::Time* mutable_sim_time();
  void set_allocated_sim_time(::llsf_msgs::Time* sim_time);

  // required float real_time_factor = 2;
  bool has_real_time_factor() const;
  void clear_real_time_factor();
  static const int kRealTimeFactorFieldNumber = 2;
  float real_time_factor() const;
  void set_real_time_factor(float value);

  // required bool paused = 3;
  bool has_paused() const;
  void clear_paused();
  static const int kPausedFieldNumber = 3;
  bool paused() const;
  void set_paused(bool value);

  // @@protoc_insertion_point(class_scope:llsf_msgs.SimTimeSync)
 private:
  void set_has_sim_time();
  void clear_has_sim_time();
  void set_has_real_time_factor();
  void clear_has_real_time_factor();
  void set_has_paused();
  void clear_has_paused();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::llsf_msgs::Time* sim_time_;
  float real_time_factor_;
  bool paused_;
  friend struct ::protobuf_SimTimeSync_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimTimeSync

// required .llsf_msgs.Time sim_time = 1;
inline bool SimTimeSync::has_sim_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimTimeSync::set_has_sim_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimTimeSync::clear_has_sim_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::llsf_msgs::Time& SimTimeSync::_internal_sim_time() const {
  return *sim_time_;
}
inline const ::llsf_msgs::Time& SimTimeSync::sim_time() const {
  const ::llsf_msgs::Time* p = sim_time_;
  // @@protoc_insertion_point(field_get:llsf_msgs.SimTimeSync.sim_time)
  return p != NULL ? *p : *reinterpret_cast<const ::llsf_msgs::Time*>(
      &::llsf_msgs::_Time_default_instance_);
}
inline ::llsf_msgs::Time* SimTimeSync::release_sim_time() {
  // @@protoc_insertion_point(field_release:llsf_msgs.SimTimeSync.sim_time)
  clear_has_sim_time();
  ::llsf_msgs::Time* temp = sim_time_;
  sim_time_ = NULL;
  return temp;
}
inline ::llsf_msgs::Time* SimTimeSync::mutable_sim_time() {
  set_has_sim_time();
  if (sim_time_ == NULL) {
    auto* p = CreateMaybeMessage<::llsf_msgs::Time>(GetArenaNoVirtual());
    sim_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:llsf_msgs.SimTimeSync.sim_time)
  return sim_time_;
}
inline void SimTimeSync::set_allocated_sim_time(::llsf_msgs::Time* sim_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sim_time_);
  }
  if (sim_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sim_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sim_time, submessage_arena);
    }
    set_has_sim_time();
  } else {
    clear_has_sim_time();
  }
  sim_time_ = sim_time;
  // @@protoc_insertion_point(field_set_allocated:llsf_msgs.SimTimeSync.sim_time)
}

// required float real_time_factor = 2;
inline bool SimTimeSync::has_real_time_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimTimeSync::set_has_real_time_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimTimeSync::clear_has_real_time_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimTimeSync::clear_real_time_factor() {
  real_time_factor_ = 0;
  clear_has_real_time_factor();
}
inline float SimTimeSync::real_time_factor() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SimTimeSync.real_time_factor)
  return real_time_factor_;
}
inline void SimTimeSync::set_real_time_factor(float value) {
  set_has_real_time_factor();
  real_time_factor_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.SimTimeSync.real_time_factor)
}

// required bool paused = 3;
inline bool SimTimeSync::has_paused() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimTimeSync::set_has_paused() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimTimeSync::clear_has_paused() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimTimeSync::clear_paused() {
  paused_ = false;
  clear_has_paused();
}
inline bool SimTimeSync::paused() const {
  // @@protoc_insertion_point(field_get:llsf_msgs.SimTimeSync.paused)
  return paused_;
}
inline void SimTimeSync::set_paused(bool value) {
  set_has_paused();
  paused_ = value;
  // @@protoc_insertion_point(field_set:llsf_msgs.SimTimeSync.paused)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::SimTimeSync_CompType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SimTimeSync_CompType>() {
  return ::llsf_msgs::SimTimeSync_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SimTimeSync_2eproto
