// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProductColor.proto

#ifndef PROTOBUF_INCLUDED_ProductColor_2eproto
#define PROTOBUF_INCLUDED_ProductColor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ProductColor_2eproto 

namespace protobuf_ProductColor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ProductColor_2eproto
namespace llsf_msgs {
}  // namespace llsf_msgs
namespace llsf_msgs {

enum RingColor {
  RING_BLUE = 1,
  RING_GREEN = 2,
  RING_ORANGE = 3,
  RING_YELLOW = 4
};
bool RingColor_IsValid(int value);
const RingColor RingColor_MIN = RING_BLUE;
const RingColor RingColor_MAX = RING_YELLOW;
const int RingColor_ARRAYSIZE = RingColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* RingColor_descriptor();
inline const ::std::string& RingColor_Name(RingColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    RingColor_descriptor(), value);
}
inline bool RingColor_Parse(
    const ::std::string& name, RingColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RingColor>(
    RingColor_descriptor(), name, value);
}
enum BaseColor {
  BASE_RED = 1,
  BASE_BLACK = 2,
  BASE_SILVER = 3,
  BASE_CLEAR = 4
};
bool BaseColor_IsValid(int value);
const BaseColor BaseColor_MIN = BASE_RED;
const BaseColor BaseColor_MAX = BASE_CLEAR;
const int BaseColor_ARRAYSIZE = BaseColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* BaseColor_descriptor();
inline const ::std::string& BaseColor_Name(BaseColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    BaseColor_descriptor(), value);
}
inline bool BaseColor_Parse(
    const ::std::string& name, BaseColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseColor>(
    BaseColor_descriptor(), name, value);
}
enum CapColor {
  CAP_BLACK = 1,
  CAP_GREY = 2
};
bool CapColor_IsValid(int value);
const CapColor CapColor_MIN = CAP_BLACK;
const CapColor CapColor_MAX = CAP_GREY;
const int CapColor_ARRAYSIZE = CapColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* CapColor_descriptor();
inline const ::std::string& CapColor_Name(CapColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    CapColor_descriptor(), value);
}
inline bool CapColor_Parse(
    const ::std::string& name, CapColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CapColor>(
    CapColor_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::llsf_msgs::RingColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::RingColor>() {
  return ::llsf_msgs::RingColor_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::BaseColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::BaseColor>() {
  return ::llsf_msgs::BaseColor_descriptor();
}
template <> struct is_proto_enum< ::llsf_msgs::CapColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::CapColor>() {
  return ::llsf_msgs::CapColor_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ProductColor_2eproto
