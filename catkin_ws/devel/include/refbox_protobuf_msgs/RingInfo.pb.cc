// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RingInfo.proto

#include "RingInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_RingInfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_RingInfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ring;
}  // namespace protobuf_RingInfo_2eproto
namespace llsf_msgs {
class RingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ring>
      _instance;
} _Ring_default_instance_;
class RingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RingInfo>
      _instance;
} _RingInfo_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_RingInfo_2eproto {
static void InitDefaultsRing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_Ring_default_instance_;
    new (ptr) ::llsf_msgs::Ring();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::Ring::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ring =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRing}, {}};

static void InitDefaultsRingInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_RingInfo_default_instance_;
    new (ptr) ::llsf_msgs::RingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::RingInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RingInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRingInfo}, {
      &protobuf_RingInfo_2eproto::scc_info_Ring.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Ring.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RingInfo.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Ring, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Ring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Ring, ring_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::Ring, raw_material_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::RingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::RingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::RingInfo, rings_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::llsf_msgs::Ring)},
  { 9, 15, sizeof(::llsf_msgs::RingInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_Ring_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_RingInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "RingInfo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016RingInfo.proto\022\tllsf_msgs\032\022ProductColo"
      "r.proto\"F\n\004Ring\022(\n\nring_color\030\001 \002(\0162\024.ll"
      "sf_msgs.RingColor\022\024\n\014raw_material\030\002 \002(\r\""
      "R\n\010RingInfo\022\036\n\005rings\030\001 \003(\0132\017.llsf_msgs.R"
      "ing\"&\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYP"
      "E\020nB1\n\037org.robocup_logistics.llsf_msgsB\016"
      "RingInfoProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RingInfo.proto", &protobuf_RegisterTypes);
  ::protobuf_ProductColor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_RingInfo_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* RingInfo_CompType_descriptor() {
  protobuf_RingInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RingInfo_2eproto::file_level_enum_descriptors[0];
}
bool RingInfo_CompType_IsValid(int value) {
  switch (value) {
    case 110:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RingInfo_CompType RingInfo::COMP_ID;
const RingInfo_CompType RingInfo::MSG_TYPE;
const RingInfo_CompType RingInfo::CompType_MIN;
const RingInfo_CompType RingInfo::CompType_MAX;
const int RingInfo::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Ring::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ring::kRingColorFieldNumber;
const int Ring::kRawMaterialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ring::Ring()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RingInfo_2eproto::scc_info_Ring.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.Ring)
}
Ring::Ring(const Ring& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&raw_material_, &from.raw_material_,
    static_cast<size_t>(reinterpret_cast<char*>(&ring_color_) -
    reinterpret_cast<char*>(&raw_material_)) + sizeof(ring_color_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.Ring)
}

void Ring::SharedCtor() {
  raw_material_ = 0u;
  ring_color_ = 1;
}

Ring::~Ring() {
  // @@protoc_insertion_point(destructor:llsf_msgs.Ring)
  SharedDtor();
}

void Ring::SharedDtor() {
}

void Ring::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ring::descriptor() {
  ::protobuf_RingInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RingInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ring& Ring::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RingInfo_2eproto::scc_info_Ring.base);
  return *internal_default_instance();
}


void Ring::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.Ring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    raw_material_ = 0u;
    ring_color_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.Ring)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.RingColor ring_color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::RingColor_IsValid(value)) {
            set_ring_color(static_cast< ::llsf_msgs::RingColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 raw_material = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_raw_material();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_material_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.Ring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.Ring)
  return false;
#undef DO_
}

void Ring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.Ring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.RingColor ring_color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ring_color(), output);
  }

  // required uint32 raw_material = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raw_material(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.Ring)
}

::google::protobuf::uint8* Ring::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.Ring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.RingColor ring_color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ring_color(), target);
  }

  // required uint32 raw_material = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raw_material(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.Ring)
  return target;
}

size_t Ring::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.Ring)
  size_t total_size = 0;

  if (has_raw_material()) {
    // required uint32 raw_material = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raw_material());
  }

  if (has_ring_color()) {
    // required .llsf_msgs.RingColor ring_color = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ring_color());
  }

  return total_size;
}
size_t Ring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.Ring)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 raw_material = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raw_material());

    // required .llsf_msgs.RingColor ring_color = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ring_color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ring::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.Ring)
  GOOGLE_DCHECK_NE(&from, this);
  const Ring* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ring>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.Ring)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.Ring)
    MergeFrom(*source);
  }
}

void Ring::MergeFrom(const Ring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.Ring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      raw_material_ = from.raw_material_;
    }
    if (cached_has_bits & 0x00000002u) {
      ring_color_ = from.ring_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ring::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.Ring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ring::CopyFrom(const Ring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.Ring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ring::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Ring::Swap(Ring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ring::InternalSwap(Ring* other) {
  using std::swap;
  swap(raw_material_, other->raw_material_);
  swap(ring_color_, other->ring_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ring::GetMetadata() const {
  protobuf_RingInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RingInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RingInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RingInfo::kRingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RingInfo::RingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RingInfo_2eproto::scc_info_RingInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.RingInfo)
}
RingInfo::RingInfo(const RingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rings_(from.rings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.RingInfo)
}

void RingInfo::SharedCtor() {
}

RingInfo::~RingInfo() {
  // @@protoc_insertion_point(destructor:llsf_msgs.RingInfo)
  SharedDtor();
}

void RingInfo::SharedDtor() {
}

void RingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RingInfo::descriptor() {
  ::protobuf_RingInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RingInfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RingInfo& RingInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RingInfo_2eproto::scc_info_RingInfo.base);
  return *internal_default_instance();
}


void RingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.RingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.RingInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.Ring rings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.RingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.RingInfo)
  return false;
#undef DO_
}

void RingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.RingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.Ring rings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.RingInfo)
}

::google::protobuf::uint8* RingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.RingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .llsf_msgs.Ring rings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rings(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.RingInfo)
  return target;
}

size_t RingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.RingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .llsf_msgs.Ring rings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.RingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.RingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.RingInfo)
    MergeFrom(*source);
  }
}

void RingInfo::MergeFrom(const RingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.RingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rings_.MergeFrom(from.rings_);
}

void RingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.RingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingInfo::CopyFrom(const RingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.RingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->rings())) return false;
  return true;
}

void RingInfo::Swap(RingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RingInfo::InternalSwap(RingInfo* other) {
  using std::swap;
  CastToBase(&rings_)->InternalSwap(CastToBase(&other->rings_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RingInfo::GetMetadata() const {
  protobuf_RingInfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RingInfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::Ring* Arena::CreateMaybeMessage< ::llsf_msgs::Ring >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::Ring >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::RingInfo* Arena::CreateMaybeMessage< ::llsf_msgs::RingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::RingInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
