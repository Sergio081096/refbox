// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeaconSignal.proto

#include "BeaconSignal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AgentTask_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AgentTask_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_AgentTask;
}  // namespace protobuf_AgentTask_2eproto
namespace protobuf_BeaconSignal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BeaconSignal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FinishedTask;
}  // namespace protobuf_BeaconSignal_2eproto
namespace protobuf_Pose2D_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pose2D_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pose2D;
}  // namespace protobuf_Pose2D_2eproto
namespace protobuf_Time_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Time_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_Time_2eproto
namespace llsf_msgs {
class BeaconSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeaconSignal>
      _instance;
} _BeaconSignal_default_instance_;
class FinishedTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishedTask>
      _instance;
} _FinishedTask_default_instance_;
}  // namespace llsf_msgs
namespace protobuf_BeaconSignal_2eproto {
static void InitDefaultsBeaconSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_BeaconSignal_default_instance_;
    new (ptr) ::llsf_msgs::BeaconSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::BeaconSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_BeaconSignal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsBeaconSignal}, {
      &protobuf_Time_2eproto::scc_info_Time.base,
      &protobuf_Pose2D_2eproto::scc_info_Pose2D.base,
      &protobuf_AgentTask_2eproto::scc_info_AgentTask.base,
      &protobuf_BeaconSignal_2eproto::scc_info_FinishedTask.base,}};

static void InitDefaultsFinishedTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::llsf_msgs::_FinishedTask_default_instance_;
    new (ptr) ::llsf_msgs::FinishedTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::llsf_msgs::FinishedTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishedTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishedTask}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BeaconSignal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishedTask.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, peer_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, team_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::BeaconSignal, finished_tasks_),
  2,
  5,
  7,
  0,
  1,
  6,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::FinishedTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::FinishedTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::FinishedTask, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::llsf_msgs::FinishedTask, successful_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::llsf_msgs::BeaconSignal)},
  { 23, 30, sizeof(::llsf_msgs::FinishedTask)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_BeaconSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::llsf_msgs::_FinishedTask_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BeaconSignal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022BeaconSignal.proto\022\tllsf_msgs\032\nTime.pr"
      "oto\032\nTeam.proto\032\014Pose2D.proto\032\017AgentTask"
      ".proto\"\263\002\n\014BeaconSignal\022\035\n\004time\030\001 \002(\0132\017."
      "llsf_msgs.Time\022\013\n\003seq\030\002 \002(\004\022\016\n\006number\030\010 "
      "\002(\r\022\021\n\tteam_name\030\004 \002(\t\022\021\n\tpeer_name\030\005 \002("
      "\t\022#\n\nteam_color\030\006 \001(\0162\017.llsf_msgs.Team\022\037"
      "\n\004pose\030\007 \001(\0132\021.llsf_msgs.Pose2D\022\"\n\004task\030"
      "\t \001(\0132\024.llsf_msgs.AgentTask\022/\n\016finished_"
      "tasks\030\n \003(\0132\027.llsf_msgs.FinishedTask\"&\n\010"
      "CompType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\001\"2\n\014"
      "FinishedTask\022\016\n\006TaskId\030\001 \002(\r\022\022\n\nsuccessf"
      "ul\030\002 \002(\010B5\n\037org.robocup_logistics.llsf_m"
      "sgsB\022BeaconSignalProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BeaconSignal.proto", &protobuf_RegisterTypes);
  ::protobuf_Time_2eproto::AddDescriptors();
  ::protobuf_Team_2eproto::AddDescriptors();
  ::protobuf_Pose2D_2eproto::AddDescriptors();
  ::protobuf_AgentTask_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BeaconSignal_2eproto
namespace llsf_msgs {
const ::google::protobuf::EnumDescriptor* BeaconSignal_CompType_descriptor() {
  protobuf_BeaconSignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BeaconSignal_2eproto::file_level_enum_descriptors[0];
}
bool BeaconSignal_CompType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BeaconSignal_CompType BeaconSignal::COMP_ID;
const BeaconSignal_CompType BeaconSignal::MSG_TYPE;
const BeaconSignal_CompType BeaconSignal::CompType_MIN;
const BeaconSignal_CompType BeaconSignal::CompType_MAX;
const int BeaconSignal::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BeaconSignal::InitAsDefaultInstance() {
  ::llsf_msgs::_BeaconSignal_default_instance_._instance.get_mutable()->time_ = const_cast< ::llsf_msgs::Time*>(
      ::llsf_msgs::Time::internal_default_instance());
  ::llsf_msgs::_BeaconSignal_default_instance_._instance.get_mutable()->pose_ = const_cast< ::llsf_msgs::Pose2D*>(
      ::llsf_msgs::Pose2D::internal_default_instance());
  ::llsf_msgs::_BeaconSignal_default_instance_._instance.get_mutable()->task_ = const_cast< ::llsf_msgs::AgentTask*>(
      ::llsf_msgs::AgentTask::internal_default_instance());
}
void BeaconSignal::clear_time() {
  if (time_ != NULL) time_->Clear();
  clear_has_time();
}
void BeaconSignal::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
void BeaconSignal::clear_task() {
  if (task_ != NULL) task_->Clear();
  clear_has_task();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeaconSignal::kTimeFieldNumber;
const int BeaconSignal::kSeqFieldNumber;
const int BeaconSignal::kNumberFieldNumber;
const int BeaconSignal::kTeamNameFieldNumber;
const int BeaconSignal::kPeerNameFieldNumber;
const int BeaconSignal::kTeamColorFieldNumber;
const int BeaconSignal::kPoseFieldNumber;
const int BeaconSignal::kTaskFieldNumber;
const int BeaconSignal::kFinishedTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeaconSignal::BeaconSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BeaconSignal_2eproto::scc_info_BeaconSignal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.BeaconSignal)
}
BeaconSignal::BeaconSignal(const BeaconSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      finished_tasks_(from.finished_tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  peer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_name()) {
    peer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
  if (from.has_time()) {
    time_ = new ::llsf_msgs::Time(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::llsf_msgs::Pose2D(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_task()) {
    task_ = new ::llsf_msgs::AgentTask(*from.task_);
  } else {
    task_ = NULL;
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.BeaconSignal)
}

void BeaconSignal::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&time_)) + sizeof(number_));
}

BeaconSignal::~BeaconSignal() {
  // @@protoc_insertion_point(destructor:llsf_msgs.BeaconSignal)
  SharedDtor();
}

void BeaconSignal::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete task_;
}

void BeaconSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BeaconSignal::descriptor() {
  ::protobuf_BeaconSignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BeaconSignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BeaconSignal& BeaconSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BeaconSignal_2eproto::scc_info_BeaconSignal.base);
  return *internal_default_instance();
}


void BeaconSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.BeaconSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finished_tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      peer_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(time_ != NULL);
      time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(task_ != NULL);
      task_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_) -
        reinterpret_cast<char*>(&seq_)) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BeaconSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.BeaconSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .llsf_msgs.Time time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_seq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.BeaconSignal.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_name().data(), static_cast<int>(this->peer_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "llsf_msgs.BeaconSignal.peer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Team team_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::llsf_msgs::Team_IsValid(value)) {
            set_team_color(static_cast< ::llsf_msgs::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.Pose2D pose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .llsf_msgs.AgentTask task = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .llsf_msgs.FinishedTask finished_tasks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_finished_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.BeaconSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.BeaconSignal)
  return false;
#undef DO_
}

void BeaconSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.BeaconSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Time time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time(), output);
  }

  // required uint64 seq = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seq(), output);
  }

  // required string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.BeaconSignal.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // required string peer_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_name().data(), static_cast<int>(this->peer_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.BeaconSignal.peer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->peer_name(), output);
  }

  // optional .llsf_msgs.Team team_color = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->team_color(), output);
  }

  // optional .llsf_msgs.Pose2D pose = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_pose(), output);
  }

  // required uint32 number = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->number(), output);
  }

  // optional .llsf_msgs.AgentTask task = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_task(), output);
  }

  // repeated .llsf_msgs.FinishedTask finished_tasks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->finished_tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->finished_tasks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.BeaconSignal)
}

::google::protobuf::uint8* BeaconSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.BeaconSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .llsf_msgs.Time time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time(), deterministic, target);
  }

  // required uint64 seq = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->seq(), target);
  }

  // required string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.BeaconSignal.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // required string peer_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_name().data(), static_cast<int>(this->peer_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "llsf_msgs.BeaconSignal.peer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->peer_name(), target);
  }

  // optional .llsf_msgs.Team team_color = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->team_color(), target);
  }

  // optional .llsf_msgs.Pose2D pose = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_pose(), deterministic, target);
  }

  // required uint32 number = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->number(), target);
  }

  // optional .llsf_msgs.AgentTask task = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_task(), deterministic, target);
  }

  // repeated .llsf_msgs.FinishedTask finished_tasks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->finished_tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->finished_tasks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.BeaconSignal)
  return target;
}

size_t BeaconSignal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.BeaconSignal)
  size_t total_size = 0;

  if (has_team_name()) {
    // required string team_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }

  if (has_peer_name()) {
    // required string peer_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_name());
  }

  if (has_time()) {
    // required .llsf_msgs.Time time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (has_seq()) {
    // required uint64 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seq());
  }

  if (has_number()) {
    // required uint32 number = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  return total_size;
}
size_t BeaconSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.BeaconSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000a7) ^ 0x000000a7) == 0) {  // All required fields are present.
    // required string team_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());

    // required string peer_name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_name());

    // required .llsf_msgs.Time time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);

    // required uint64 seq = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seq());

    // required uint32 number = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .llsf_msgs.FinishedTask finished_tasks = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->finished_tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->finished_tasks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional .llsf_msgs.Pose2D pose = 7;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional .llsf_msgs.AgentTask task = 9;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_);
    }

  }
  // optional .llsf_msgs.Team team_color = 6;
  if (has_team_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeaconSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.BeaconSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const BeaconSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeaconSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.BeaconSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.BeaconSignal)
    MergeFrom(*source);
  }
}

void BeaconSignal::MergeFrom(const BeaconSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.BeaconSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finished_tasks_.MergeFrom(from.finished_tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_peer_name();
      peer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_time()->::llsf_msgs::Time::MergeFrom(from.time());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pose()->::llsf_msgs::Pose2D::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_task()->::llsf_msgs::AgentTask::MergeFrom(from.task());
    }
    if (cached_has_bits & 0x00000020u) {
      seq_ = from.seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_color_ = from.team_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeaconSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.BeaconSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeaconSignal::CopyFrom(const BeaconSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.BeaconSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeaconSignal::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000a7) != 0x000000a7) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->finished_tasks())) return false;
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_task()) {
    if (!this->task_->IsInitialized()) return false;
  }
  return true;
}

void BeaconSignal::Swap(BeaconSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeaconSignal::InternalSwap(BeaconSignal* other) {
  using std::swap;
  CastToBase(&finished_tasks_)->InternalSwap(CastToBase(&other->finished_tasks_));
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_name_.Swap(&other->peer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(pose_, other->pose_);
  swap(task_, other->task_);
  swap(seq_, other->seq_);
  swap(team_color_, other->team_color_);
  swap(number_, other->number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BeaconSignal::GetMetadata() const {
  protobuf_BeaconSignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BeaconSignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishedTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishedTask::kTaskIdFieldNumber;
const int FinishedTask::kSuccessfulFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishedTask::FinishedTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BeaconSignal_2eproto::scc_info_FinishedTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:llsf_msgs.FinishedTask)
}
FinishedTask::FinishedTask(const FinishedTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taskid_, &from.taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&successful_) -
    reinterpret_cast<char*>(&taskid_)) + sizeof(successful_));
  // @@protoc_insertion_point(copy_constructor:llsf_msgs.FinishedTask)
}

void FinishedTask::SharedCtor() {
  ::memset(&taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&successful_) -
      reinterpret_cast<char*>(&taskid_)) + sizeof(successful_));
}

FinishedTask::~FinishedTask() {
  // @@protoc_insertion_point(destructor:llsf_msgs.FinishedTask)
  SharedDtor();
}

void FinishedTask::SharedDtor() {
}

void FinishedTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishedTask::descriptor() {
  ::protobuf_BeaconSignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BeaconSignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishedTask& FinishedTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BeaconSignal_2eproto::scc_info_FinishedTask.base);
  return *internal_default_instance();
}


void FinishedTask::Clear() {
// @@protoc_insertion_point(message_clear_start:llsf_msgs.FinishedTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&successful_) -
        reinterpret_cast<char*>(&taskid_)) + sizeof(successful_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FinishedTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:llsf_msgs.FinishedTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TaskId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool successful = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_successful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:llsf_msgs.FinishedTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:llsf_msgs.FinishedTask)
  return false;
#undef DO_
}

void FinishedTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:llsf_msgs.FinishedTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 TaskId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required bool successful = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->successful(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:llsf_msgs.FinishedTask)
}

::google::protobuf::uint8* FinishedTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:llsf_msgs.FinishedTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 TaskId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required bool successful = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->successful(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:llsf_msgs.FinishedTask)
  return target;
}

size_t FinishedTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:llsf_msgs.FinishedTask)
  size_t total_size = 0;

  if (has_taskid()) {
    // required uint32 TaskId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());
  }

  if (has_successful()) {
    // required bool successful = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FinishedTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:llsf_msgs.FinishedTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 TaskId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taskid());

    // required bool successful = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishedTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:llsf_msgs.FinishedTask)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishedTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishedTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:llsf_msgs.FinishedTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:llsf_msgs.FinishedTask)
    MergeFrom(*source);
  }
}

void FinishedTask::MergeFrom(const FinishedTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:llsf_msgs.FinishedTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      taskid_ = from.taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      successful_ = from.successful_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FinishedTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:llsf_msgs.FinishedTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishedTask::CopyFrom(const FinishedTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:llsf_msgs.FinishedTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishedTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FinishedTask::Swap(FinishedTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishedTask::InternalSwap(FinishedTask* other) {
  using std::swap;
  swap(taskid_, other->taskid_);
  swap(successful_, other->successful_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishedTask::GetMetadata() const {
  protobuf_BeaconSignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BeaconSignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace llsf_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::BeaconSignal* Arena::CreateMaybeMessage< ::llsf_msgs::BeaconSignal >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::BeaconSignal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::llsf_msgs::FinishedTask* Arena::CreateMaybeMessage< ::llsf_msgs::FinishedTask >(Arena* arena) {
  return Arena::CreateInternal< ::llsf_msgs::FinishedTask >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
